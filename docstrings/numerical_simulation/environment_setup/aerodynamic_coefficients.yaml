#########################################################################
#    ███    ███  ██████  ██████  ██    ██ ██      ███████
#    ████  ████ ██    ██ ██   ██ ██    ██ ██      ██
#    ██ ████ ██ ██    ██ ██   ██ ██    ██ ██      █████
#    ██  ██  ██ ██    ██ ██   ██ ██    ██ ██      ██
#    ██      ██  ██████  ██████   ██████  ███████ ███████
#########################################################################
# Aerodynamic Coefficient Setup ( createAerodynamicCoefficientInterface.h)


extended_summary: |
  This module contains the factory functions for setting up the
  aerodynamic interface of artificial and celestial bodies in an environment.

#########################################################################
#  ███████ ███   ██ ██    ██ ███    ███  ██████
#  ██      ████  ██ ██    ██ ████  ████ █
#  █████   ██ ██ ██ ██    ██ ██ ████ ██  █████
#  ██      ██  ████ ██    ██ ██  ██  ██       █
#  ███████ ██    ██  ██████  ██      ██ ██████
#########################################################################

  # no enums



#########################################################################
#   ██████ ██          ██      ██████  ██████ ███████  ██████
#  ██      ██         ████    █       █       ██      █
#  ██      ██        ██  ██    █████   █████  █████    █████
#  ██      ██       ████████        █       █ ██            █
#   ██████ ███████ ██      ██ ██████  ██████  ███████ ██████
#########################################################################

classes:
  # base class:
  #######################################################################

  - name: AerodynamicCoefficientSettings
    short_summary: "Base class for providing settings for aerodynamic interface model."
    extended_summary: |
      Functional (base) class for settings of aerodynamic interface models that require no
      information in addition to their type.
      Aerodynamic interface model settings requiring additional information must be defined using an object derived from this class.

  # attributes: none exposed

    methods:
      - name: add_single_control_surface                          # [py]
        short_summary: |
          Function to add settings for a single control surface to the coefficient settings. Note that, in Tudat, the
          control surface aerodynamic database inherits the reference properties (length, area, moment reference point)
          from the ``AerodynamicCoefficientSettings`` to which it is assigned.
          
        parameters:
          - name: control_surface_settings
            type: ControlSurfaceIncrementAerodynamicCoefficientSettings
            description: |
              Settings for aerodynamic coefficients of a control surface 

          - name: control_surface_name # [py]
            type: str # [py]
            description: |             # [py]
              Name by which the control surface will be identified

    properties: # [py]
      - name: add_force_contribution_to_moments # [py]
        type: bool # [py]
        description: |
          Variable that toggles whether to add the force contribution to the moment coefficients as:
          
          .. math::
             \Delta \mathbf{C}_{M} = (\mathbf{r}_{ref}-\mathbf{r}_{com})\times \Delta \mathbf{C}_{F}
             
          where :math:`(\mathbd{r}_{ref}-\mathbf{r}_{com})` is the vector from the center of mass to the moment reference point, and :math:`\mathbf{C}_{F}` and :math:`\mathbf{C}_{M}` is the vector of forc and moment coefficients. Note that, if the force and moment coefficients afre defined in different frames, the relevant frame conversions are automatically performed.
          By default, this boolean is set to false, implicitly assuming that the moment coefficients are provided w.r.t. the (constant) center of mass.
        readonly: True # [py]
        
        
  # derived classes:
  #######################################################################

  - name: ConstantAerodynamicCoefficientSettings
    short_summary: "Class for defining model settings from constant aerodynamic coefficients."
    extended_summary: "`AerodynamicCoefficientSettings` derived class for aerodynamic interface model settings using only constant aerodynamic coefficients."

  # attributes: none exposed

    methods:       # [cpp]
    #methods:      # [py]
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of the `ConstantAerodynamicCoefficientSettings` class should be created through the `constantAerodynamicCoefficientSettings` factory function." # [cpp]
      #      - name: __init__ # [py]
      #        short_summary: "Constructor."
      #        extended_summary: "Instances of the `ScaledEphemerisSettings` class should be created through the `scaled` factory functions." # [py]


##############################################################################
#  ███████ ██    ██ ███    ██  ██████ ████████ ██  ██████  ███    ██  ██████
#  ██      ██    ██ ████   ██ ██         ██    ██ ██    ██ ████   ██ █
#  █████   ██    ██ ██ ██  ██ ██         ██    ██ ██    ██ ██ ██  ██  █████
#  ██      ██    ██ ██  ██ ██ ██         ██    ██ ██    ██ ██  ██ ██       █
#  ██       ██████  ██   ████  ██████    ██    ██  ██████  ██   ████ ██████
##############################################################################

functions:
  # factory functions:
  #######################################################################

  - name: constant # [py]
  - name: constantAerodynamicCoefficientSettings # [cpp]
    short_summary: "Factory function for creating aerodynamic interface model settings entirely from constant coefficients."
    extended_summary: |
      Factory function for settings object, defining aerodynamic interface model entirely from constant aerodynamic coefficients,
      i.e. coefficients are not a function of any independent variables.

    parameters:
      - name: reference_area # [py]
        type: float # [py]
      - name: referenceArea # [cpp]
        type: double # [cpp]
        description: "Reference area with which aerodynamic forces and moments are non-dimensionalized."

      - name: constant_force_coefficient # [py]
        type: numpy.ndarray # [py]
      - name: constantForceCoefficient # [cpp]
        type: Eigen::Vector3d # [cpp]
        description: "Constant force coefficients."

      - name: force_coefficients_frame # [py]
        type: AerodynamicCoefficientFrames, default = negative_aerodynamic_frame_coefficients # [py]
        description: |
          Variable defining the frame in which the force coefficients are defined. By default, this is the negative aerodynamic
          frame, so that the coefficients are for drag, side force and lift

    returns:
        type: ConstantAerodynamicCoefficientSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.aerodynamic_coefficients.AerodynamicCoefficientSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.aerodynamic_coefficients.ConstantAerodynamicCoefficientSettings` class

    examples: |
      In this example, we create :class:`~tudatpy.numerical_simulation.environment_setup.aerodynamic_coefficients.AerodynamicCoefficientSettings` for the artificial body "Vehicle", using only constant aerodynamic coefficients:

      .. code-block:: python # [py]
        # [py]
        # Define the reference area and constant aerodynamic coefficients # [py]
        reference_area = 20.0 # [py]
        drag_coefficient = 1.5 # [py]
        lift_coefficient = 0.3 # [py]
        # Create the aerodynamic interface settings # [py]
        aero_coefficient_settings = environment_setup.aerodynamic_coefficients.constant( # [py]
            reference_area, # [py]
            constant_force_coefficient=[drag_coefficient, 0, lift_coefficient], # [py]
            force_coefficients_frame=environment.negative_aerodynamic_frame_coefficients, # [py]
        ) # [py]
        # Assign aerodynamic interface to the vehicle # [py]
        environment_setup.add_aerodynamic_coefficient_interface(bodies, "Vehicle", aero_coefficient_settings) # [py]

      .. code-block:: cpp # [cpp]
         # [cpp]
         // define parameters of constant aerodynamic coefficient model # [cpp]
         double referenceArea = 20.0; # [cpp]
         Eigen::Vector3d constantCoefficients; # [cpp]
         constantCoefficients( 0 ) = 1.5; # [cpp]
         constantCoefficients( 2 ) = 0.3; # [cpp]
         // create aerodynamic interface and assign to "Spacecraft" vehicle # [cpp]
         bodySettings[ "Spacecraft" ]->aerodynamicCoefficientSettings = std::make_shared< ConstantAerodynamicCoefficientSettings >( # [cpp]
         referenceArea, constantCoefficients, true, true ); # [cpp]

  #######################################################################
  # (%!) not on tudat-space

  - name: custom_aerodynamic_force_coefficients # [py]
  - name: customAerodynamicCoefficientSettings # [cpp]
    short_summary: "Factory function for creating aerodynamic interface model settings from custom coefficients."
    extended_summary: |
      Factory function for settings object, defining aerodynamic interface model via a custom force coefficient function
      (function of independent variable).

    parameters:
      - name: force_coefficient_function # [py]
        type: callable[[list[float]], numpy.ndarray[numpy.float64[3, 1]]] # [py]
        description: Function that is defining the aerodynamic coefficients as function of an independent variable (see arg independent_variable_names). # [py]
      - name: forceCoefficientFunction # [cpp]
        type: std::function<Eigen::Vector3d(const std::vector<double> &)> # [cpp]
        description: Function that is defining the aerodynamic coefficients as function of an independent variable (see arg independentVariableNames). # [cpp]

      - name: reference_area # [py]
        type: float # [py]
      - name: referenceArea # [cpp]
        type: double # [cpp]
        description: "Reference area with which aerodynamic forces and moments are non-dimensionalized."

      - name: independent_variable_name # [py]
        type: list[environment.AerodynamicCoefficientsIndependentVariables] # [py]
      - name: independentVariableNames # [cpp]
        type: std::vector< aerodynamics::AerodynamicCoefficientsIndependentVariables > # [cpp]
        description: "Vector with identifiers for the independent variable w.r.t. which the aerodynamic coefficients are defined."

      - name: force_coefficients_frame # [py]
        type: AerodynamicCoefficientFrames, default = negative_aerodynamic_frame_coefficients # [py]
        description: |
          Variable defining the frame in which the force coefficients are defined. By default, this is the negative aerodynamic
          frame, so that the coefficients are for drag, side force and lift

    returns:
        type: CustomAerodynamicCoefficientSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.aerodynamic_coefficients.AerodynamicCoefficientSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.aerodynamic_coefficients.CustomAerodynamicCoefficientSettings` class
    
    examples: | # [py]
      In this example, we create :class:`~tudatpy.numerical_simulation.environment_setup.aerodynamic_coefficients.AerodynamicCoefficientSettings` for the artificial body "Vehicle", using a function based on the mach number: # [py]

      .. code-block:: python # [py]
        # [py]
        def force_coefficients(variables_list): # [py]
          # Extract the mach number # [py]
          mach_number = variables_list[0] # [py]
          # If the mach number is below 3, use fixed coefficients # [py]
          if mach_number <= 3: # [py]
              return [0.99, 0, 1.08] # [py]
          # Same if the mach number is above 10 # [py]
          elif mach_number >= 10: # [py]
              return [0.82, 0, 0.88] # [py]
          # Otherwise, vary linearly between the ones at M=3 and M=10 # [py]
          CD = 1.0667-0.02457*mach_number # [py]
          CL = 1.1636-0.02786*mach_number # [py]
          return [CD, 0, CL] # [py]
        # Create the aerodynamic interface settings # [py]
        aero_coefficient_settings = environment_setup.aerodynamic_coefficients.custom( # [py]
            force_coefficients, # [py]
            reference_area=1.50, # [py]
            independent_variable_names=[environment.AerodynamicCoefficientsIndependentVariables.mach_number_dependent] # [py]
        ) # [py]
        # Assign the aerodynamic coefficient interface to the vehicle # [py]
        environment_setup.add_aerodynamic_coefficient_interface(bodies, "Vehicle", aero_coefficient_settings) # [py]
  
  - name: custom_aerodynamic_force_and_moment_coefficients # [py]
  - name: customAerodynamicCoefficientSettings # [cpp]
    short_summary: "Factory function for creating aerodynamic interface model settings from custom coefficients."
    extended_summary: |
      Factory function for settings object, defining aerodynamic interface model via a custom force and moment coefficient function
      (function of independent variable).

    parameters:
      - name: force_coefficient_function # [py]
        type: callable[[list[float]], numpy.ndarray[numpy.float64[3, 1]]] # [py]
        description: Function that is defining the aerodynamic force coefficients as function of an independent variable (see arg independent_variable_names). # [py]

      - name: moment_coefficient_function # [py]
        type: callable[[list[float]], numpy.ndarray[numpy.float64[3, 1]]] # [py]
        description: Function that is defining the aerodynamic moment coefficients as function of an independent variable (see arg independent_variable_names). # [py]

      - name: reference_area # [py]
        type: float # [py]
      - name: referenceArea # [cpp]
        type: double # [cpp]
        description: "Reference area with which aerodynamic forces and moments are non-dimensionalized."

      - name: reference_length # [py]
        type: float # [py]
      - name: referenceLength# [cpp]
        type: double # [cpp]
        description: "Reference length with which aerodynamic moments are non-dimensionalized."

      - name: independent_variable_name # [py]
        type: list[environment.AerodynamicCoefficientsIndependentVariables] # [py]
      - name: independentVariableNames # [cpp]
        type: std::vector< aerodynamics::AerodynamicCoefficientsIndependentVariables > # [cpp]
        description: "Vector with identifiers for the independent variable w.r.t. which the aerodynamic coefficients are defined."

      - name: force_coefficients_frame # [py]
        type: AerodynamicCoefficientFrames, default = negative_aerodynamic_frame_coefficients # [py]
        description: |
          Variable defining the frame in which the force coefficients are defined. By default, this is the negative aerodynamic
          frame, so that the coefficients are for drag, side force and lift (:math:`C_{D}, C_{S}, C_{L}`)

      - name: moment_coefficients_frame # [py]
        type: AerodynamicCoefficientFrames, default = positive_body_frame_coefficients # [py]
        description: |
          Variable defining the frame in which the moment coefficients are defined. By default, this is the positive body
          frame, so that the coefficients are roll, pitch yaw (:math:`C_{l}, C_{m}, C_{n}`)
          
      - name: moment_reference_point # [py]
        type: numpy.ndarray[numpy.float64[3, 1]] = np.full([3, 1], np.nan) # [py]
      - name: momentReferencePoint # [cpp]
        type: double # [cpp]
        description: |
          Point w.r.t. aerodynamic moment coefficients are defined. This variable is used to calculate the contribution of the aerodynamic
          force coefficients to the effective moment coefficients. See the ``add_force_contribution_to_moments`` attribute of the 
          :class:`~tudatpy.numerical_simulation.environment_setup.aerodynamic_coefficients.AerodynamicCoefficientSettings` for more details.
          If the present input is set to NaN (as is the default), the reference point is left undefined, and the aerodynamic moments are computed
          without computing any force coefficient contribution to the moment coefficients.

          
    returns:
        type: CustomAerodynamicCoefficientSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.aerodynamic_coefficients.AerodynamicCoefficientSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.aerodynamic_coefficients.CustomAerodynamicCoefficientSettings` class
    
  #######################################################################
  # (%!) no example on tudat-space

  - name: tabulated # [py]
  - name: oneDimensionalTabulatedAerodynamicCoefficientSettings # [cpp]
    short_summary: "Factory function for creating aerodynamic interface model settings from user-defined, 1-d tabulated coefficients."
    extended_summary: |
      Factory function for settings object, defining aerodynamic interface model via user-defined, 1-dimensional, tabulated aerodynamic force and moment coefficients
      (tabulated w.r.t. independent variable).

    parameters:

      - name: independent_variables # [py]
        type: list[float] # [py]
      - name: constantForceCoefficient # [cpp]
        type: std::vector< aerodynamics::AerodynamicCoefficientsIndependentVariables > # [cpp]
        description: "Values of independent variables at which the coefficients in the input multi vector are defined (size 1)."

      - name: force_coefficients # [py]
        type: list[numpy.ndarray[numpy.float64[3, 1]]] # [py]
        description: Values of force coefficients at independent variables defined by independent_variables. # [py]
      - name: forceCoefficients # [cpp]
        type: std::vector< Eigen::Vector3d > # [cpp]
        description: Values of force coefficients at independent variables defined by independentVariables. # [cpp]

      - name: moment_coefficients # [py]
        type: list[numpy.ndarray[numpy.float64[3, 1]]] # [py]
        description: Values of moment coefficients at independent variables defined by independent_variables. # [py]
      - name: momentCoefficients # [cpp]
        type: std::vector< Eigen::Vector3d > # [cpp]
        description: Values of moment coefficients at independent variables defined by independentVariables. # [cpp]

      - name: reference_length # [py]
        type: float # [py]
      - name: referenceLength # [cpp]
        type: double # [cpp]
        description: "Reference length with which aerodynamic moments about x- and z- axes are non-dimensionalized."

      - name: reference_area # [py]
        type: float # [py]
      - name: referenceArea # [cpp]
        type: double # [cpp]
        description: "Reference area with which aerodynamic forces and moments are non-dimensionalized."

      - name: independent_variable_name # [py]
        type: list[environment.AerodynamicCoefficientsIndependentVariables] # [py]
      - name: independentVariableNames # [cpp]
        type: std::vector< aerodynamics::AerodynamicCoefficientsIndependentVariables > # [cpp]
        description: "Vector with identifiers for the independent variable w.r.t. which the aerodynamic coefficients are defined."


      - name: force_coefficients_frame # [py]
        type: AerodynamicCoefficientFrames, default = negative_aerodynamic_frame_coefficients # [py]
        description: |
          Variable defining the frame in which the force coefficients are defined. By default, this is the negative aerodynamic
          frame, so that the coefficients are for drag, side force and lift (:math:`C_{D}, C_{S}, C_{L}`)

      - name: moment_coefficients_frame # [py]
        type: AerodynamicCoefficientFrames, default = positive_body_frame_coefficients # [py]
        description: |
          Variable defining the frame in which the moment coefficients are defined. By default, this is the positive body
          frame, so that the coefficients are roll, pitch yaw (:math:`C_{l}, C_{m}, C_{n}`)

      - name: moment_reference_point # [py]
        type: numpy.ndarray[numpy.float64[3, 1]] = np.full([3, 1], np.nan) # [py]
        description: |
          Point w.r.t. aerodynamic moment coefficients are defined. This variable is used to calculate the contribution of the aerodynamic
          force coefficients to the effective moment coefficients. See the ``add_force_contribution_to_moments`` attribute of the 
          :class:`~tudatpy.numerical_simulation.environment_setup.aerodynamic_coefficients.AerodynamicCoefficientSettings` for more details.
          If the present input is set to NaN (as is the default), the reference point is left undefined, and the aerodynamic moments are computed
          without computing any force coefficient contribution to the moment coefficients.

      - name: interpolator_settings # [py]
        type: math.interpolators.InterpolatorSettings, default = None # [py]
        description: Interpolator settings object, where the conditions for interpolation of tabulated inputs are saved. # [py]
      - name: interpolatorSettings # [cpp]
        type: std::shared_ptr< interpolators::InterpolatorSettings >, default = nullptr # [cpp]
        description: Pointer to an interpolator settings object, where the conditions for interpolation of tabulated inputs are saved. # [cpp]


    returns:
        type: TabulatedAerodynamicCoefficientSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.aerodynamic_coefficients.AerodynamicCoefficientSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.aerodynamic_coefficients.TabulatedAerodynamicCoefficientSettings` class (via :class:`~tudatpy.numerical_simulation.environment_setup.aerodynamic_coefficients.TabulatedAerodynamicCoefficientSettingsBase` class)
    
    examples: | # [py]
      In this example, aerodynamic force and moment coefficients are defined as multi-dimensional arrays. # [py]
      The values for the aerodynamic coefficients vary with Mach number, and are defined for Mach numbers of 3, 5, 10, and 15. # [py]
      This example also shows how to set the required reference point, lengths, and area. # [py]

      .. code-block:: python # [py]
        # [py]
        # Define the aerodynamic force coefficients [CD, CS, CL] for different mach numbers # [py]
        aero_coefficients_array_force = [ # [py]
            [0.7647, 0, 0.9722], # [py]
            [0.6729, 0, 0.8461], # [py]
            [0.6240, 0, 0.7838], # [py]
            [0.6246, 0, 0.7841] # [py]
        ] # [py]
        # Define the aerodynamic moment coefficients for different mach numbers # [py]
        aero_coefficients_array_moment = [ # [py]
            [0.45, 0, 0], # [py]
            [0.50, 0, 0], # [py]
            [0.53, 0, 0], # [py]
            [0.55, 0, 0] # [py]
        ] # [py]
        # Create the aerodynamic interface settings # [py]
        aero_coefficient_settings = environment_setup.aerodynamic_coefficients.tabulated( # [py]
            independent_variables=[3, 5, 10, 15],       # Mach number at which the coefficients are defined # [py]
            force_coefficients=aero_coefficients_array_force, # [py]
            moment_coefficients=aero_coefficients_array_moment, # [py]
            reference_length=0.25, # [py]
            reference_area=1.50, # [py]
            independent_variable_name=environment.AerodynamicCoefficientsIndependentVariables.mach_number_dependent # [py]
        ) # [py]
        # Assign the aerodynamic coefficient interface to the vehicle # [py]
        environment_setup.add_aerodynamic_coefficient_interface(bodies, "Vehicle", aero_coefficient_settings) # [py]

  #######################################################################
  # (%!) not on tudat-space

  - name: tabulated_force_only # [py]
  - name: oneDimensionalTabulatedAerodynamicCoefficientSettings # [cpp]
    short_summary: "Factory function for creating aerodynamic interface model settings from user-defined, 1-d tabulated force coefficients."
    extended_summary: |
      Factory function for settings object, defining aerodynamic interface model via user-defined, 1-dimensional, tabulated aerodynamic force coefficients
      (tabulated w.r.t. independent variable).

    parameters:

      - name: independent_variables # [py]
        type: list[float] # [py]
      - name: constantForceCoefficient # [cpp]
        type: std::vector< aerodynamics::AerodynamicCoefficientsIndependentVariables > # [cpp]
        description: "Values of independent variables at which the coefficients in the input multi vector are defined (size 1)"

      - name: force_coefficients # [py]
        type: list[numpy.ndarray[numpy.float64[3, 1]]] # [py]
        description: Values of force coefficients at independent variables defined by independent_variables. # [py]
      - name: forceCoefficients # [cpp]
        type: std::vector< Eigen::Vector3d > # [cpp]
        description: Values of force coefficients at independent variables defined by independentVariables. # [cpp]

      - name: reference_area # [py]
        type: float # [py]
      - name: referenceArea # [cpp]
        type: double # [cpp]
        description: "Reference area with which aerodynamic forces and moments are non-dimensionalized."

      - name: independent_variable_name # [py]
        type: environment.AerodynamicCoefficientsIndependentVariables # [py]
      - name: independentVariableNames # [cpp]
        type: std::vector< aerodynamics::AerodynamicCoefficientsIndependentVariables > # [cpp]
        description: "Identifier of the independent variable w.r.t. which the aerodynamic coefficients are defined."

      
      - name: force_coefficients_frame # [py]
        type: AerodynamicCoefficientFrames, default = negative_aerodynamic_frame_coefficients # [py]
        description: |
          Variable defining the frame in which the force coefficients are defined. By default, this is the negative aerodynamic
          frame, so that the coefficients are for drag, side force and lift (:math:`C_{D}, C_{S}, C_{L}`)

      - name: interpolator_settings # [py]
        type: math.interpolators.InterpolatorSettings, default = None # [py]
        description: |  # [py]
          Interpolator settings object, where the conditions for interpolation of tabulated inputs are saved.
      - name: interpolatorSettings # [cpp]
        type: std::shared_ptr< interpolators::InterpolatorSettings >, default = nullptr # [cpp]
        description: | # [cpp]
          Pointer to an interpolator settings object where the conditions for interpolation of tabulated inputs are saved.

    returns:
        type: TabulatedAerodynamicCoefficientSettings  # [py]
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.aerodynamic_coefficients.AerodynamicCoefficientSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.aerodynamic_coefficients.TabulatedAerodynamicCoefficientSettings` class
    
    examples: | # [py]
      In this example, aerodynamic force coefficients are defined as a multi-dimensional array. # [py]
      The values for the force coefficients vary with Mach number, and are defined for Mach numbers of 3, 5, 10, and 15. # [py]

      .. code-block:: python # [py]
        # [py]
        # Define the aerodynamic coefficients [CD, CS, CL] for different mach numbers # [py]
        aero_coefficients_array = [ # [py]
            [0.7647, 0, 0.9722], # [py]
            [0.6729, 0, 0.8461], # [py]
            [0.6240, 0, 0.7838], # [py]
            [0.6246, 0, 0.7841] # [py]
        ] # [py]
        # Create the aerodynamic interface settings # [py]
        aero_coefficient_settings = environment_setup.aerodynamic_coefficients.tabulated_force_only( # [py]
            independent_variables=[3.0, 5.0, 10.0, 15.0],       # Mach number at which the coefficients are defined # [py]
            force_coefficients=aero_coefficients_array, # [py]
            reference_area=1.50, # [py]
            independent_variable_name=environment.AerodynamicCoefficientsIndependentVariables.mach_number_dependent # [py]
        ) # [py]
        # Assign the aerodynamic coefficient interface to the vehicle # [py]
        environment_setup.add_aerodynamic_coefficient_interface(bodies, "Vehicle", aero_coefficient_settings) # [py]

  #######################################################################
  # (%!) not on tudat-space

  - name: tabulated_force_only_from_files # [py]
  - name: readTabulatedAerodynamicCoefficientsFromFiles # [cpp]
    short_summary: "Factory function for creating aerodynamic interface model settings from tabulated force coefficients from files."
    extended_summary: |
      Factory function for settings object, defining aerodynamic interface model via user-defined, tabulated aerodynamic force coefficients
      (tabulated w.r.t. independent variable), obtained from data files.

    parameters:

      - name: force_coefficient_files # [py]
        type: Dict[int, str] # [py]
        description: Path of the aerodynamic coefficient files corresponding to the force coefficient of the given dict key. # [py]

      - name: reference_area # [py]
        type: float # [py]
        description: Reference area with which aerodynamic forces and moments are non-dimensionalized.

      - name: independent_variable_names # [py]
        type: list[environment.AerodynamicCoefficientsIndependentVariables] # [py]
        description: Vector with identifiers for the independent variable w.r.t. which the aerodynamic coefficients are defined.
      
      - name: force_coefficients_frame # [py]
        type: AerodynamicCoefficientFrames, default = negative_aerodynamic_frame_coefficients # [py]
        description: |
          Variable defining the frame in which the force coefficients are defined. By default, this is the negative aerodynamic
          frame, so that the coefficients are for drag, side force and lift (:math:`C_{D}, C_{S}, C_{L}`)

      - name: interpolator_settings # [py]
        type: math.interpolators.InterpolatorSettings, default = None # [py]
        description: |  # [py]
          Interpolator settings object, where the conditions for interpolation of tabulated inputs are saved.

    returns:
        type: TabulatedAerodynamicCoefficientSettings  # [py]
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.aerodynamic_coefficients.AerodynamicCoefficientSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.aerodynamic_coefficients.TabulatedAerodynamicCoefficientSettings` class
    
    examples: | # [py]
      In this example, the drag and lift coefficients of the Space Transport System are defined from two data files. # [py]
      Both of these data files contain coefficient values dependent on both the angle of attack and the mach number, # [py]
      as shown in the example in the `independent_variable_names` input. # [py]
      This example is taken from the `reentry trajectory example <https://github.com/tudat-team/tudatpy-examples/blob/1f8180b0064226175bbe66e3eaf044f229a897f6/propagation/reentry_trajectory.py>`_. # [py]

      .. code-block:: python # [py]
        # [py]
        # Define the aerodynamic coefficient files (leave C_S empty) # [py]
        aero_coefficients_files = {0: "input/STS_CD.dat", 2:"input/STS_CL.dat"} # [py]
        # Setup the aerodynamic coefficients settings tabulated from the files # [py]
        coefficient_settings = environment_setup.aerodynamic_coefficients.tabulated_force_only_from_files( # [py]
            force_coefficient_files=aero_coefficients_files, # [py]
            reference_area=2690.0*0.3048*0.3048, # [py]
            independent_variable_names=[environment.angle_of_attack_dependent, environment.mach_number_dependent] # [py]
        ) # [py]
        # Add predefined aerodynamic coefficients database to the body # [py]
        environment_setup.add_aerodynamic_coefficient_interface(bodies, "STS", coefficient_settings) # [py]

  #######################################################################
  # (%!) not on tudat-space

  - name: tabulated_from_files # [py]
  - name: readTabulatedAerodynamicCoefficientsFromFiles # [cpp]
    short_summary: "Factory function for creating aerodynamic interface model settings from tabulated coefficients from files."
    extended_summary: |
      Factory function for settings object, defining aerodynamic interface model via user-defined, tabulated aerodynamic force and moment coefficients
      (tabulated w.r.t. independent variable), obtained from data files.

    parameters:

      - name: force_coefficient_files # [py]
        type: Dict[int, str] # [py]
        description: Path of the aerodynamic coefficient files corresponding to the force coefficient of the given dict key (0, 1 and 2 a are x-, y- and z-axis of force frame, respectively). # [py]

      - name: moment_coefficient_files # [py]
        type: Dict[int, str] # [py]
        description: Path of the aerodynamic coefficient files corresponding to the moment coefficient of the given dict key (0, 1 and 2 a are x-, y- and z-axis of moment frame, respectively). # [py]

      - name: reference_length # [py]
        type: float # [py]
        description: "Reference length with which aerodynamic moments about x- and z- axes are non-dimensionalized." # [py]

      - name: reference_area # [py]
        type: float # [py]
        description: "Reference area with which aerodynamic forces and moments are non-dimensionalized." # [py]

      - name: independent_variable_names # [py]
        type: list[environment.AerodynamicCoefficientsIndependentVariables] # [py]
        description: Vector with identifiers for the independent variable w.r.t. which the aerodynamic coefficients are defined. # [py]

      - name: force_coefficients_frame # [py]
        type: AerodynamicCoefficientFrames, default = negative_aerodynamic_frame_coefficients # [py]
        description: |
          Variable defining the frame in which the force coefficients are defined. By default, this is the negative aerodynamic
          frame, so that the coefficients are for drag, side force and lift (:math:`C_{D}, C_{S}, C_{L}`)

      - name: moment_coefficients_frame # [py]
        type: AerodynamicCoefficientFrames, default = positive_body_frame_coefficients # [py]
        description: |
          Variable defining the frame in which the moment coefficients are defined. By default, this is the positive body
          frame, so that the coefficients are roll, pitch yaw (:math:`C_{l}, C_{m}, C_{n}`)

      - name: moment_reference_point 
        type: numpy.ndarray[numpy.float64[3, 1]] = np.full([3, 1], np.nan) 
        description: |
          Point w.r.t. aerodynamic moment coefficients are defined. This variable is used to calculate the contribution of the aerodynamic
          force coefficients to the effective moment coefficients. See the ``add_force_contribution_to_moments`` attribute of the 
          :class:`~tudatpy.numerical_simulation.environment_setup.aerodynamic_coefficients.AerodynamicCoefficientSettings` for more details.
          If the present input is set to NaN (as is the default), the reference point is left undefined, and the aerodynamic moments are computed
          without computing any force coefficient contribution to the moment coefficients.

      - name: interpolator_settings # [py]
        type: math.interpolators.InterpolatorSettings, default = None # [py]
        description: |  # [py]
          Interpolator settings object, where the conditions for interpolation of tabulated inputs are saved. # [py]

    returns: # [py]
        type: TabulatedAerodynamicCoefficientSettings  # [py]
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.aerodynamic_coefficients.AerodynamicCoefficientSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.aerodynamic_coefficients.TabulatedAerodynamicCoefficientSettings` class # [py]
    
    examples: | # [py]
      This example is very similar to the one for `tabulated_force_only_from_files`, with the distinction that a pitching moment coefficient is added.

      .. code-block:: python # [py]
        # [py]
        # Define the force coefficient files (leave C_S empty) # [py]
        force_coefficients_files = {0: "input/STS_CD.dat", 2:"input/STS_CL.dat"} # [py]
        # Define the moment coefficient files (leave C_S empty) # [py]
        moment_coefficients_files = {0: "input/STS_CM.dat"} # [py]
        # Setup the aerodynamic coefficients settings tabulated from the files # [py]
        coefficient_settings = environment_setup.aerodynamic_coefficients.tabulated_from_files( # [py]
            force_coefficient_files=force_coefficients_files, # [py]
            moment_coefficient_files=moment_coefficients_files, # [py]
            reference_length=11.9, # [py]
            reference_area=2690.0*0.3048*0.3048, # [py]
            independent_variable_names=[environment.angle_of_attack_dependent, environment.mach_number_dependent] # [py]
        ) # [py]
        # Add the predefined aerodynamic coefficients database to the body # [py]
        environment_setup.add_aerodynamic_coefficient_interface(bodies, "STS", coefficient_settings) # [py]

  #######################################################################
  # (%!) not on tudat-space

  - name: scaled_by_constant # [py]
  - name: scaledAerodynamicCoefficientSettings # [cpp]
    short_summary: "Factory function for creating aerodynamic interface model settings by applying one constant scaling factor/value to all coefficients of an existing model settings object."
    extended_summary: |
      Factory function for settings object, defining aerodynamic interface based on scaling the coefficients of an existing model settings object by one constant factor or value.
      Via the ``is_scaling_absolute`` # [py]
      Via the ``isScalingAbsolute`` # [cpp]
      boolean, the user can apply a constant scaling factor or an absolute value to the resulting force and moment coefficients (for instance for an uncertainty analysis).

    parameters:

      - name: unscaled_coefficient_settings # [py]
        type: AerodynamicCoefficientSettings # [py]
      - name: baseSettings # [cpp]
        type: std::shared_ptr< AerodynamicCoefficientSettings > # [cpp]
        description: "Existing aerodynamic interface model settings object that is used as the base for the scaled settings object."

      - name: force_scaling_constant # [py]
        type: float # [py]
      - name: forceScaling # [cpp]
        type: double # [cpp]
        description: "Constant scaling factor to be applied to all aerodynamic force coefficients."

      - name: moment_scaling_constant # [py]
        type: float # [py]
      - name: momentScaling # [cpp]
        type: double # [cpp]
        description: "Constant scaling factor to be applied to all aerodynamic moment coefficients."

      - name: is_scaling_absolute, default = False # [py]
        type: bool # [py]
      - name: isScalingAbsolute # [cpp]
        type: bool # [cpp]
        description: |
          Boolean indicating whether aerodynamic coefficient scaling is absolute.
          Setting this boolean to true will add the scaling value to the base value,
          instead of the default behaviour of multiplying the base value by the scaling factor.

    returns:
        type: ScaledAerodynamicCoefficientInterfaceSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.aerodynamic_coefficients.AerodynamicCoefficientSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.aerodynamic_coefficients.ScaledAerodynamicCoefficientInterfaceSettings` class

    examples: | # [py]
      In this example, we first set constant aerodynamic coefficients, like in the earlier example. # [py]
      Then, we use the `scaled_by_constant` function to scale the force coefficients by 1.1. # [py]
      Since the `is_scaling_absolute` equals `False` by default, the force coefficients are then increased by 10%. # [py]

      .. code-block:: python # [py]
        # [py]
        # Define the reference area and constant aerodynamic coefficients # [py]
        reference_area = 20.0 # [py]
        drag_coefficient = 1.5 # [py]
        lift_coefficient = 0.3 # [py]
        # Create the aerodynamic interface settings # [py]
        aero_coefficient_settings = environment_setup.aerodynamic_coefficients.constant( # [py]
            reference_area, # [py]
            constant_force_coefficient=[drag_coefficient, 0, lift_coefficient] # [py]
        ) # [py]
        # Define scaled aerodynamic coefficient to increase the force coefficients by 10% # [py]
        scaled_aero_coefficient_settings = environment_setup.aerodynamic_coefficients.scaled_by_constant( # [py]
            unscaled_coefficient_settings=aero_coefficient_settings, # [py]
            force_scaling_constant=1.1, # [py]
            moment_scaling_constant=1.0 # [py]
        ) # [py]
        # Assign aerodynamic interface to the vehicle # [py]
        environment_setup.add_aerodynamic_coefficient_interface(bodies, "Vehicle", scaled_aero_coefficient_settings) # [py]

  #######################################################################
  # (%!) not on tudat-space

  - name: scaled_by_vector # [py]
    short_summary: "Factory function for creating aerodynamic interface model settings by applying constant scaling factors/values to the coefficients of an existing model settings object." # [py]
    extended_summary: | # [py]
      Factory function for settings object, defining aerodynamic interface based on scaling the coefficients of an existing model settings object by constant factors or values.
      Via the ``is_scaling_absolute`` boolean, the user can apply one constant scaling factor or an absolute value to each resulting force and moment coefficient (for instance for an uncertainty analysis).

  - name: scaledAerodynamicCoefficientSettings # [cpp]
    short_summary: "Factory function for creating aerodynamic interface model settings by applying constant scaling factors/values to the coefficients of an existing model settings object." # [cpp]
    extended_summary: "Factory function for settings object, defining aerodynamic interface based on scaling the coefficients of an existing model settings object by constant factors or values. Via the `isScalingAbsolute` boolean, the user can apply one constant scaling factor or an absolute value to each resulting force and moment coefficient (for instance for an uncertainty analysis). This function creates an instance of an `AerodynamicCoefficientSettings` derived `ScaledAerodynamicCoefficientInterfaceSettings` object." # [cpp]

    parameters:

      - name: unscaled_coefficient_settings # [py]
        type: AerodynamicCoefficientSettings # [py]
      - name: baseSettings # [cpp]
        type: std::shared_ptr< AerodynamicCoefficientSettings > # [cpp]
        description: "Existing aerodynamic interface model settings object that is used as the base for the scaled settings object."

      - name: force_scaling_vector # [py]
        type: numpy.ndarray[numpy.float64[3, 1]] # [py]
      - name: forceScaling # [cpp]
        type: Eigen::Vector3d # [cpp]
        description: "Constant scaling factors to be applied to each aerodynamic force coefficient."

      - name: moment_scaling_vector # [py]
        type: numpy.ndarray[numpy.float64[3, 1]] # [py]
      - name: momentScaling # [cpp]
        type: Eigen::Vector3d # [cpp]
        description: "Constant scaling factors to be applied to each aerodynamic moment coefficient."

      - name: is_scaling_absolute, default = False # [py]
        type: bool # [py]
      - name: isScalingAbsolute # [cpp]
        type: bool # [cpp]
        description: |
          Boolean indicating whether aerodynamic coefficient scaling is absolute.
          Setting this boolean to true will add the scaling value to the base value,
          instead of the default behaviour of multiplying the base value by the scaling factor.

    returns:
        type: ScaledAerodynamicCoefficientInterfaceSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.aerodynamic_coefficients.AerodynamicCoefficientSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.aerodynamic_coefficients.ScaledAerodynamicCoefficientInterfaceSettings` class

    examples: | # [py]
      In this example, we first set constant aerodynamic coefficients, like in the earlier example. # [py]
      Then, we use the `scaled_by_vector` function to scale the drag coefficient by 2. # [py]

      .. code-block:: python # [py]
        # [py]
        # Define the reference area and constant aerodynamic coefficients # [py]
        reference_area = 20.0 # [py]
        drag_coefficient = 1.5 # [py]
        lift_coefficient = 0.3 # [py]
        # Create the aerodynamic interface settings # [py]
        aero_coefficient_settings = environment_setup.aerodynamic_coefficients.constant( # [py]
            reference_area, # [py]
            constant_force_coefficient=[drag_coefficient, 0, lift_coefficient] # [py]
        ) # [py]
        # Define scaled aerodynamic coefficient to increase CD by a factor of 2 # [py]
        scaled_aero_coefficient_settings = environment_setup.aerodynamic_coefficients.scaled_by_vector( # [py]
            unscaled_coefficient_settings=aero_coefficient_settings, # [py]
            force_scaling_vector=[2.0, 1.0, 1.0], # [py]
            moment_scaling_vector=[1.0, 1.0, 1.0] # [py]
        ) # [py]
        # Assign aerodynamic interface to the vehicle # [py]
        environment_setup.add_aerodynamic_coefficient_interface(bodies, "Vehicle", scaled_aero_coefficient_settings) # [py]

  #######################################################################
  # (%!) not on tudat-space

  - name: scaled_by_vector_function # [py]
    short_summary: "Factory function for creating aerodynamic interface model settings by applying custom scaling factors/values to the coefficients of an existing model settings object." # [py]
    extended_summary: |  # [py]
      Factory function for settings object, defining aerodynamic interface based on scaling the coefficients of an existing model settings object by custom factors or values.
      Via the ``is_scaling_absolute`` boolean, the user can apply the scaling factors or absolute values to each resulting force and moment coefficient (for instance for an uncertainty analysis).

  - name: scaledAerodynamicCoefficientSettings # [cpp]
      short_summary: "Factory function for creating aerodynamic interface model settings by applying custom scaling factors/values to the coefficients of an existing model settings object." # [cpp]
      extended_summary: "Factory function for settings object, defining aerodynamic interface based on scaling the coefficients of an existing model settings object by custom factors or values. Via the `isScalingAbsolute` boolean, the user can apply the scaling factors or absolute values to each resulting force and moment coefficient (for instance for an uncertainty analysis). This function creates an instance of an `AerodynamicCoefficientSettings` derived `ScaledAerodynamicCoefficientInterfaceSettings` object." # [cpp]

    parameters:

      - name: unscaled_coefficient_settings # [py]
        type: AerodynamicCoefficientSettings # [py]
      - name: baseSettings # [cpp]
        type: std::shared_ptr< AerodynamicCoefficientSettings > # [cpp]
        description: "Existing aerodynamic interface model settings object that is used as the base for the scaled settings object."

      - name: force_scaling_vector_function # [py]
        type: callable[[float], numpy.ndarray[numpy.float64[3, 1]]] # [py]
      - name: forceScaling # [cpp]
        type: std::function< Eigen::Vector3d( const double ) > # [cpp]
        description: "Custom scaling factors to be applied to each aerodynamic force coefficient."

      - name: moment_scaling_vector_function # [py]
        type: callable[[float], numpy.ndarray[numpy.float64[3, 1]]] # [py]
      - name: momentScaling # [cpp]
        type: std::function< Eigen::Vector3d( const double ) > # [cpp]
        description: "Custom scaling factors to be applied to each aerodynamic moment coefficient."

      - name: is_scaling_absolute, default = False # [py]
        type: bool # [py]
      - name: isScalingAbsolute # [cpp]
        type: bool # [cpp]
        description: |
          Boolean indicating whether aerodynamic coefficient scaling is absolute.
          Setting this boolean to true will add the scaling value to the base value,
          instead of the default behaviour of multiplying the base value by the scaling factor.

    returns:
        type: ScaledAerodynamicCoefficientInterfaceSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.aerodynamic_coefficients.AerodynamicCoefficientSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.aerodynamic_coefficients.ScaledAerodynamicCoefficientInterfaceSettings` class

    examples: | # [py]
      In this example, we first set constant aerodynamic coefficients, like in the earlier example. # [py]
      Then, we use the `scaled_by_vector_function` function to scale the drag and lift coefficients according to a function that varies with time. # [py]
      This scaling function essentially adds noise to the CD and CL following as a sin or cos function. # [py]

      .. code-block:: python # [py]
        # [py]
        # Define the reference area and constant aerodynamic coefficients # [py]
        reference_area = 20.0 # [py]
        drag_coefficient = 1.5 # [py]
        lift_coefficient = 0.3 # [py]
        # Create the aerodynamic interface settings # [py]
        aero_coefficient_settings = environment_setup.aerodynamic_coefficients.constant( # [py]
            reference_area, # [py]
            constant_force_coefficient=[drag_coefficient, 0, lift_coefficient] # [py]
        ) # [py]
        # Define the aerodynamic coefficient scaling as a function of time # [py]
        def aero_coefficient_scaling(time): # [py]
            CD_scale = 1 + 0.25*np.sin(time/10) # [py]
            CL_scale = 1 + 0.25*np.cos(time/15) # [py]
            return [CD_scale, 1.0, CL_scale] # [py]
        # Define scaled aerodynamic coefficient to increase CD by a factor of 2 # [py]
        scaled_aero_coefficient_settings = environment_setup.aerodynamic_coefficients.scaled_by_vector_function( # [py]
            unscaled_coefficient_settings=aero_coefficient_settings, # [py]
            force_scaling_vector_function=aero_coefficient_scaling, # [py]
            moment_scaling_vector_function=lambda x: [1.0, 1.0, 1.0] # [py]
        ) # [py]
        # Assign aerodynamic interface to the vehicle # [py]
        environment_setup.add_aerodynamic_coefficient_interface(bodies, "Vehicle", scaled_aero_coefficient_settings) # [py]

  #######################################################################
  
  - name: custom_control_surface # [py]
    short_summary: "Factory function for creating control surface aerodynamic model settings from custom coefficients."
    extended_summary: |
      Factory function for settings object, defining control surface aerodynamic interface model via a custom force and moment coefficient function
      (function of independent variable). This function is essentically the controlp-surface equivalent of the
      :func:`~tudatpy.numerical_simulation.environment_setup.aerodynamic_coefficients.custom_aerodynamic_force_and_moment_coefficients` function for body coefficient settings

    parameters:
      - name: force_and_moment_coefficient_function # [py]
        type: callable[[list[float]], numpy.ndarray[numpy.float64[6, 1]]] # [py]
        description: Function that is defining the aerodynamic force (first three entries) and moment (last three entries) coefficients as function of an independent variables (see  ``independent_variable_names``). # [py]	

      - name: independent_variable_names # [py]
        type: list[environment.AerodynamicCoefficientsIndependentVariables] # [py]
      - name: independentVariableNames # [cpp]
        type: std::vector< aerodynamics::AerodynamicCoefficientsIndependentVariables > # [cpp]
        description: "Vector with identifiers for the independent variable w.r.t. which the control surface aerodynamic coefficients are defined. Typically, one entry from this list will be ``control_surface_deflection_dependent``"

   
          
    returns:
        type: ControlSurfaceIncrementAerodynamicCoefficientSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.aerodynamic_coefficients.ControlSurfaceIncrementAerodynamicCoefficientSettings` derived class 
   
     #######################################################################
  
  - name: tabulated_from_files_control_surface # [py]
    short_summary: "Factory function for creating control surface aerodynamic model settings from tabulated coefficients from files."
    extended_summary: |
      Factory function for settings object, defining control surface aerodynamic interface model via user-defined, tabulated aerodynamic force and moment coefficients
      (tabulated w.r.t. independent variable), obtained from data files.. This function is essentically the controlp-surface equivalent of the
      :func:`~tudatpy.numerical_simulation.environment_setup.aerodynamic_coefficients.tabulated_from_files` function for body coefficient settings

    parameters:

      - name: force_coefficient_files # [py]
        type: Dict[int, str] # [py]
        description: Path of the aerodynamic coefficient files corresponding to the force coefficient of the given dict key (0, 1 and 2 a are x-, y- and z-axis of force frame, respectively). # [py]

      - name: moment_coefficient_files # [py]
        type: Dict[int, str] # [py]
        description: Path of the aerodynamic coefficient files corresponding to the moment coefficient of the given dict key (0, 1 and 2 a are x-, y- and z-axis of moment frame, respectively). # [py]

         

      - name: independent_variable_names # [py]
        type: list[environment.AerodynamicCoefficientsIndependentVariables] # [py]
      - name: independentVariableNames # [cpp]
        type: std::vector< aerodynamics::AerodynamicCoefficientsIndependentVariables > # [cpp]
        description: "Vector with identifiers for the independent variable w.r.t. which the control surface aerodynamic coefficients are defined. Typically, one entry from this list will be ``control_surface_deflection_dependent``"

    parameters:
 
    returns:
        type: ControlSurfaceIncrementAerodynamicCoefficientSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.aerodynamic_coefficients.ControlSurfaceIncrementAerodynamicCoefficientSettings` derived class 
     
  # missing (w.r.t) tudat-space:
  #     - Local Inclination Methods

