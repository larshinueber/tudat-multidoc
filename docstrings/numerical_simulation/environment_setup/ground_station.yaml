#########################################################################
#    ███    ███  ██████  ██████  ██    ██ ██      ███████
#    ████  ████ ██    ██ ██   ██ ██    ██ ██      ██
#    ██ ████ ██ ██    ██ ██   ██ ██    ██ ██      █████
#    ██  ██  ██ ██    ██ ██   ██ ██    ██ ██      ██
#    ██      ██  ██████  ██████   ██████  ███████ ███████
#########################################################################s

extended_summary: |
  This module contains a set of factory functions for setting up ground
  stations and associated models. Note that in Tudat, no distinction is
  made between a ground station/lander on Earth or a different body. 
  A ground station defines a reference point (and other relevant properties)
  on a celestial body. Although ground stations are considered part of the 
  environment in Tudat (as properties of a ``Body`` object), they do not 
  influence the numerical propagation (unless a custom model imposing this 
  is implemented by the user). Ground stations can be defined through the 
  ``BodySettings`` as any other model. But, as the rest of the environment 
  does not depend on them, they can safely be added to a body after it is 
  created. The process is similar to the one described for :ref:`decorate_empty_body`. 
  Specifically, ground station settings are created, and these are then used 
  to create a ground station and add it to the body. The specifics of creating
  ground station settings is described 
  `in the API documentation <https://py.api.tudat.space/en/latest/ground_stations.html>`_. 
  An example is given below:

  .. code-block:: python # [py]

    # Create ground station settings # [py]
    ground_station_settings = environment_setup.ground_station.basic_station( # [py]
        "TrackingStation", # [py]
        [station_altitude, delft_latitude, delft_longitude], # [py]
        element_conversion.geodetic_position_type) # [py]

    # Add the ground station to the environment # [py]
    environment_setup.add_ground_station( # [py]
        bodies.get_body("Earth"), # [py]
        ground_station_settings ) # [py]

  
  where a simple ground station is created (with only a name and a position), with its position defined in geodetic elements. The position of a ground station in a body-fixed frame can have two sources of time-variability:

  * From `shape deformation models <https://py.api.tudat.space/en/latest/shape_deformation.html>`_ of the body on which it is located
  * From a list of :class:`~tudatpy.numerical_simulation.environment_setup.ground_station.GroundStationMotionSettings` objects, which can be assigned to the ground station settings (see e.g. :func:`~tudatpy.numerical_simulation.environment_setup.ground_station.basic_station`). These models define time-variability of individual ground stations, in addition to the global shape deformation.

  To automatically create a list of settings for all DSN stations (which are then typically assigned to the ``ground_station_settings`` of Earth), the :func:`~tudatpy.numerical_simulation.environment_setup.ground_station.dsn_station_settings` can be used.


#########################################################################
#  ███████ ███   ██ ██    ██ ███    ███  ██████
#  ██      ████  ██ ██    ██ ████  ████ █
#  █████   ██ ██ ██ ██    ██ ██ ████ ██  █████
#  ██      ██  ████ ██    ██ ██  ██  ██       █
#  ███████ ██    ██  ██████  ██      ██ ██████
#########################################################################

# no enums


#########################################################################
#   ██████ ██          ██      ██████  ██████ ███████  ██████
#  ██      ██         ████    █       █       ██      █
#  ██      ██        ██  ██    █████   █████  █████    █████
#  ██      ██       ████████        █       █ ██            █
#   ██████ ███████ ██      ██ ██████  ██████  ███████ ██████
#########################################################################

classes:
  # base class:
  #######################################################################

  - name: GroundStationSettings
    short_summary: "Base class for providing settings for the creation of a ground station."

  # base class:
  #######################################################################

  - name: GroundStationMotionSettings
    short_summary: "Base class for providing settings for the motion of a single ground station."
    extended_summary: |
      Non-functional base class for settings for the motion of a single ground station
      Station motion settings requiring additional information must be defined using an object derived from this class.

  # derived classes:
  #######################################################################

  - name: LinearGroundStationMotionSettings
    short_summary: "Class for defining linear motion (in an Earth-fixed frame) in time of a ground station."
    extended_summary: "`GroundStationMotionSettings` derived class for time-linear station motion"

  - name: PiecewiseConstantGroundStationMotionSettings
    short_summary: "Class for defining piecewise-constant position (e.g. instantaneous change in position at given epochs) of a ground station."
    extended_summary: "`GroundStationMotionSettings` derived class for piecewise-constant position of a ground station"

  - name: CustomGroundStationMotionSettings
    short_summary: "Class for defining custom time-dependent motion of a ground station."
    extended_summary: "`CustomGroundStationMotionSettings` derived class for custom time-dependent motion of a ground station"



##############################################################################
#  ███████ ██    ██ ███    ██  ██████ ████████ ██  ██████  ███    ██  ██████
#  ██      ██    ██ ████   ██ ██         ██    ██ ██    ██ ████   ██ █
#  █████   ██    ██ ██ ██  ██ ██         ██    ██ ██    ██ ██ ██  ██  █████
#  ██      ██    ██ ██  ██ ██ ██         ██    ██ ██    ██ ██  ██ ██       █
#  ██       ██████  ██   ████  ██████    ██    ██  ██████  ██   ████ ██████
##############################################################################

functions:
  # factory functions:
  #######################################################################

  - name: basic_station # [py]
    short_summary: "Factory function for creating settings for a ground station"
    extended_summary: |
      Factory function for creating settings for a ground station, defining only its name, body-fixed position, and (optionally) time-variations of its position

    parameters:
      - name: station_name # [py]
        type: string # [py]
        description: "Name (unique identifier) by which the station is to be known."

      - name: station_position_element_type # [py]
        type: PositionElementTypes, default = cartesian_position # [py]
        description: Type of elements for ``station_nominal_position``. Choose between cartesian_position, spherical_position and geodetic_position

      - name: station_nominal_position # [py]
        type: np.ndarray([3,1]) # [py]
        description: Nominal position of the station in a body-fixed frame. Depending on the choice of ``station_position_element_type`` input, this vector must contain
          
          * Cartesian - :math:`[x,y,z]`, denoting :math:`x-`, :math:`y-` and :math:`z-` components of body-fixed position (w.r.t body-fixed frame origin, typically center of mass)
          * Spherical - :math:`[r,\phi',\theta]`, denoting distance from body-fixed frame origin (typically center of mass), latitude and longitude
          * Geodetic - :math:`[h,\phi,\theta]`, denoting the altitude w.r.t. the body shape model, geodetic latitude and longitude

      - name: station_motion_settings # [py]
        type: list[ GroundStationMotionSettings ], default = None # [py]
        description: List of settings defining time-variations of the individual ground station


    returns:
        type: GroundStationSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.shape.GroundStationSettings` defining settings of the to be created ground station

    examples: |
      In this example, we create a station using geodetic coordinates at the approximate location of the city of Delft, and no motion settings:

      .. code-block:: python  # [py]

        # Define the position of the ground station on Earth # [py]
        station_altitude = 0.0 # [py]
        delft_latitude = np.deg2rad(52.00667) # [py]
        delft_longitude = np.deg2rad(4.35556) # [py]
        # [py]
        # Create ground station settings
        ground_station_settings = environment_setup.ground_station.basic_station( # [py]
            "TrackingStation", # [py]
             [station_altitude, delft_latitude, delft_longitude], # [py]
             element_conversion.geodetic_position_type) # [py]
        # [py]
        # Append station settings to existing (default is empty) list # [py]
        		body_settings.get( "Earth" ).ground_station_settings.append( ground_station_settings ) # [py]


  #######################################################################

  - name: dsn_stations # [py]
    short_summary: "Factory function for creating settings for all DSN stations"
    extended_summary: |
      Factory function for creating settings for all DSN stations, defined by nominal positions and linear velocities, as defined
      by Cartesian elements in *DSN No. 810-005, 301, Rev. K*,  see `this link <https://deepspace.jpl.nasa.gov/dsndocs/810-005/301/301K.pdf>`_.
      Note that calling these settings will use the Cartesian elements provided in this document (in ITRF93) and apply them to the Earth-fixed
      station positions, regardless of the selected Earth rotation model.

    parameters:

    returns:
        type: list[ GroundStationMotionSettings ]
        description: 
          List of settings to create DSN stationss

 
  #######################################################################

  - name: linear_station_motion # [py]
    short_summary: "Factory function for creating settings for a linear station motion"
    extended_summary: |
      Factory function for creating settings for a linear station motion, implementing :math:`\Delta \mathbf{r}=\dot{\mathbf{r}}(t-t_{0})`.

    parameters:
      - name: linear_velocity # [py]
        type: np.ndarray([3,1]) # [py]
        description: Linear velocity :math:`\dot{\mathbf{r}}` of the station (in m/s)

      - name: reference_epoch # [py]
        type: float, default = 0.0 # [py]
        description: Reference epoch :math:`t_{0}`, in seconds since J2000 epoch


    returns:
        type: GroundStationMotionSettings
        description: 
          Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.ground_station.GroundStationMotionSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.ground_station.LinearGroundStationMotionSettings` class

  #######################################################################

  - name: piecewise_constant_station_motion # [py]
    short_summary: "Factory function for creating settings for a piecewise constant ground station position variation"
    extended_summary: |
      Factory function for creating settings for a piecewise constant ground station position. Using this model, the added station velocity in a body-fixed frame :math:`\dot{\mathbf{r}}` is
      always zero, but its displacement :math:`\Delta\mathbf{r}` is set according to the input list, which contains a list of times and displacments :math:`[t_{i},\Delta\mathbf{r}_{i}]`. 
      When the resulting model is queried at a given time :math:`t`, the nearest lower neighbour :math:`t_{i}` from this list is found, and the associated :math:`\Delta\mathbf{r}_{i}` is applied.

    parameters:
      - name: displacement_list # [py]
        type: dict[float,np.ndarray([3,1])] # [py]
        description: Dictionary with the epochs :math:`t_{i}` as values, and the associated displacement :math:`\Delta\mathbf{r}_{i}` as value

    returns:
        type: GroundStationMotionSettings
        description: 
          Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.ground_station.GroundStationMotionSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.ground_station.PiecewiseConstantGroundStationMotionSettings` class


  #######################################################################

  - name: custom_station_motion # [py]
    short_summary: "Factory function for creating settings for a custom ground station position variation"
    extended_summary: |
      Factory function for creating settings for a custom ground station position. An arbitrary user-defined function of the signature :math:`\Delta\mathbf{r}=\Delta\mathbf{r}(t)` is provided and
      applied to the station position

    parameters:
      - name: custom_displacement_function # [py]
        type: dict[float,np.ndarray([3,1])] # [py]
        description: Function returning :math:`\Delta\mathbf{r}`, with the time :math:`t` as input.

    returns:
        type: GroundStationMotionSettings
        description: 
          Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.ground_station.GroundStationMotionSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.ground_station.CustomGroundStationMotionSettings` class




  #######################################################################
