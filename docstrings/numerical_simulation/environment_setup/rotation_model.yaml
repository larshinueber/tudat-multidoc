#########################################################################
#    ███    ███  ██████  ██████  ██    ██ ██      ███████
#    ████  ████ ██    ██ ██   ██ ██    ██ ██      ██
#    ██ ████ ██ ██    ██ ██   ██ ██    ██ ██      █████
#    ██  ██  ██ ██    ██ ██   ██ ██    ██ ██      ██
#    ██      ██  ██████  ██████   ██████  ███████ ███████
#########################################################################
# Rotation Model Setup ( createRotationalModel.h )

extended_summary: |
  This module contains a set of factory functions for setting up the
  rotation models of celestial bodies in an environment. Below a short
  overview of aspects of some of the rotation models in order to aid in
  properly selecting an choosing a model.

  Tudat has a broad range of rotation models available. In principle, these models can be assigned to both celestial bodies and natural bodies. 
  However, a subset of these models is typically only applied to natural *or* artificial bodies. Rotation models have a wide range of,
  sometimes indirect, influences on the dynamics
  
  * A spherical harmonic acceleration exerted by a central body is first evaluated in a body-fixed frame, and the transformed to an inertial frame. Consequently, the central body's rotation has a fundamental influence on the exerted spherical harmonic acceleration
  * A `thrust acceleration <https://docs.tudat.space/en/latest/_src_user_guide/state_propagation/propagation_setup/translational/thrust_models.html#thrust-models>`_ in Tudat is calculated from two models: (1) an engine model, which defined the body-fixed direction of the thrust, and the magnitude of the thrust (2) the orientation of the body in space, defined by its rotation model
  * For a non-spherical central body shape models, the current orientation of this central body has an indirect influence on the altitude at which a vehicle with a given *inertial* state is located

  **Rotation and thrust** Two rotation models, which are typically used for vehicles under `thrust <https://docs.tudat.space/en/latest/_src_user_guide/state_propagation/propagation_setup/translational/thrust_models.html#thrust-models>`_, and/or vehicles undergoing `aerodynamic forces <https://docs.tudat.space/en/latest/_src_user_guide/state_propagation/propagation_setup/translational/aerodynamics.html#aerodynamic-models>`_, are the following:

  * The rotation model :func:`~tudatpy.numerical_simulation.environment_setup.rotation_model.aerodynamic_angle_based`, which calculates the body's rotation based on the angle of attack, sideslip angle and bank angle. Note that these angles are definend w.r.t. the relative wind. This model is typical when using, for instance, a re-entry simulation. It imposes these three angles, and calculates the body orientation by combination with the latitude, longitude, heading angle, flight path angles. There is a related model, :func:`~tudatpy.numerical_simulation.environment_setup.rotation_model.zero_pitch_moment_aerodynamic_angle_based`, that uses the same setup, but does not impose the angle of attack, but caculates by imposing aerodynamic pitch trim (zero pitch moment).
  * The rotation model :func:`~tudatpy.numerical_simulation.environment_setup.rotation_model.custom_inertial_direction_based`, which is typical when calculating dynamics of a vehicle under thrust. It is based on linking a body-fixed  direction (now limited to the body-fixed x-axis) to an arbitrary inertial direction. This allows the thrust (assuming that this is aligned with this same body-fixed direction) to be guided in an inertial direction determined by a user-defined model. 

  **Relation to gravity field** When modifying the rotation model settings, the name of the body-fixed frame may also be changed (as is the case for, for instance, the :func:`~tudatpy.numerical_simulation.environment_setup.rotation_model.gcrs_to_itrs`, where the body-fixed frame has the name "ITRS").
  One consequence of this is that you may get an error from the spherical harmonic gravity field, which can no longer find the frame to which it is associated. This can be resolved by (for instance) associating the gravity field to the new frame. For the above example, this would be done by the following:

  .. code-block:: python
                  
      body_settings.get( "Earth" ).gravity_field_settings.associated_reference_frame = "ITRS"
      
  **High-accuracy Earth rotation model** The :func:`~tudatpy.numerical_simulation.environment_setup.rotation_model.gcrs_to_itrs` creates a high accuracy rotation model, following the IERS 2010 Conventions. This includes small variations that are not predicted by models, but are instead measured by geodetic techniques and published as tabulated data by the IERS. If so desired, the exact files used for these corrections may be adapted by the user (see :func:`~tudatpy.astro.earth_orientation.EarthOrientationAnglesCalculator`), which includes specific settings for daily variations in earth rotation angle, which influences the UTC - UT1 time conversion. 

  **Using the rotation model outside the propagation** In various cases, the rotation model object is useful to use independently of the propagation. Details can be found in the API entry for :class:`~tudatpy.numerical_simulation.environment.RotationalEphemeris`, but we provide a short example here as well.

  .. code-block:: python

      bodies = .... // Create system of bodies
      earth_rotation_model = bodies.get('Earth').rotation_model
      earth_rotation_at_epoch = earth_rotation_model.body_fixed_to_inertial_rotation( epoch )

  where the ``epoch`` input is (as always in Tudat) the time in seconds since J2000. The specific rotation model provides the orientation from the :attr:`~tudatpy.numerical_simulation.environment.RotationalEphemeris.inertial_frame_name` to the :attr:`~tudatpy.numerical_simulation.environment.RotationalEphemeris.body_fixed_frame_name` frames. In the above example, the rotation matrix from the body-fixed to the inertial frame is extracted. Other functions are available in the :class:`~tudatpy.numerical_simulation.environment.RotationalEphemeris` to extract the inverse rotation, its time-derivative, and the angular velocity vector of the body-fixed frame. Finally, note that the :func:`~tudatpy.numerical_simulation.environment.transform_to_inertial_orientation`, which uses the rotation model to rotation a body-fixed to an inertial state, may be useful in this context for some applications.

#########################################################################
#  ███████ ███   ██ ██    ██ ███    ███  ██████
#  ██      ████  ██ ██    ██ ████  ████ █
#  █████   ██ ██ ██ ██    ██ ██ ████ ██  █████
#  ██      ██  ████ ██    ██ ██  ██  ██       █
#  ███████ ██    ██  ██████  ██      ██ ██████
#########################################################################

enums:

  #    py::enum_<tss::RotationModelType>
  #        enum tudat::simulation_setup::RotationModelType

  - name: RotationModelType
    short_summary: "Enumeration of rotation model types."
    extended_summary: |
      Enumeration of rotation model types supported by tudat.

    members:
      - name: simple_rotation_model
      - name: spice_rotation_model
      - name: gcrs_to_itrs_rotation_model
      - name: synchronous_rotation_model
      - name: planetary_rotation_model

  #      py::enum_<tba::IAUConventions>
  #          enum tudat::basic_astrodynamics::IAUConventions

  - name: IAUConventions
    short_summary: "Enumeration of IAU conventions for Earth rotation."
    extended_summary: |
      Enumeration of IAU conventions for Earth rotation supported by tudat.

    members:
      - name: iau_2000_a
      - name: iau_2000_b
      - name: iau_2006


#########################################################################
#   ██████ ██          ██      ██████  ██████ ███████  ██████
#  ██      ██         ████    █       █       ██      █
#  ██      ██        ██  ██    █████   █████  █████    █████
#  ██      ██       ████████        █       █ ██            █
#   ██████ ███████ ██      ██ ██████  ██████  ███████ ██████
#########################################################################

classes:
  # base class:
  #######################################################################

  - name: RotationModelSettings
    short_summary: "Base class for providing settings for automatic rotation model creation."
    extended_summary: |
      This class is a functional base class for settings of rotation models that require no information in addition to their type.
      Basic rotation model has constant orientation of the rotation axis (body-fixed z-axis) and constant rotation rate about this axis.
      Rotation models requiring additional information must be created using the factory functions which create the specific object derived from this base class.

    properties: # [py]
      - name: rotation_type # [py]
        type: RotationModelType # [py]
        description: Type of rotation model that is to be created. # [py]
        readonly: True # [py]

      - name: base_frame # [py]
        type: str # [py]
        description: Name of the base frame of rotation model. # [py]

      - name: target_frame # [py]
        type: str # [py]
        description: Name of the target frame of rotation model. # [py]
        readonly: True # [py]

    methods:
      #      - name: __init__ # [py]
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for rotation models should be instantiated through the factory functions of a derived class." # [cpp]

      - name: getRotationType # [cpp]
        short_summary: "Retrieve rotation model type." # [cpp]
        extended_summary: "Function to retrieve the type of rotation model that is to be created through the settings object." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
            type: RotationModelType # [cpp]
            description: Type of rotation model that is to be created. # [cpp]

      - name: getOriginalFrame # [cpp]
        short_summary: "Retrieve base frame." # [cpp]
        extended_summary: "Function to retrieve the base frame of rotation model that is to be created through the settings object." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
            type: std::string # [cpp]
            description: Name of the base frame of rotation model. # [cpp]

      - name: getTargetFrame # [cpp]
        short_summary: "Retrieve target frame." # [cpp]
        extended_summary: "Function to retrieve the target frame of rotation model that is to be created through the settings object." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
            type: std::string # [cpp]
            description: Name of the target frame of rotation model. # [cpp]

      - name: resetOriginalFrame # [cpp]
        short_summary: "Reset base frame." # [cpp]
        extended_summary: "Function to reset the orientation of the base frame." # [cpp]
        parameters: # [cpp]
          - name: originalFrame # [cpp]
            type: std::string # [cpp]
            description: Base frame of rotation model that is to be defined by the settings object. # [cpp]



##############################################################################
#  ███████ ██    ██ ███    ██  ██████ ████████ ██  ██████  ███    ██  ██████
#  ██      ██    ██ ████   ██ ██         ██    ██ ██    ██ ████   ██ █
#  █████   ██    ██ ██ ██  ██ ██         ██    ██ ██    ██ ██ ██  ██  █████
#  ██      ██    ██ ██  ██ ██ ██         ██    ██ ██    ██ ██  ██ ██       █
#  ██       ██████  ██   ████  ██████    ██    ██  ██████  ██   ████ ██████
##############################################################################

functions:
  # factory functions:
  #######################################################################

  - name: simpleRotationModelSettings # [cpp]     # overload cpp
    short_summary: "Factory function for creating simple rotation model settings." # [cpp]
    extended_summary: "Factory function for settings object, defining a basic rotation model with constant orientation of the rotation axis and constant rotation rate about this axis. Rotation from original (inertial) to target (body-fixed) frame at some reference time ``initial_time`` is defined by the ``initial_orientation`` rotation matrix. Rotation about the body-fixed z-axis is defined by the ``rotation_rate`` float variable (in rad/s). This function creates an instance of a `RotationModelSettings` derived `simpleRotationModelSettings` object."  # [cpp]

    parameters: # [cpp]

      - name: originalFrame # [cpp]
        type: std::string # [cpp]
        description: Name of the base frame of rotation model. # [cpp]

      - name: target_frame # [cpp]
        type: std::string # [cpp]
        description: Name of the target frame of rotation model. # [cpp]

      - name: initialOrientation # [cpp]
        type: Eigen::Quaterniond # [cpp]
        description: Orientation of target frame in base frame at initial time. # [cpp]


      - name: initialTime # [cpp]
        type: double # [cpp]
        description: Initial time (reference epoch for rotation matrices). # [cpp]


      - name: rotationRate # [cpp]
        type: double # [cpp]
        description: Constant rotation rate [rad/s] about rotational axis. # [cpp]

    returns: # [cpp]
        type: SimpleRotationModelSettings # [cpp]
        description: Simple rotation model settings object (derived from `RotationModelSettings` base class). # [cpp]

  #######################################################################

  - name: simple # [py]
  - name: simpleRotationModelSettings # [cpp]     # overload 1, cpp only
    short_summary: "Factory function for creating simple rotation model settings."
    extended_summary: |
      Factory function for settings object, defining a basic rotation model with constant orientation of the rotation axis and constant rotation rate about this axis.
      Rotation from original (inertial) to target (body-fixed) frame at some reference time ``initial_time`` (:math:`t_{0}`) is defined by the ``initial_orientation`` (:math:`\mathbf{R}^{(B/I)}(t_{0})`) rotation matrix.
      Rotation about the body-fixed z-axis is defined by the ``rotation_rate`` (:math:`\omega`) float variable (in rad/s). The rotation matrix is computed from:

      .. math::
         \mathbf{R}^{(B/I)}(t)=\mathbf{R}_{z}(\omega(t-t_{0}))(t_{0})\mathbf{R}^{(B/I)}(t_{0})

      where :math:`\mathbf{R}^{(B/I)}` denotes the rotation matrix from inertial to body-fixed frame, and :math:`\mathbf{R}_{z}` denotes a rotaion matrix about the z-axis.

      The matrix :math:`\mathbf{R}^{(B/I)}(t_{0})` is sometimes parameterized by pole right ascension and declination (:math:`\alpha` and :math:`\delta`), as well as the meridian of date :math:`W_{0}` with

      .. math::
         \mathbf{R}^{(B/I)}(t_{0})=\mathbf{R}_{z}(W_{0})\mathbf{R}_{x}(\pi/2-\delta)\mathbf{R}_{z}(\pi/2+\alpha)

    parameters:
      - name: base_frame # [py]
        type: str # [py]
      - name: originalFrame # [cpp]
        type: std::string # [cpp]
        description: Name of the base frame of rotation model.

      - name: target_frame # [py]
        type: str # [py]
      - name: target_frame # [cpp]
        type: std::string # [cpp]
        description: Name of the target frame of rotation model.

      - name: initial_orientation # [py]
        type: numpy.ndarray[numpy.float64[3, 3]] # [py]
      - name: initialOrientation # [cpp]
        type: Eigen::Matrix3d # [cpp]
        description: Orientation of target frame in base frame at initial time.

      - name: initial_time # [py]
        type: float # [py]
      - name: initialTime # [cpp]
        type: double # [cpp]
        description: Initial time (reference epoch for rotation matrices).

      - name: rotation_rate # [py]
        type: float # [py]
      - name: rotationRate # [cpp]
        type: double # [cpp]
        description: Constant rotation rate [rad/s] about rotational axis.

    returns:
        type: SimpleRotationModelSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.rotation_model.RotationModelSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.rotation_model.SimpleRotationModelSettings` class

    examples: |
      In this example, we create :class:`~tudatpy.numerical_simulation.environment_setup.rotation_model.RotationModelSettings` for Earth,
      using a simple rotation model with constant orientation of the rotation axis (body-fixed z-axis), and constant rotation rate about this axis:

      .. code-block:: python # [py]
        # [py]
        # Set parameters describing the rotation between the two frames # [py]
        initial_orientation = np.array([[1, 0, 0], [0, -1, 0], [0, 0, 1]]) # [py]
        initial_time = 12345 # [sec since J2000] # [py]
        rotation_rate = 2e-5 # [rad/s] # [py]
        original_frame = "J2000" # [py]
        target_frame = "Earth_Fixed_Simplified" # [py]
        # Create the rotation model settings and assign to body settings of "Earth" # [py]
        body_settings.get( "Earth" ).rotation_model_settings = environment_setup.rotation_model.simple( # [py]
            original_frame, # [py]
            target_frame, # [py]
            initial_orientation, # [py]
            initial_time, # [py]
            rotation_rate) # [py]

      .. code-block:: cpp # [cpp]
         # [cpp]
         // set parameters describing the rotation between two frames # [cpp]
         Eigen::Quaterniond initialOrientation = ... # [cpp]
         double initialTime = ... # [cpp]
         double rotationRate = ... # [cpp]
         std::string originalFrame = "J2000"; # [cpp]
         std::string targetFrame = "IAU_Earth"; # [cpp]
         // create rotation model settings and assign to body settings of "Earth"  # [cpp]
         bodySettings[ "Earth" ]->rotationModelSettings = std::make_shared< SimpleRotationModelSettings >( # [cpp]
         originalFrame, targetFrame , initialOrientation, initialTime, rotationRate ); # [cpp]


  #######################################################################

  - name: simple_from_spice # [py]
  - name: simpleRotationModelFromSpiceSettings # [cpp]
    short_summary: "Factory function for creating simple rotation model settings using initial orientation and rotation rates from Spice."
    extended_summary: |
      Factory function for settings object, defining a :func:`~tudatpy.numerical_simulation.environment_setup.rotation_model.simple` rotation model with the added functionality that the initial orientation and rotation rate are extracted from Spice, as opposed to provided manually.
      Note that `only` the initial orientation and rotation rate ( at the time defined by ``initial_time`` ) are extracted from Spice - for
      the full Spice rotation model see :func:`~tudatpy.numerical_simulation.environment_setup.rotation_model.spice`.
      Also note the distinction between the ``target_frame`` and ``target_frame_spice`` parameters.

    parameters:
      - name: base_frame # [py]
        type: str # [py]
      - name: originalFrame # [cpp]
        type: std::string # [cpp]
        description: Name of the base frame of rotation model.

      - name: target_frame # [py]
        type: str # [py]
      - name: target_frame # [cpp]
        type: std::string # [cpp]
        description: Target frame of rotation model - name of frame that Tudat assigns to the body-fixed frame

      - name: target_frame_spice # [py]
        type: str # [py]
      - name: targetFrameSpice # [cpp]
        type: std::string # [cpp]
        description: Spice reference of target frame - name of the frame in Spice for which the initial orientation and rotation rate are extracted.

      - name: initial_time # [py]
        type: float # [py]
      - name: initialTime # [cpp]
        type: double # [cpp]
        description: Initial time (reference epoch for rotation matrices).

    returns:
        type: SimpleRotationModelSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.rotation_model.RotationModelSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.rotation_model.SimpleRotationModelSettings` class

    notes: |
      In order to create a :class:`~tudatpy.numerical_simulation.environment_setup.rotation_model.SimpleRotationModelSettings` object which describes a synchronous rotation w.r.t. some ``central_body``,
      we require an ``ephemeris_settings`` attribute to the :class:`~tudatpy.numerical_simulation.environment_setup.BodySettings` object of the ``central_body``.


    examples: |
      In this example, we create :class:`~tudatpy.numerical_simulation.environment_setup.rotation_model.RotationModelSettings` for Earth,
      using a simple rotation model with constant orientation of the rotation axis (body-fixed z-axis), and constant rotation rate about this axis.
      The initial orientation and rotation rate are extracted from Spice at the time defined by ``initial_time``:

      .. code-block:: python # [py]
         # [py]
         # set parameters for time at which initial data is extracted from spice # [py]
         initial_time = 12345 # [py]
         # set parameters for defining the rotation between frames # [py]
         original_frame = "J2000" # [py]
         target_frame = "IAU_Earth_Simplified" # [py]
         target_frame_spice = "IAU_Earth" # [py]
         # create rotation model settings and assign to body settings of "Earth" # [py]
         body_settings.get( "Earth" ).rotation_model_settings = environment_setup.rotation_model.simple_from_spice( # [py]
         original_frame, target_frame, target_frame_spice, initial_time) # [py]

      # [cpp] cpp code snippet unavailable



  #######################################################################

  - name: synchronous # [py]
  - name: synchronousRotationModelSettings # [cpp]
    short_summary: "Factory function for creating synchronous rotational ephemeris settings."
    extended_summary: |
      Factory function for settings object, defining a synchronous rotation model where rotation of a body is defined from its relative orbit w.r.t. some central body. Specifically
      - the body-fixed x-axis is *always* pointing towards the central body
      - the body-fixed z-axis is *always* perpendicular to the orbital plane (along the direction of :math:`\mathbf{x}\times\mathbf{v}` )
      - the body-fixed y-axis completes the right-handed reference frame

      Such a model can be useful for, for instance, approximate rotation of tidally locked natural satellites or nadir-pointing spacecraft.

    parameters:
      - name: central_body_name # [py]
        type: str # [py]
      - name: centralBodyName # [cpp]
        type: std::string # [cpp]
        description: Name of the base frame of rotation model.

      - name: base_frame # [py]
        type: str # [py]
      - name: baseFrameOrientation # [cpp]
        type: std::string # [cpp]
        description: Name of the base frame of rotation model.

      - name: target_frame # [py]
        type: str # [py]
      - name: targetFrameSpice # [cpp]
        type: std::string # [cpp]
        description: Spice reference of target frame.

    returns:
        type: SynchronousRotationModelSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.rotation_model.RotationModelSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.rotation_model.SynchronousRotationModelSettings` class

    examples: |
      In this example, we create :class:`~tudatpy.numerical_simulation.environment_setup.rotation_model.RotationModelSettings` for the martian moon Phobos,
      We do so by assigning a synchronous rotation model to the rotation model settings of Phobos, using in this case ``"ECLIPJ2000"`` as the base frame,
      and ``"Phobos_Fixed"`` as the target frame.

      .. code-block:: python # [py]
         # [py]
         # define parameters describing the synchronous rotation model
         central_body_name = "Mars"
         original_frame = "ECLIPJ2000"
         target_frame = "Phobos_Fixed"
         # create rotation model settings for target frame and assign to body settings of "Phobos" # [py]
         body_settings.get( "Phobos" ).rotation_model_settings = environment_setup.rotation_model.synchronous(
         central_body_name, original_frame, target_frame)

      # [cpp] cpp code snippet unavailable

  #######################################################################

  - name: spice # [py]
  - name: spiceRotationModelSettings # [cpp]
    short_summary: "Factory function for creating rotation model settings from the Spice interface."
    extended_summary: |
      Factory function for settings object, defining a rotation model directly (and entirely) from Spice interface.

    parameters:
      - name: base_frame # [py]
        type: str # [py]
      - name: baseFrame # [cpp]
        type: std::string # [cpp]
        description: Name of the base frame of rotation model.

      - name: target_frame # [py]
        type: str # [py]
      - name: targetFrame # [cpp]
        type: std::string # [cpp]
        description: Name of the target frame of rotation model.
        
      - name: spice_frame_name # [py]
        type: str, default = "" # [py]
        description: Name of the spice reference frame name that will be used to compute the rotation to the target frame. For instance,
          if target_frame is set to "IAU_Earth", and ``spice_frame_name`` is set to "IAU_Mars", Tudat will extract the rotation to the IAU_Mars
          frame from Spice, and assign this rotation to the "IAU_Earth" frame in Tudat. By default, this input is left empty, which
          corresponds to it being equal to teh ``target_frame``.


    returns:
        type: RotationModelSettings
        description: Instance of :class:`~tudatpy.numerical_simulation.environment_setup.rotation_model.RotationModelSettings` class.

    examples: |
      In this example, we create :class:`~tudatpy.numerical_simulation.environment_setup.rotation_model.RotationModelSettings` for Earth,
      using full rotation model data from Spice:

      .. code-block:: python # [py]
         # [py]
         # define parameters describing the rotation between frames # [py]
         original_frame = "J2000" # [py]
         target_frame = "IAU_Earth" # [py]
         # create rotation model settings and assign to body settings of "Earth" # [py]
         body_settings.get( "Earth" ).rotation_model_settings = environment_setup.rotation_model.spice( # [py]
         original_frame, target_frame) # [py]

      .. code-block:: cpp # [cpp]
         # [cpp]
         // define parameters describing the rotation between frames # [cpp]
         std::string originalFrame = "J2000"; # [cpp]
         std::string targetFrame = "IAU_Earth"; # [cpp]
         // create rotation model settings and assign to body settings of "Earth" # [cpp]
         bodySettings[ "Earth" ]->rotationModelSettings = std::make_shared< RotationModelSettings >( spice_rotation_model, # [cpp]
                originalFrame, targetFrame ); # [cpp]


  #######################################################################

  - name: gcrs_to_itrs # [py]
  - name: gcrsToItrsRotationModelSettings # [cpp]
    short_summary: "Factory function for creating high-accuracy Earth rotation model settings."
    extended_summary: |
      Factory function for settings object, defining high-accuracy Earth rotation model according to the IERS 2010 Conventions.
      This settings class has various options to deviate from the default settings, typical applications will use default.
      Note that for this model the original frame must be J2000 or GCRS (in the case of the former, the frame bias between GCRS and J2000 is automatically corrected for). The target frame (e.g. body-fixed frame) name is ITRS.
      The precession-nutation theory may be any member of :class:`~tudatpy.numerical_simulation.environment_setup.rotation_model.IAUConventions` (``iau_2000a`` / ``iau_2000b`` or ``iau_2006``).
      Alternative options to modify the input (not shown here) include the EOP correction file, input time scale, short period UT1 and polar motion variations.
      The target frame (e.g. body-fixed frame) name is ITRS.

    parameters:
      - name: precession_nutation_theory # [py]
        type: IAUConventions, default=tba::iau_2006 # [py]
      - name: nutationTheory # [cpp]
        type: basic_astrodynamics::IAUConventions default=basic_astrodynamics::iau_2006 # [cpp]
        description: Setting theory for modelling Earth nutation.

      - name: base_frame # [py]
        type: str, default='GCRS' # [py]
      - name: baseFrameName # [cpp]
        type: std::string, default='GCRS' # [cpp]
        description: Base frame of rotation model

    returns:
        type: GcrsToItrsRotationModelSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.rotation_model.RotationModelSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.rotation_model.GcrsToItrsRotationModelSettings` class

    examples: |
      In this example, we create :class:`~tudatpy.numerical_simulation.environment_setup.rotation_model.RotationModelSettings` for Earth,
      using a high-accuracy Earth rotation model as defined by IERS 2010 conventions:


      .. code-block:: python # [py]
         # [py]
         # define parameters describing the rotation between frames # [py]
         precession_nutation_theory = environment_setup.rotation_model.IAUConventions.iau_2006 # [py]
         original_frame = "J2000" # [py]
         # create rotation model settings and assign to body settings of "Earth" # [py]
         body_settings.get( "Earth" ).rotation_model_settings = environment_setup.rotation_model.gcrs_to_itrs( # [py]
         precession_nutation_theory, original_frame) # [py]

      .. code-block:: cpp # [cpp]
         # [cpp]
         // define parameters describing the rotation between frames # [cpp]
         IAUConventions precessionNutationTheory = iau_2006; # [cpp]
         std::string originalFrame = "J2000"; # [cpp]
         // create rotation model settings and assign to body settings of "Earth" # [cpp]
         bodySettings[ "Earth" ]->rotationModelSettings = boost::make_shared< GcrsToItrsRotationModelSettings >( # [cpp]
         precessionNutationTheory, originalFrame ); # [cpp]



  #######################################################################

  - name: constantRotationModelSettings # [cpp]
    short_summary: "Factory function for creating simple rotation model settings for target-frames with constant orientation." # [cpp]
    extended_summary: " Factory function for settings object, defining simple rotation model setting objects with constant rotation matrix. These model settings are for target frames which do not have a rotational rate in the base frame and are fully defined by their initial orientation. This function creates an instance of a `RotationModelSettings` derived `SimpleRotationModelSettings` object." # [cpp]

    parameters: # [cpp]

      - name: baseFrame # [cpp]
        type: std::string # [cpp]
        description: Name of the base frame of rotation model. # [cpp]

      - name: targetFrame # [cpp]
        type: std::string # [cpp]
        description: Name of the target frame of rotation model. # [cpp]

      - name: initialOrientation # [cpp]
        type: Eigen::Quaterniond # [cpp]
        description: Orientation of target frame in base frame at initial time (constant throughout). # [cpp]

    returns: # [cpp]
        type: SimpleRotationModelSettings # [cpp]
        description: Simple rotation model settings object (derived from RotationModelSettings base class) with constant orientation of target in base frame. # [cpp]

  #######################################################################

  - name: constant_rotation_model # [py]
  - name: constantRotationModelSettings # [cpp] # overload cpp
    short_summary: "Factory function for creating simple rotation model settings for target-frames with constant orientation."
    extended_summary: |
      Factory function for settings object, defining simple rotation model setting objects with constant rotation matrix.
      These model settings are for target frames which do not have a rotational rate in the base frame and are fully defined by their initial orientation.

    parameters:
      - name: base_frame # [py]
        type: str # [py]
      - name: baseFrame # [cpp]
        type: std::string # [cpp]
        description: Name of the base frame of rotation model.

      - name: target_frame # [py]
        type: str # [py]
      - name: targetFrame # [cpp]
        type: std::string # [cpp]
        description: Name of the target frame of rotation model.

      - name: initial_orientation # [py]
        type: numpy.ndarray[numpy.float64[3, 3]] # [py]
      - name: initialOrientation # [cpp]
        type: Eigen::Matrix3d # [cpp]
        description: Rotation matrix from inertial to body-fixed (base to target) frame at initial time (constant throughout).

    returns:
        type: SimpleRotationModelSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.rotation_model.RotationModelSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.rotation_model.SimpleRotationModelSettings` class.

    examples: |
      In this example, we create :class:`~tudatpy.numerical_simulation.environment_setup.rotation_model.RotationModelSettings` for Earth,
      using a constant rotation matrix between Earth-fixed and inertial frame:

      .. code-block:: python # [py]
        # [py]
        # define parameters describing the constant orientation between frames # [py]
        original_frame = "ECLIPJ2000"  # [py]
        target_frame = "Earth_fixed"  # [py]
        constant_orientation = np.array([[1, 0, 0], [0, -1, 0], [0, 0, 1]])  # [py]
        # create rotation model settings and assign to body settings of "Earth" # [py]
        body_settings.get( "Earth" ).rotation_model_settings = environment_setup.rotation_model.constant( # [py]
            original_frame, # [py]
            target_frame, # [py]
            constant_orientation ) # [py]


      # [cpp] cpp code snippet unavailable




  #######################################################################

  - name: aerodynamic_angle_based # [py]
    short_summary: "Factory function for creating rotation model settings based on custom aerodynamic angles (attack, sideslip, bank)."
    extended_summary: |
      Factory function for creating rotation model settings based on custom aerodynamic angles:
      angle of attack :math:`\alpha`, sideslip angle :math:`\beta` and bank angle :math:`\sigma`. The use of this function is typical for
      simulating the dynamics of a (guided) re-entry vehicle. It calculates the rotation matrix from inertial frame to the body-fixed frame
      of the current body B (typically a vehicle) w.r.t. the body-fixed frame of a central body C (e.g., the body at which the re-entry is taking place.
      The full algorithm for :math:`R^{(I/B)}` is described by Mooij (1994), and is composed of:

      *  The rotation from inertial frame to the body fixed frame of body C, using the existing rotation model of body C
      *  The rotation from body-fixed frame of body C to the vehicle's vertical frame V. This rotation uses the current latitude and longitude angles.
      *  The rotation of the vehicle's vertical frame V to its trajectory frame T. This rotation uses the current heading and flight path angles.
      *  The rotation of the vehicle's trajectory frame T to its aerodynamic frame A. This rotation uses the current bank angle
      *  The rotation of the vehicle's aerodynamic frame A to its body-fixed frame. This rotation uses the current angle of attack and sideslip angles

      In the above algorithm, the latitude, longitude, heading and flight-path angles are computed from the vehicle's current translational state, in the body-fixed
      frame of body C. The angle of attack, sideslip angle and bank angle are to be defined by the user, through a single custom function that is passed to
      the ``angle_function`` argument of this functions


    parameters:
      - name: central_body # [py]
        type: str # [py]
        description: Name of the central body C that is to be used.

      - name: base_frame # [py]
        type: str # [py]
      - name: baseFrame # [cpp]
        type: std::string # [cpp]
        description: Name of the base frame of rotation model.

      - name: target_frame # [py]
        type: str # [py]
      - name: targetFrame # [cpp]
        type: std::string # [cpp]
        description: Name of the target frame of rotation model.

      - name: angle_function # [py]
        type: Callable[[float], numpy.ndarray[numpy.float64[3, 1]]], default = None # [py]
      - name: initialOrientation # [cpp]
        type: Eigen::Matrix3d # [cpp]
        description: Custom function provided by the user, which returns an array of three values as a function of time. The output of this function *must* be ordered as :math:`[\alpha,\beta,\sigma]`. If this input is left empty, these angles are both fixed to 0.

    returns:
        type: CustomRotationModelSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.rotation_model.RotationModelSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.rotation_model.CustomRotationModelSettings` class, which defines the required settings for the rotation model.

  #######################################################################

  - name: zero_pitch_moment_aerodynamic_angle_based # [py]
    short_summary: "Factory function for creating rotation model settings based on an angle of attack calculated from pitch-trim, and custom aerodynamic angles sideslip, bank."
    extended_summary: |
      Factory function for creating rotation model settings based on an angle of attack calculated from pitch-trim, and custom aerodynamic angles sideslip, bank. This function is
      largely identical to the :func:`~aerodynamic_angle_based`, with the difference that the angle of attack :math:`\alpha` is not provided as a custom value by the user, but is
      calculated from the body's aerodynamic moment coefficients, such that we have :math:`C_{m}=0`. This requires aerodynamic moment coefficients to be defined for the vehicle that
      depend on (among others) the body's angle of attack


    parameters:
      - name: central_body # [py]
        type: str # [py]
        description: Name of the central body C that is to be used.

      - name: base_frame # [py]
        type: str # [py]
      - name: baseFrame # [cpp]
        type: std::string # [cpp]
        description: Name of the base frame of rotation model.

      - name: target_frame # [py]
        type: str # [py]
      - name: targetFrame # [cpp]
        type: std::string # [cpp]
        description: Name of the target frame of rotation model.

      - name: angle_funcion # [py]
        type: Callable[[float], numpy.ndarray[numpy.float64[2, 1]]], default = None # [py]
      - name: initialOrientation # [cpp]
        type: Eigen::Matrix3d # [cpp]
        description: Custom function provided by the user, which returns an array of three values as a function of time. The output of this function *must* be ordered as :math:`[\beta,\sigma]`. If this input is left empty, these angles are both fixed to 0.

    returns:
        type: CustomRotationModelSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.rotation_model.RotationModelSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.rotation_model.CustomRotationModelSettings` class, which defines the required settings for the rotation model.

  #######################################################################


  - name: custom_inertial_direction_based # [py]
    short_summary: "Factory function for creating rotation model settings where the body-fixed x-axis is imposed to lie in a user-defined inertial direction"
    extended_summary: |
      Factory function for creating rotation model settings where the body-fixed x-axis is imposed to lie in a user-defined inertial direction :math:`\hat{\mathbf{T}}_{I}`. Specifically, it ensures
      that the rotation matrix from body-fixed to inertial frame is set up such that :math:`\hat{\mathbf{T}}_{I}=R^{(I/B)}\hat{\mathbf{i}}` (where :math:`\mathbf{i}` is the unit-vector in local x-direction).
      The complete rotation matrix requires an additional angle :math:`\phi` (rotation of the body about its body-fixed x-axis), which is set to 0 by default.

      The full rotation matrix is computed from a 3-2-1 Euler angle rotation
      :math:`R^{(I/B)}=R_{z}(\psi)R_{y}(\theta)R_{x}(\phi)`, with :math:`\psi` and :math:`\theta` computed from the suitable decomposition of :math:`\hat{\mathbf{T}}_{I}`.
      This function is typically used for simulating the (guided) dynamics of a spacecraft under thrust, where the thrust is provided in the x-direction of the body-fixed frame. By providing a suitable
      ``inertial_body_axis_direction``, this thrust can be defined to point in an arbitrary direction (typically defined by a guidance algorithm) in the inertial frame as a function of time.

      NOTE: this function may be extended in the future to allow an arbitrary body-fixed direction to align with an arbitrary inertial direction. At present, its functionality is limited to imposing the inertial direction of the body-fixed x-axis.

    parameters:
      - name: inertial_body_axis_direction # [py]
        type: Callable[[float], numpy.ndarray[numpy.float64[3, 1]]] # [py]
        description: Custom function defined by the user, which imposes the inertial orientation of the body-fixed x-axis, by providing :math:`\hat{\mathbf{T}}_{I}(t)`.

      - name: base_frame # [py]
        type: str # [py]
      - name: baseFrame # [cpp]
        type: std::string # [cpp]
        description: Name of the base frame of rotation model.

      - name: target_frame # [py]
        type: str # [py]
      - name: targetFrame # [cpp]
        type: std::string # [cpp]
        description: Name of the target frame of rotation model.

      - name: free_rotation_angle_function # [py]
        type: Callable[[float], float], default = None # [py]
        description: Custom function provided by the user, which returns a value for the free rotation angle :math:`\phi` about the body-fixed x-axis as a function of time. If this input is left empty, this angle is fixed to 0.

    returns:
        type: BodyFixedDirectionBasedRotationSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.rotation_model.RotationModelSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.rotation_model.BodyFixedDirectionBasedRotationSettings` class, which defines the required settings for the rotation model.

  #######################################################################

  - name: orbital_state_direction_based # [py]
    short_summary: "Factory function for creating rotation model settings where the body-fixed x-axis is imposed to lie in the direction of a relative position or velocity vector."
    extended_summary: |
      Factory function for creating rotation model settings where the body-fixed x-axis is imposed to lie in the direction of a relative position or velocity vector. This function is
      similar to the :func:`~custom_inertial_direction_based` function, with the exception that the :math:`\hat{\mathbf{T}}_{I}` vector is not defined by thee user, but is defined by the
      relative position vector :math:`\mathbf{r}_{C}` or velocity vector :math:`\mathbf{r}_{C}` of the vehicle w.r.t. some body C. The inputs to this function allow :math:`\hat{\mathbf{T}}_{I}` to
      be set to :math:`\pm\mathbf{r}_{C}` or :math:`\pm\mathbf{v}_{C}`, for any body C. It is typically used for simplified or preliminary thrust analyses.

    parameters:
      - name: central_body # [py]
        type: str # [py]
        description: Name of central body w.r.t. which the position/velocity vector is to be computed

      - name: is_colinear_with_velocity # [py]
        type: bool # [py]
        description: Boolean defining whether :math:`\hat{\mathbf{T}}_{I}` is to be aligned with velocity (if true) or position (if false)

      - name: direction_is_opposite_to_vector # [py]
        type: bool # [py]
        description: Boolean defining whether :math:`\hat{\mathbf{T}}_{I}` is to be in the same direction as position/velocity (if false), or in the opposite direction (if true).

      - name: base_frame # [py]
        type: str # [py]
      - name: baseFrame # [cpp]
        type: std::string # [cpp]
        description: Name of the base frame of rotation model.

      - name: target_frame # [py]
        type: str # [py]
      - name: targetFrame # [cpp]
        type: std::string # [cpp]
        description: Name of the target frame of rotation model.

      - name: free_rotation_angle_function # [py]
        type: Callable[[float], float], default = None # [py]
        description: Custom function provided by the user, which returns a value for the free rotation angle :math:`\phi` about the body-fixed x-axis as a function of time. If this input is left empty, this angle is fixed to 0.

    returns:
        type: BodyFixedDirectionBasedRotationSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.rotation_model.RotationModelSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.rotation_model.BodyFixedDirectionBasedRotationSettings` class, which defines the required settings for the rotation model.

  #######################################################################

  - name: mars_high_accuracy # [py]
    short_summary: "Factory function for creating a high-accuracy Mars rotation model."
    extended_summary: |
      Factory function for creating a high-accuracy Mars rotation model, using the default parameters of `Konopliv et al. (2016) <https://www.sciencedirect.com/science/article/abs/pii/S0019103516001305>`_
      and the mathematical model of ` Konopliv et al. (2006) <https://www.sciencedirect.com/science/article/pii/S0019103506000297>`_. The rotation matrix formulation is given in Eq. (13)-(19) of that paper.
      Note that, at the moment, all parameters in this rotation model are hard coded, and cannot be adapted by the user (except by estimating a number of its constituent parameters, see :ref:`\`\`parameter\`\`` module )
      As such, this model is at present applicable to Mars rotation only. If you require more fine-grained control of the parameters, please contact the Tudat support team      

    parameters:
      - name: base_frame # [py]
        type: str, default = "ECLIPJ2000" # [py]
      - name: baseFrame # [cpp]
        type: std::string # [cpp]
        description: Name of the base frame of rotation model.

      - name: target_frame # [py]
        type: str, default = "Mars_Fixed" # [py]
      - name: targetFrame # [cpp]
        type: std::string # [cpp]
        description: Name of the target frame of rotation model.

    returns:
        type: RotationModelSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.rotation_model.RotationModelSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.rotation_model.PlanetaryRotationModelSettings` class, which defines the required settings for the rotation model.


  #######################################################################









