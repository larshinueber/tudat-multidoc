#########################################################################
#    ███    ███  ██████  ██████  ██    ██ ██      ███████
#    ████  ████ ██    ██ ██   ██ ██    ██ ██      ██
#    ██ ████ ██ ██    ██ ██   ██ ██    ██ ██      █████
#    ██  ██  ██ ██    ██ ██   ██ ██    ██ ██      ██
#    ██      ██  ██████  ██████   ██████  ███████ ███████
#########################################################################
# Atmosphere Setup ( createAtmosphereModel.h )

extended_summary: |
  This module contains a set of factory functions for setting up the
  atmosphere models of celestial bodies in an environment.


#########################################################################
#  ███████ ███   ██ ██    ██ ███    ███  ██████
#  ██      ████  ██ ██    ██ ████  ████ █
#  █████   ██ ██ ██ ██    ██ ██ ████ ██  █████
#  ██      ██  ████ ██    ██ ██  ██  ██       █
#  ███████ ██    ██  ██████  ██      ██ ██████
#########################################################################

# no enums


#########################################################################
#   ██████ ██          ██      ██████  ██████ ███████  ██████
#  ██      ██         ████    █       █       ██      █
#  ██      ██        ██  ██    █████   █████  █████    █████
#  ██      ██       ████████        █       █ ██            █
#   ██████ ███████ ██      ██ ██████  ██████  ███████ ██████
#########################################################################

classes:
  # base class:
  #######################################################################

  - name: WindModelSettings
    short_summary: "Class for providing settings for wind model."
    extended_summary: |
      Functional (base) class for settings of wind models that require no information in addition to their type.
      Wind model classes requiring additional information must be created using an object derived from this class.

  - name: AtmosphereSettings
    short_summary: "Base class for providing settings for atmosphere model."
    extended_summary: |
      Functional (base) class for settings of atmosphere models that require no information in addition to their type.
      Atmosphere model classes requiring additional information must be created using an object derived from this class.

    properties: # [py]
      - name: wind_settings # [py]
        type: WindModelSettings # [py]
        description: Wind model settings for the atmosphere model settings object. # [py]
        readonly: True # [py]

    methods:
      - name: ctor # [cpp]
        #      - name: __init__ # [py]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for atmosphere models should be instantiated through the factory functions of a derived class." # [cpp]

      - name: setWindSettings # [cpp]
        short_summary: "Set wind settings for the atmosphere model settings object." # [cpp]
        extended_summary: "Function to set wind settings for the atmosphere model settings object." # [cpp]
        parameters: # [cpp]
          - name: windSettings # [cpp]
            type: WindModelSettings # [cpp]

      - name: getWindSettings # [cpp]
        short_summary: "Retrieve wind settings of the atmosphere model settings object." # [cpp]
        extended_summary: "Function to retrieve wind settings of the atmosphere model settings object." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
            type: WindModelSettings # [cpp]
            description: Wind settings of the atmosphere model settings object. # [cpp]


  # derived classes:
  #######################################################################

  - name: ExponentialAtmosphereSettings
    short_summary: "Class for providing settings for exponential atmosphere model."
    extended_summary: "`AtmosphereSettings` derived class for a defining the settings of an exponential atmosphere model."

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of the `ExponentialAtmosphereSettings` class should be created through the `exponential` factory function." # [cpp]



# this class does not have any factory function exposed or even associated w/ it in tudat source.

#  - name: TabulatedAtmosphereSettings
#    short_summary: "Class for using tabulated data as atmosphere model settings."
#    extended_summary: "`AtmosphereSettings` derived class for using tabulated data for defining the settings of an atmosphere model."
#
#    methods:
#      - name: ctor # [cpp]
#        short_summary: "Constructor." # [cpp]
#        extended_summary: "Instances of the `TabulatedAtmosphereSettings` class should be created through the (%!)NONE factory function." # [cpp]


##############################################################################
#  ███████ ██    ██ ███    ██  ██████ ████████ ██  ██████  ███    ██  ██████
#  ██      ██    ██ ████   ██ ██         ██    ██ ██    ██ ████   ██ █
#  █████   ██    ██ ██ ██  ██ ██         ██    ██ ██    ██ ██ ██  ██  █████
#  ██      ██    ██ ██  ██ ██ ██         ██    ██ ██    ██ ██  ██ ██       █
#  ██       ██████  ██   ████  ██████    ██    ██  ██████  ██   ████ ██████
##############################################################################

functions:
  # factory functions:
  #######################################################################
  # WindModelSettings FFs first

  - name: constant_wind_model # [py]
  - name: constantWindModelSettings # [cpp]
    short_summary: "Factory function for creating wind model settings with constant wind velocity."
    extended_summary: |
      Factory function for settings object, defining wind model entirely from constant wind velocity in a given reference frame.

    parameters:
      - name: wind_velocity # [py]
        type: numpy.ndarray[numpy.float64[3, 1]] # [py]
      - name: constantWindVelocity # [cpp]
        type: std::string # [cpp]
        description: |
          Constant wind velocity in the specified reference frame.

      - name: associated_reference_frame # [py]
        type: numerical_simulation.environment.AerodynamicsReferenceFrames, default = AerodynamicsReferenceFrames.vertical_frame # [py]
      - name: associatedFrame # [cpp]
        type: reference_frames::AerodynamicsReferenceFrames, default = reference_frames::vertical_frame # [cpp]
        description: |
          Reference frame in which constant wind velocity is defined.

    returns:
        type: ConstantWindModelSettings  # [py]
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.atmosphere.WindModelSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.atmosphere.ConstantWindModelSettings` class

    examples: |
      In this example, we create :class:`~tudatpy.numerical_simulation.environment_setup.atmosphere.WindModelSettings`,
      using a constant wind-velocity vector defined in a vertical aerodynamic reference frame:

      .. code-block:: python # [py]
        # [py]
        # Define the wind in 3 directions in the vertical reference frame # [py]
        wind_Xv = 3     # Meridional wind of +3 m/s (pointing to the North) # [py]
        wind_Yv = 5     # Zonal wind of +5 m/s (pointing to the West) # [py]
        wind_Zv = -11   # Vertical wind of +11 m/s (pointing out of the centre of the Earth) # [py]
        # Create the constant wind settings # [py]
        constant_wind = environment_setup.atmosphere.constant_wind_model( # [py]
          [wind_Xv, wind_Yv, wind_Zv], # [py]
          environment.AerodynamicsReferenceFrames.vertical_frame) # [py]
        # Apply the constant wind settings to the Earth atmosphere settings # [py]
        body_settings.get("Earth").atmosphere_settings.wind_settings = constant_wind # [py]

  #######################################################################

  - name: custom_wind_model # [py]
  - name: customWindModelSettings # [cpp]
    short_summary: "Factory function for creating wind model settings with custom wind velocity."
    extended_summary: |
      Factory function for settings object, defining wind model entirely from custom wind velocity function in a given reference frame.
      The custom wind velocity has to be given as a function of altitude, longitude, latitude and time.
      
      .. note:: The longitude and latitude will be passed to the function in **degree** and not in radians.
                The altitude is in meters, and the time is a Julian date in seconds since J2000.

    parameters:
      - name: wind_velocity # [py]
        type: callable[[float, float, float, float], numpy.ndarray[numpy.float64[3, 1]]] # [py]
      - name: constantWindVelocity # [cpp]
        type: std::function< Eigen::Vector3d( const double, const double, const double, const double ) > # [cpp]
        description: |
          Custom wind velocity function (w.r.t. altitude, longitude, latitude and time) in the specified reference frame.

      - name: associated_reference_frame # [py]
        type: numerical_simulation.environment.AerodynamicsReferenceFrames, default = AerodynamicsReferenceFrames.vertical_frame # [py]
      - name: associatedFrame # [cpp]
        type: reference_frames::AerodynamicsReferenceFrames, default = reference_frames::vertical_frame # [cpp]
        description: |
          Reference frame in which wind velocity is defined.

    returns:
        type: CustomWindModelSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.atmosphere.WindModelSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.atmosphere.CustomWindModelSettings` class

    examples: |
      In this example, we create :class:`~tudatpy.numerical_simulation.environment_setup.atmosphere.WindModelSettings`,
      using a user-defined wind-velocity function (of altitude, longitude, latitude and time), defined in a vertical aerodynamic reference frame:

      .. code-block:: python # [py]
        # [py]
        # Define the wind in 3 directions in the vertical reference frame # [py]
        def wind_function(h, lon, lat, time): # [py]
            # Meridional wind (pointing North) depends on latitude [deg] and time [sec since J2000] # [py]
            wind_Xv = lat*10/time # [py]
            # Zonal wind (pointing West) only depends on the longitude [deg] # [py]
            wind_Yv = 5/lon # [py]
            # Vertical wind (pointing out of the centre of the Earth) only depends on the altitude [m] # [py]
            wind_Zv = 1000/h # [py]
            # Return the custom wind # [py]
            return [wind_Xv, wind_Yv, wind_Zv] # [py]
        # Create the custom wind settings # [py]
        custom_wind = environment_setup.atmosphere.custom_wind_model( # [py]
            wind_function, # [py]
            environment.AerodynamicsReferenceFrames.vertical_frame) # [py]
        # Apply the custom wind settings to the Earth atmosphere settings # [py]
        body_settings.get("Earth").atmosphere_settings.wind_settings = custom_wind # [py]

    #######################################################################
    # AtmosphereSettings hereafter

  - name: exponential_predefined # [py]
  - name: exponentialAtmosphereSettings # [cpp]
    short_summary: "Factory function for creating atmospheric model settings from pre-defined exponential model."
    extended_summary: |
      Factory function for settings object, defining atmosphere model from pre-defined exponential model.
      The pre-encoded properties are available for Earth and Mars, as can be seen on the table below.
      This function creates an instance of an `AtmosphereSettings` derived `ExponentialAtmosphereSettings` object.

      .. list-table:: Pre-defined exponential atmosphere model properties
        :widths: 25 25 25 25
        :header-rows: 1

        * - Property
          - Earth
          - Mars
          - Units
        * - Scale Height
          - 7.2
          - 11.1
          - km
        * - Density at Zero Altitude
          - 1.225
          - 0.02
          - kg/m :math:`{}^3`
        * - Constant Temperature
          - 246.0
          - 215.0
          - K
        * - Specific Gas Constant
          - 287.0
          - 197.0
          - J/kg/K
        * - Ratio of Specific Heats
          - 1.4
          - 1.3
          - --

    parameters:
      - name: body_name # [py]
        type: str # [py]
      - name: bodyName # [cpp]
        type: std::string # [cpp]
        description: |
          Body for which pre-defined model settings are to be loaded. Available bodies "Earth", "Mars".

    returns:
        type: ExponentialAtmosphereSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.atmosphere.AtmosphereSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.atmosphere.ExponentialAtmosphereSettings` class

    examples: | # [py]
      In this example, we create :class:`~tudatpy.numerical_simulation.environment_setup.atmosphere.AtmosphereSettings` for Mars, # [py]
      using the interface of the predefined exponential model, using pre-encoded values: # [py]

      .. code-block:: python # [py]
         # [py]
         # Create atmosphere settings and add to body settings of "Mars"  # [py]
         body_settings.get("Mars").atmosphere_settings = environment_setup.atmosphere.exponential_predefined("Mars")  # [py]


  #######################################################################

  - name: exponential # [py]
  - name: exponentialAtmosphereSettings # [cpp]
    short_summary: "Factory function for creating atmospheric model settings from fully parametrized exponential model."
    extended_summary: |
      Factory function for settings object, defining exponential atmosphere model.
      The model is solely based on an exponentially decaying density profile with a constant temperature and composition
      (i.e. independent of time, latitude and longitude).

      The user has access to a fully parametrized model, meaning that in addition to the required input parameters ``scale_height`` and ``surface_density`` (ground-level air density),
      the user can specify non-standard values for constant temperature, gas constant and specific heats ratio.

    parameters:

      - name: scale_height # [py]
        type: float # [py]
      - name: densityScaleHeight # [cpp]
        type: double # [cpp]
        description: "Scale height for density profile of atmosphere."

      - name: surface_density # [py]
        type: float # [py]
      - name: densityAtZeroAltitude # [cpp]
        type: double # [cpp]
        description: "Atmospheric density at ground level."

      - name: constant_temperature # [py]
        type: float, default = 288.15 # [py]
      - name: constantTemperature # [cpp]
        type: double, default = 288.15 # [cpp]
        description: "Constant atmospheric temperature."

      - name: specific_gas_constant # [py]
        type: float, default = constants.SPECIFIC_GAS_CONSTANT_AIR # [py]
      - name: specificGasConstant # [cpp]
        type: double, default = physical_constants::SPECIFIC_GAS_CONSTANT_AIR # [cpp]
        description: "Specific gas constant for (constant) atmospheric chemical composition."

      - name: ratio_specific_heats # [py]
        type: float, default = 1.4 # [py]
      - name: ratioOfSpecificHeats # [cpp]
        type: double, default = 1.4  # [cpp]
        description: "Ratio of specific heats for (constant) atmospheric chemical composition."

    returns:
        type: ExponentialAtmosphereSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.atmosphere.AtmosphereSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.atmosphere.ExponentialAtmosphereSettings` class

    examples: |
      In this example, we create :class:`~tudatpy.numerical_simulation.environment_setup.atmosphere.AtmosphereSettings` for Earth,
      using the minimalist interface to the exponential model and taking parameters with classic values for Earth:

      .. code-block:: python # [py]
         # [py]
         # define parameters of an invariant exponential atmosphere model  # [py]
         density_scale_height = 7.2E3  # [py]
         constant_temperature = 290  # [py]
         # create atmosphere settings and add to body settings of "Earth"  # [py]
         body_settings.get( "Earth" ).atmosphere_settings = environment_setup.atmosphere.exponential(  # [py]
         	density_scale_height, density_at_zero_altitude)  # [py]

      .. code-block:: cpp # [cpp]
         # [cpp]
         // define parameters of an invariant exponential atmosphere model # [cpp]
         double densityScaleHeight = 7.2E3; # [cpp]
         double densityAtZeroAltitude = 1.225; # [cpp]
         // create atmosphere settings and add to body settings of body "Earth" # [cpp]
         bodySettings[ "Earth" ]->atmosphereSettings = std::make_shared< ExponentialAtmosphereSettings >( # [cpp]
         densityScaleHeight, densityAtZeroAltitude ); # [cpp]

  #######################################################################

  - name: nrlmsise00 # [py]
  - name: nrlmsise00AtmosphereSettings # [cpp]
    short_summary: "Factory function for creating NRLMSISE-00 atmospheric model settings."
    extended_summary: |
      Factory function for settings object, defining atmosphere model in accordance to the NRLMSISE-00 global reference model for Earth's atmosphere.
    returns:
        type: AtmosphereSettings # [py]
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.atmosphere.AtmosphereSettings` class

    notes: | # [cpp] ( %! assuming it only affects cpp)
      To use this model, the ``USE_NRLMSISE`` flag in your top-level CMakeLists must be set to true. # [cpp]

    parameters:

      - name: space_weather_file # [py]
        type: str, default = :func:`~tudatpy.io.get_space_weather_path` + 'sw19571001.txt' # [py]
        description: File to be used for space weather characteristics as a function of time (e.g. F10.7, Kp, etc.). The file is typically
          taken from here `celestrak <https://celestrak.org/SpaceData/sw19571001.txt>`_ (note that the file in your resources path will not be the latest version
          of this file; download and replace your existing file if required). Documentation on the file is given `here <https://celestrak.org/SpaceData/SpaceWx-format.php>`_

    examples: |
      In this example, we create :class:`~tudatpy.numerical_simulation.environment_setup.atmosphere.AtmosphereSettings` for Earth,
      using the NRLMSISE-00 global reference model:

      .. code-block:: python # [py]
         # [py]
         # create atmosphere settings and add to body settings of body "Earth"
         body_settings.get( "Earth" ).atmosphere_settings = environment_setup.atmosphere.nrlmsise00() # [py]

      .. code-block:: cpp # [cpp]
         # [cpp]
         // create atmosphere settings and add to body settings of body "Earth" # [cpp]
         bodySettings[ "Earth" ]->atmosphereSettings = std::make_shared< AtmosphereSettings >( nrlmsise00 ); # [cpp]

   #######################################################################

  - name: us76 # [py]
    short_summary: "Factory function for creating US76 standard atmosphere model settings."
    extended_summary: |
      Factory function for creating US76 standard atmosphere model settings. The model is defined using tabulated data for density, pressure and temperature,
      from an altitude of -5 km up to 1000 km. Up to 100 km, a data point is provided every 100 m. Above 100 km, a data point is provided every 1 km. The data
      are interpolated using a cubic spline interpolator. Note that this model is specific to Earth's atmosphere.
      
    parameters:
    
    returns:
        type: AtmosphereSettings # [py]
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.atmosphere.AtmosphereSettings` class

    examples: |
      In this example, we create :class:`~tudatpy.numerical_simulation.environment_setup.atmosphere.AtmosphereSettings` for Earth,
      using the US76 standard atmosphere model:

      .. code-block:: python # [py]
         # [py]
         # create atmosphere settings and add to body settings of body "Earth"
         body_settings.get( "Earth" ).atmosphere_settings = environment_setup.atmosphere.us76() # [py]

         
  #######################################################################

  - name: custom_constant_temperature # [py]
  - name: customConstantTemperatureAtmosphereSettings # [cpp]
    short_summary: "Factory function for creating atmospheric model settings from custom density profile."
    extended_summary: |
      Factory function for settings object, defining constant temperature atmosphere model from custom density profile.
      The user is specifying the density profile as a function of altitude.
      The value of pressure is computed by assuming hydrostatic equilibrium, temperature, gas constant and the ratio of specific heats are modelled as constants.

    parameters:

      - name: density_function # [py]
        type: callable[[float], float] # [py]
      - name: densityFunction # [cpp]
        type: std::function< double(const double) > # [cpp]
        description: |
          Function to retrieve the density at the current altitude.

      - name: constant_temperature # [py]
        type: float # [py]
      - name: constantTemperature # [cpp]
        type: double # [cpp]
        description: "Constant atmospheric temperature."

      - name: specific_gas_constant # [py]
        type: float, default = 287.0 # [py]
      - name: specificGasConstant # [cpp]
        type: double, default = physical_constants::SPECIFIC_GAS_CONSTANT_AIR # [cpp]
        description: "Specific gas constant for (constant) atmospheric chemical composition."

      - name: ratio_specific_heats # [py]
        type: float, default = 1.4 # [py]
      - name: ratioOfSpecificHeats # [cpp]
        type: double, default = 1.4  # [cpp]
        description: "Ratio of specific heats for (constant) atmospheric chemical composition."

    returns:
        type: CustomConstantTemperatureAtmosphereSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.atmosphere.AtmosphereSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.atmosphere.CustomConstantTemperatureAtmosphereSettings` class

    examples: |
      In this example, we create :class:`~tudatpy.numerical_simulation.environment_setup.atmosphere.AtmosphereSettings` for Earth,
      with constant temperature and composition, but a density which varies with altitude according to a user-defined model:

      .. code-block:: python # [py]
        # [py]
        # Define the density as a function of altitude [in m] # [py]
        def density_function(h): # [py]
            # Return the density according to a modified exponential model # [py]
            return 1.15 * np.exp(-h/7300) # [py]
        # Define parameters for constant temperature and composition # [py]
        constant_temperature = 250.0 # [py]
        specific_gas_constant = 300.0 # [py]
        ratio_of_specific_heats = 1.4 # [py]
        # Create the custom constant temperature atmosphere settings # [py]
        custom_density_settings = environment_setup.atmosphere.custom_constant_temperature( # [py]
            density_function, # [py]
            constant_temperature, # [py]
            specific_gas_constant, # [py]
            ratio_of_specific_heats) # [py]
        # Add the custom density to the body settings of "Earth" # [py]
        body_settings.get("Earth").atmosphere_settings = custom_density_settings # [py]

      .. code-block:: cpp # [cpp]
         # [cpp]
         // Outside main # [cpp]
         // define variable containing function of density model # [cpp]
         double customDensityFunction( const double altitude ) # [cpp]
         { # [cpp]
           // Return a some density profile as function of altitude # [cpp]

         } # [cpp]
        # [cpp]
         int main( ) # [cpp]
         { # [cpp]
           // ... # [cpp]
        # [cpp]
           // define parameters for constant temperature and composition # [cpp]
           double constantTemperature = 250.0; # [cpp]
           double specificGasConstant = 300.0; # [cpp]
           double ratioOfSpecificHeats = 1.4; # [cpp]
           // create atmosphere settings and add to body settings of body "Earth" # [cpp]
           bodySettings[ "Earth" ]->atmosphereSettings = std::make_shared< CustomConstantTemperatureAtmosphereSettings >( # [cpp]
           &customDensityFunction, constantTemperature, specificGasConstant, ratioOfSpecificHeats ); # [cpp]
        # [cpp]
           // ... # [cpp]
         } # [cpp]

  #######################################################################

  - name: custom_four_dimensional_constant_temperature # [py]
  - name: customConstantTemperatureAtmosphereSettings # [cpp]
    short_summary: "Factory function for creating atmospheric model settings from custom density profile."
    extended_summary: |
      Factory function for settings object, defining constant temperature atmosphere model from custom density profile.
      The user is specifying the density profile as a function of altitude, longitude, latitude and time.
      
      .. note:: The longitude and latitude will be passed to the function in **degree** and not in radians.
                The altitude is in meters, and the time is a Julian date in seconds since J2000.

    parameters:

      - name: density_function # [py]
        type: callable[[float, float, float, float], float] # [py]
      - name: densityFunction # [cpp]
        type: std::function< double( const double, const double, const double, const double ) > # [cpp]
        description: |
          Function to retrieve the density at the current altitude, longitude, latitude and time.

      - name: constant_temperature # [py]
        type: float # [py]
      - name: constantTemperature # [cpp]
        type: double # [cpp]
        description: "Constant atmospheric temperature."

      - name: specific_gas_constant # [py]
        type: float, default = 287.0 # [py]
      - name: specificGasConstant # [cpp]
        type: double, default = physical_constants::SPECIFIC_GAS_CONSTANT_AIR # [cpp]
        description: "Specific gas constant for (constant) atmospheric chemical composition."

      - name: ratio_specific_heats # [py]
        type: float, default = 1.4 # [py]
      - name: ratioOfSpecificHeats # [cpp]
        type: double, default = 1.4  # [cpp]
        description: "Ratio of specific heats for (constant) atmospheric chemical composition."

    returns:
      type: CustomConstantTemperatureAtmosphereSettings
      description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.atmosphere.AtmosphereSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.atmosphere.CustomConstantTemperatureAtmosphereSettings` class

    examples: |
      In this example, we create :class:`~tudatpy.numerical_simulation.environment_setup.atmosphere.AtmosphereSettings` for Earth,
      with constant temperature and composition (gas constant and ratio of specific heats), but a density which varies with altitude, longitude, latitude and time, according to a user-defined model:

      .. code-block:: python # [py]
        # [py]
        # Define the density as a function of altitude [m], longitude [deg], latitude [deg], and time [sec since J2000] # [py]
        def density_function(h, lon, lat, time): # [py]
            # Return the density according to an exponential model that varies with time to add noise with a sine (ignore lon/lat) # [py]
            return (1 + 0.15 * np.sin(time/10)) * np.exp(-h/7300) # [py]
        # Define the parameters for constant temperature and composition # [py]
        constant_temperature = 250.0  # [py]
        specific_gas_constant = 300.0  # [py]
        ratio_of_specific_heats = 1.4  # [py]
        # Create the atmosphere settings and add to body settings of "Earth"  # [py]
        body_settings.get( "Earth" ).atmosphere_settings = environment_setup.atmosphere.custom_constant_temperature( # [py]
            density_function, # [py]
            constant_temperature, # [py]
            specific_gas_constant,  # [py]
            ratio_of_specific_heats ) # [py]

      .. code-block:: cpp # [cpp]
         # [cpp]
         // Outside main # [cpp]
         // define variable containing function of density model # [cpp]
         double customDensityFunction( const double altitude, const double longitude, const double latitude, const double time ) # [cpp]
         { # [cpp]
           // Return a some density profile as function of altitude, longitude, latitude, time # [cpp]
           return 0.5 * altitude + 0.25 * longitude + 0.15 * latitude + 0.1 * time; # [cpp]
         } # [cpp]
        # [cpp]
         int main( ) # [cpp]
         { # [cpp]
           // ... # [cpp]
        # [cpp]
           // define parameters for constant temperature and composition # [cpp]
           double constantTemperature = 250.0; # [cpp]
           double specificGasConstant = 300.0; # [cpp]
           double ratioOfSpecificHeats = 1.4; # [cpp]
           // create atmosphere settings and add to body settings of body "Earth" # [cpp]
           bodySettings[ "Earth" ]->atmosphereSettings = std::make_shared< CustomConstantTemperatureAtmosphereSettings >( # [cpp]
           &customDensityFunction, constantTemperature, specificGasConstant, ratioOfSpecificHeats ); # [cpp]
             # [cpp]
           // ... # [cpp]
         } # [cpp]

  #######################################################################

  - name: scaled_by_constant # [py]
  - name: scaledAtmosphereSettings # [cpp]
    short_summary: "Factory function for creating scaled atmospheric model settings."
    extended_summary: |
      Factory function for settings object, defining atmospheric model based on an scaling of an existing atmospheric settings object.
      The user can apply a scaling factor (or an absolute value) to the air densities of the existing model settings (for instance for an uncertainty analysis).

    parameters:
      - name: unscaled_atmosphere_settings # [py]
        type: AtmosphereSettings # [py]
      - name: baseSettings # [cpp]
        type: std::shared_ptr< AtmosphereSettings > # [cpp]
        description: "Sets base settings of atmosphere model to be scaled."

      - name: density_scaling # [py]
        type: float # [py]
      - name: scaling # [cpp]
        type: double # [cpp]
        description: "Constant scaling factor to be applied to the entire air density profile."

      - name: is_scaling_absolute # [py]
        type: bool, default=false # [py]
      - name: isScalingAbsolute # [cpp]
        type: bool # [cpp]
        description: |
          Boolean indicating whether density scaling is absolute. Setting this boolean to true will add the scaling value to the baseline density, instead of the default behaviour of multiplying the baseline density by the scaling value.

    returns:
      type: ScaledAtmosphereSettings
      description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.atmosphere.AtmosphereSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.atmosphere.ScaledAtmosphereSettings` class.

    notes: |
      At present, the scaled atmosphere model only supports scaling of the density value.
      For cases where the density is used to compute other atmospheric quantities (such as pressure using hydrostatic equilibrium),
      this calculation is performed using the `unscaled` density!

    examples: |
      In this example, we create :class:`~tudatpy.numerical_simulation.environment_setup.atmosphere.AtmosphereSettings` for Earth,
      by modifying an existing :class:`~tudatpy.numerical_simulation.environment_setup.atmosphere.AtmosphereSettings` object such that the resulting air density profile is scaled by a constant:

      .. code-block:: python # [py]
        # [py]
        # define parameter for scaling # [py]
        scaling_constant = 1.5 # [py]
        # define variable containing the existing atmosphere model settings  # [py]
        unscaled_atmosphere_settings = body_settings.get( "Earth" ).atmosphere_settings # [py]
        # create atmosphere settings and add to body settings of "Earth"  # [py]
        body_settings.get( "Earth" ).atmosphere_settings =  environment_setup.atmosphere.scaled_by_constant( # [py]
            unscaled_atmosphere_settings, # [py]
            scaling_constant ) # [py]

      # [cpp] code snippet not available

  #######################################################################

  - name: scaled_by_function # [py]
  - name: scaledAtmosphereSettings # [cpp]
    short_summary: "Factory function for creating scaled atmospheric model settings."
    extended_summary: |
      Factory function for settings object, defining atmospheric model based on scaling an existing atmospheric settings object.
      The user can apply custom scaling factors (or absolute values) to the air densities of the existing model settings (for instance for an uncertainty analysis).

    parameters:
      - name: unscaled_atmosphere_settings # [py]
        type: AtmosphereSettings # [py]
      - name: baseSettings # [cpp]
        type: std::shared_ptr< AtmosphereSettings > # [cpp]
        description: "Sets base settings of atmosphere model to be scaled."

      - name: density_scaling_function # [py]
        type: Callable[[float], float] # [py]
      - name: scaling # [cpp]
        type: std::function< double( const double ) >  # [cpp]
        description: "Specifies air density scaling factor as a function of time."

      - name: is_scaling_absolute # [py]
        type: bool, default=false # [py]
      - name: isScalingAbsolute # [cpp]
        type: bool # [cpp]
        description: |
          Boolean indicating whether density scaling is absolute. Setting this boolean to true will add the scaling value to the baseline density, instead of the default behaviour of multiplying the baseline density by the scaling value.

    returns:
        type: ScaledAtmosphereSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.atmosphere.AtmosphereSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.atmosphere.ScaledAtmosphereSettings` class.

    notes: |
      At present, the scaled atmosphere model only supports scaling of the density value.
      For cases where the density is used to compute other atmospheric quantities (such as pressure using hydrostatic equilibrium),
      this calculation is performed using the `unscaled` density!

    examples: |
      In this example, we create :class:`~tudatpy.numerical_simulation.environment_setup.atmosphere.AtmosphereSettings` for Earth,
      by modifying an existing :class:`~tudatpy.numerical_simulation.environment_setup.atmosphere.AtmosphereSettings` object such, that the resulting air density profile is scaled with a user-defined function of time:

      .. code-block:: python # [py]
        # [py]
        # Define the density scaling as a function of time [sec since J2000] (to add noise with a sine) # [py]
        def scaling_function(time): # [py]
            return 1 + np.sin(time / 50) * 0.25
        # Extract the existing atmosphere model settings # [py]
        unscaled_atmosphere_settings = body_settings.get( "Earth" ).atmosphere_settings # [py]
        # Create the atmosphere settings and add to body settings of "Earth"  # [py]
        body_settings.get( "Earth" ).atmosphere_settings =  environment_setup.atmosphere.scaled_by_function( # [py]
            unscaled_atmosphere_settings, # [py]
            scaling_function ) # [py]



  #######################################################################



