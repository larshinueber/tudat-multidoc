#########################################################################
#    ███    ███  ██████  ██████  ██    ██ ██      ███████
#    ████  ████ ██    ██ ██   ██ ██    ██ ██      ██
#    ██ ████ ██ ██    ██ ██   ██ ██    ██ ██      █████
#    ██  ██  ██ ██    ██ ██   ██ ██    ██ ██      ██
#    ██      ██  ██████  ██████   ██████  ███████ ███████
#########################################################################

extended_summary: |
  This module contains a set of factory functions for setting up the
  gravity field variations of a (spherical harmonic) gravity field.



#########################################################################
#   ██████ ██          ██      ██████  ██████ ███████  ██████
#  ██      ██         ████    █       █       ██      █
#  ██      ██        ██  ██    █████   █████  █████    █████
#  ██      ██       ████████        █       █ ██            █
#   ██████ ███████ ██      ██ ██████  ██████  ███████ ██████
#########################################################################

classes:
  # base class:
  #######################################################################

  - name: GravityFieldVariationSettings
    short_summary: "Base class for providing settings for gravity field variations."

  - name: BasicSolidBodyGravityFieldVariationSettings
    short_summary: "Class for providing settings for solid body tidal gravity field variations, derived from GravityFieldVariationSettings."

##############################################################################
#  ███████ ██    ██ ███    ██  ██████ ████████ ██  ██████  ███    ██  ██████
#  ██      ██    ██ ████   ██ ██         ██    ██ ██    ██ ████   ██ █
#  █████   ██    ██ ██ ██  ██ ██         ██    ██ ██    ██ ██ ██  ██  █████
#  ██      ██    ██ ██  ██ ██ ██         ██    ██ ██    ██ ██  ██ ██       █
#  ██       ██████  ██   ████  ██████    ██    ██  ██████  ██   ████ ██████
##############################################################################

functions:
  # factory functions:
  #######################################################################


  - name: solid_body_tide # [py]    
    short_summary: "Factory function for creating solid body tides."
    extended_summary: |
      Factory function for creating solid body tides, using a single real Love number at a single degree (e.g. :math:`k_{2}`, :math:`k_{3}`, etc.). This function evaluates Eq. (6.6) from the IERS Conventions 2010, with real :math:`k_{l}=k_{lm}`, a single value of :math:`l` and a single tide-raising body :math:`j`.

    parameters:
      - name: tide_raising_body # [py]
        type: str # [py]
        description: "Name of body raising the tide."

      - name: love_number # [py]
        type: float # [py]
        description: "Constant real Love number to use for body undergoing deformation, at the spherical harmonic degree defined by 'degree' input."

      - name: degree # [py]
        type: int # [py]
        description: "Degree of the spherical harmonic gravity field, and associated Love number, that is to be considered."

    returns:
        type: BasicSolidBodyGravityFieldVariationSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.gravity_field_variation.BasicSolidBodyGravityFieldVariationSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.gravity_field_variation.GravityFieldVariationSettings` class

    examples: |
      In this example, we create gravity field variations of Earth for a tide raised by the Moon, with a single Love number :math:`k_{2}` of 0.301, and add it to the list of gravity field variations

      .. code-block:: python # [py]
         # [py]
         tide_raising_body = "Moon" # [py]
         degree = 2 # [py]
         love_number = 0.301 # [py]
         gravity_field_variation_list = list() # [py]
         gravity_field_variation_list.append( environment_setup.gravity_field_variation.solid_body_tide( # [py]
         	tide_raising_body, love_number, degree ) # [py]
         body_settings.get( "Earth" ).gravity_field_variation_settings = gravity_field_variation_list # [py]



  - name: solid_body_tide_complex_k # [py]
    short_summary: "Factory function for creating solid body tides."
    extended_summary: |
      As :func:`~tudatpy.numerical_simulation.environment_setup.gravity_field_variation.solid_body_tide`, but with complex value for the Love number.

    parameters:
      - name: tide_raising_body # [py]
        type: str # [py]
        description: "Name of body raising the tide."

      - name: love_number # [py]
        type: complex # [py]
        description: "Constant real Love number to use for body undergoing deformation, at the spherical harmonic degree defined by 'degree' input."

      - name: degree # [py]
        type: int # [py]
        description: "Degree of the spherical harmonic gravity field, and associated Love number, that is to be considered."

    returns:
        type: BasicSolidBodyGravityFieldVariationSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.gravity_field_variation.BasicSolidBodyGravityFieldVariationSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.gravity_field_variation.GravityFieldVariationSettings` class




  - name: solid_body_tide_degree_variable_k # [py]
    short_summary: "Factory function for creating solid body tides."
    extended_summary: |
      Factory function for creating solid body tides, using a set of real, separate, Love numbers at any number of degrees (e.g. :math:`k_{2}`, :math:`k_{3}`, etc.). This output of this function is effectively identical to a list of outputs to :func:`~tudatpy.numerical_simulation.environment_setup.gravity_field_variation.solid_body_tide`, with differing degrees and associated Love numbers.  This function evaluates Eq. (6.6) from the IERS Conventions 2010, with a set of real values :math:`k_{l}=k_{lm}`, at a set of values of :math:`l` and a single tide-raising body :math:`j`.

    parameters:
      - name: tide_raising_body # [py]
        type: str # [py]
        description: "Name of body raising the tide."

      - name: love_number_per_degree # [py]
        type: dict( int, float ) # [py]
        description: "Dictionary of Love numbers for each degree that is to be taken into account, with the key representing the degree :math:`l` of the Love number, and value containing the Love number :math:`k_{l}` itself"

    returns:
        type: BasicSolidBodyGravityFieldVariationSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.gravity_field_variation.BasicSolidBodyGravityFieldVariationSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.gravity_field_variation.GravityFieldVariationSettings` class

    examples: |
      In this example, we create gravity field variations of Earth for a tide raised by the Moon, with a Love numbers :math:`k_{2}=0.301`, and :math:`k_{3}=0.09`, and add it to the list of gravity field variations

      .. code-block:: python # [py]
         # [py]
         tide_raising_body = "Moon"
         love_numbers = dict( ) # [py]
         love_numbers[ 2 ] = 0.301 # [py]
         love_numbers[ 3 ] = 0.09 # [py]
         gravity_field_variation_list = list() # [py]
         gravity_field_variation_list.append( environment_setup.gravity_field_variation.solid_body_tide_degree_variable_k( # [py]
         	tide_raising_body, love_numbers ) # [py]
         body_settings.get( "Earth" ).gravity_field_variation_settings = gravity_field_variation_list # [py]




  - name: solid_body_tide_degree_variable_complex_k # [py]
    short_summary: "Factory function for creating solid body tides."
    extended_summary: |
      As :func:`~tudatpy.numerical_simulation.environment_setup.gravity_field_variation.solid_body_tide_degree_variable_k`, but with complex values for the Love numbers.

    parameters:
      - name: tide_raising_body # [py]
        type: str # [py]
        description: "Name of body raising the tide."

      - name: love_number_per_degree # [py]
        type: dict( int, complex ) # [py]
        description: "Dictionary of Love numbers for each degree that is to be taken into account, with the key representing the degree :math:`l` of the Love number, and value containing the Love number :math:`k_{l}` itself."


    returns:
        type: BasicSolidBodyGravityFieldVariationSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.gravity_field_variation.BasicSolidBodyGravityFieldVariationSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.gravity_field_variation.GravityFieldVariationSettings` class

    
     


  - name: solid_body_tide_degree_order_variable_k # [py]    
    short_summary: "Factory function for creating solid body tides."
    extended_summary: |
      Factory function for creating solid body tides, using a set of real, separate, Love numbers at any number of degrees and orders (e.g. :math:`k_{20}`, :math:`k_{21}`, :math:`k_{22}`, :math:`k_{30}`, etc.).  This function evaluates Eq. (6.6) from the IERS Conventions 2010, with a set of real values :math:`k_{lm}`, at a set of values of :math:`l` and a single tide-raising body :math:`j`.

    parameters:
      - name: tide_raising_body # [py]
        type: str # [py]
        description: "Name of body raising the tide."

      - name: love_number_per_degree_and_order # [py]
        type: dict( int, list( float ) ) # [py]
        description: "Dictionary of Love numbers for each degree that is to be taken into account, with the key representing the degree :math:`l` of the Love number, and value containing the list of Love numbers :math:`k_{lm}` at this degree. Note that, for Love numbers at degree :math:`l`, the associated list should contain :math:`l+1` entries, representing the Love numbers (in order) :math:`k_{l0}`, :math:`k_{l1}`...:math:`k_{ll}`."


    returns:
        type: BasicSolidBodyGravityFieldVariationSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.gravity_field_variation.BasicSolidBodyGravityFieldVariationSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.gravity_field_variation.GravityFieldVariationSettings` class

    examples: |
      In this example, we create gravity field variations of the Moon, for a tide raised by Earth, with a Love numbers :math:`k_{20}=0.024615`, :math:`k_{21}=0.023915` and :math:`k_{21}=0.024852`, and add it to the list of gravity field variations

      .. code-block:: python # [py]
         # [py]
         tide_raising_body = "Earth"
         love_numbers = dict( ) # [py]
         love_numbers[ 2 ] = list( ) # [py]
         love_numbers[ 2 ].append( 0.024615 ) # [py]
         love_numbers[ 2 ].append( 0	.023915 ) # [py]
         love_numbers[ 2 ].append( 0.024852 ) # [py]
         gravity_field_variation_list = list() # [py]
         gravity_field_variation_list.append( environment_setup.gravity_field_variation.solid_body_tide_degree_order_variable_k( # [py]
         	tide_raising_body, love_numbers ) # [py]
         body_settings.get( "Earth" ).gravity_field_variation_settings = gravity_field_variation_list # [py]




  - name: solid_body_tide_degree_order_variable_complex_k # [py]
    short_summary: "Factory function for creating solid body tides."
    extended_summary: |
      As :func:`~tudatpy.numerical_simulation.environment_setup.gravity_field_variation.solid_body_tide_degree_order_variable_k`, but with complex values for the Love number.

    parameters:
      - name: tide_raising_body # [py]
        type: str # [py]
        description: "Name of body raising the tide."

      - name: love_number_per_degree # [py]
        type: dict( int, list( complex ) ) # [py]
        description: "Dictionary of Love numbers for each degree that is to be taken into account, with the key representing the degree :math:`l` of the Love number, and value containing the list of Love numbers :math:`k_{lm}` at this degree. Note that, for Love numbers at degree :math:`l`, the associated list should contain :math:`l+1` entries, representing the Love numbers (in order) :math:`k_{l0}`, :math:`k_{l1}`...:math:`k_{ll}`."

    returns:
        type: BasicSolidBodyGravityFieldVariationSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.gravity_field_variation.BasicSolidBodyGravityFieldVariationSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.gravity_field_variation.GravityFieldVariationSettings` class

    
     










    
    


