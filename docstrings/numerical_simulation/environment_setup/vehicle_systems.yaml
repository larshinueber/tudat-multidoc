#########################################################################
#    ███    ███  ██████  ██████  ██    ██ ██      ███████
#    ████  ████ ██    ██ ██   ██ ██    ██ ██      ██
#    ██ ████ ██ ██    ██ ██   ██ ██    ██ ██      █████
#    ██  ██  ██ ██    ██ ██   ██ ██    ██ ██      ██
#    ██      ██  ██████  ██████   ██████  ███████ ███████
#########################################################################
# Radiation Pressure Setup ( createBodyShapeModel.h )

extended_summary: |
  This module contains a set of factory functions for setting up physical and system properties of a vehicle.
  For various high-accuracy models of non-conservative spacecraft dynamics, a so-called macromodel is required which defines
  the external shape of the vehicle. This macromodel is typically defined by a set of panels, with each panel assigned
  specific properties of how it interacts with the environment. At present, the spacecraft macromodel in Tudat is only
  used for the calculation of a panelled radiation pressure acceleration, but future updates will also use it for the
  calculation of aerodynamic coefficients in both rarefied and hypersonic flow.

  The current panels in Tudat allow a list of panels to be defined, with the geometrical properties of panel :math:`i` defined by the
  surface normal vector :math:`\hat{\mathbf{n}}_{i}` and the surface area :math:`A_{i}`. Note that, since the panel shape or
  location is not yet defined, computing torques due to surface forces, or incorporating shadowing into the panel
  force calculatuion, is not yet supported.

  The panel surface normal may be defined in either the body-fixed frame :math:`\mathcal{B}` of the vehicle, or to a 'vehicle-part-fixed frame'
  :math:`\mathcal{F}_{j}`. A 'vehicle part' is defined as a part of the vehicle that can move/rotate w.r.t. the body-fixed frame of the
  spacecraft. Typical examples are the solar arrays and an movable antenna.

  The panel surface normal (in either the body frame or the part frame), may be defined by the
  :func:`~tudatpy.numerical_simulation.environment_setup.vehicle_systems.frame_fixed_panel_geometry`,
  :func:`~tudatpy.numerical_simulation.environment_setup.vehicle_systems.time_varying_panel_geometry` or
  :func:`~tudatpy.numerical_simulation.environment_setup.vehicle_systems.body_tracking_panel_geometry` functions,
  where the latter is used to ensure that a panel normal automatically points to/away from another bodY (e.g. the Sun for solar panels).

  A full panel is created by defining its geometry, and models for its interaction with the environment (currently limited to
  a reflection law to compute the influence of radiation pressure) using the
  :func:`~tudatpy.numerical_simulation.environment_setup.vehicle_systems.body_panel_settings` function.

  The vehicle macromodel, and the rotation models from the body-fixed frame to the (optional) part-fixed frames are defined by
  using the :func:`~tudatpy.numerical_simulation.environment_setup.vehicle_systems.full_panelled_body_settings` function, and
  assigned to the ``vehicle_shape_settings`` attribute of the :class:`~tudatpy.numerical_simulation.environment_setup.BodySettings` class.
  When a full macromodel is not available to the user, a 'box-wing' model may also be used, which creates the macromodel
  bassed on user settings, using the :func:`~tudatpy.numerical_simulation.environment_setup.vehicle_systems.box_wing_panelled_body_settings` function.

#########################################################################
#  ███████ ███   ██ ██    ██ ███    ███  ██████
#  ██      ████  ██ ██    ██ ████  ████ █
#  █████   ██ ██ ██ ██    ██ ██ ████ ██  █████
#  ██      ██  ████ ██    ██ ██  ██  ██       █
#  ███████ ██    ██  ██████  ██      ██ ██████
#########################################################################

enums:


#########################################################################
#   ██████ ██          ██      ██████  ██████ ███████  ██████
#  ██      ██         ████    █       █       ██      █
#  ██      ██        ██  ██    █████   █████  █████    █████
#  ██      ██       ████████        █       █ ██            █
#   ██████ ███████ ██      ██ ██████  ██████  ███████ ██████
#########################################################################

classes:
  # base class:
  #######################################################################

  - name: BodyPanelGeometrySettings
    short_summary: "Base class for defining the geometrical properties of a single panel on the vehicle's exterior"

  - name: BodyPanelSettings
    short_summary: "Class for defining the complete properties of a single panel on the vehicle's exterior"

  - name: FullPanelledBodySettings
    short_summary: "Class for providing the complete settings for a panelled body exterior"

  
##############################################################################
#  ███████ ██    ██ ███    ██  ██████ ████████ ██  ██████  ███    ██  ██████
#  ██      ██    ██ ████   ██ ██         ██    ██ ██    ██ ████   ██ █
#  █████   ██    ██ ██ ██  ██ ██         ██    ██ ██    ██ ██ ██  ██  █████
#  ██      ██    ██ ██  ██ ██ ██         ██    ██ ██    ██ ██  ██ ██       █
#  ██       ██████  ██   ████  ██████    ██    ██  ██████  ██   ████ ██████
##############################################################################

functions:
#######################################################################
####################### LUMINOSITY MODELS
#######################################################################

  - name: frame_fixed_panel_geometry # [py]
    short_summary: "Factory function for creating settings for a vehicle exterior panel that is fixed to a given frame."
    extended_summary: |
      Factory function for creating settings for a vehicle exterior panel that is fixed to a given frame, meaning
      that the orientation of the panel is fully defined by the rotation model(s) defined in the vehicle.
      The constant surface normal :math:`\hat{\mathbf{n}}^{\mathcal{F}}` in frame :math:`\mathcal{F}` is provided by the user.      
      If the ``frame_orientation`` of this function is left empty, the panel is fixed to the body-frame, and 
      :math:`\mathcal{F}` is the  body-fixed frame :math:`\mathcal{B}`.

      Alternatively, the ``frame_orientation`` may be defined as the identifier of the frame fixed to one of the
      vehicle parts (solar array, antenna, etc.). See :func:`~full_panelled_body_settings` for the definition
      of rotation models of vehicle parts.

      Note that this panel model does not contain information on panel location or shape, only its area and surface normal,
      and is therefore not suitable for computation of panel shadowing of torque computations.

    parameters:
      - name: surface_normal # [py]
        type: np.array
        description: "Panel outward surface normal vector (in specified frame)"

      - name: area # [py]
        type: float
        description: "Panel surface area"

      - name: frame_orientation # [py]
        type: str, default = ""
        description: "Identifier of the frame to which the panel is fixed (if body-fixed frame, this can be left empty)"
    returns:
        type: BodyPanelGeometrySettings
        description: Object defining settings for panel geometry

  #######################################################################


  - name: time_varying_panel_geometry # [py]
    short_summary: "Factory function for creating settings for a vehicle exterior panel that has time-variable orientation in a given frame."
    extended_summary: |
      As :func:`~frame_fixed_panel_geometry`, but with a time-variable outward surface normal :math:`\hat{\mathbf{n}}^{\mathcal{F}}(t)`

    parameters:
      - name: surface_normal_function # [py]
        type: np.array
        description: "Panel outward surface normal vector (in specified frame)"

      - name: area # [py]
        type: float
        description: "Panel surface area"

      - name: frame_orientation # [py]
        type: str, default = ""
        description: "Identifier of the frame to which the panel is fixed (if body-fixed frame, this can be left empty)"
    returns:
      type: BodyPanelGeometrySettings
      description: Object defining settings for panel geometry

  #######################################################################

  - name: body_tracking_panel_geometry # [py]
    short_summary: "Factory function for creating settings for a vehicle exterior panel where the surface normal tracks a given body."
    extended_summary: |
      Factory function for creating settings for a vehicle exterior panel where the surface normal tracks a given body, for instance
      to define the surface normal of a solar array to always point towards the Sun, or an antenna to always point towards the Earth.
      When using this option, the panel surface normal :math:`\hat{\mathbf{n}}` is computed in an inertial frame based on the tracked
      body, and then (if necessary) rotated to the body-fixed frame. 
      Note that this panel model does not contain information on panel location or shape, only its area and surface normal,
      and is therefore not suitable for computation of panel shadowing of torque computations.

    parameters:
      - name: body_to_track # [py]
        type: str
        description: "Name of the body towards (or away from) which the panel surface normal is to point"

      - name: towards_tracked_body # [py]
        type: bool
        description: "Boolean defining whether the normal vector points towards (if true) or away from (if false) the tracked body"

      - name: area # [py]
        type: float
        description: "Panel surface area"

      - name: frame_orientation # [py]
        type: str, default = ""
        description: "Identifier of the frame in which the panel is defined (with time-variable orientation, defined by tracked body). Note that this option is typically only relevant for internal  book-keeping, and can be left empty"
    returns:
      type: BodyPanelGeometrySettings
      description: Object defining settings for panel geometry

  #######################################################################


  - name: body_panel_settings # [py]
    short_summary: "Factory function for creating settings for a full panel"
    extended_summary: |
      Factory function for creating settings for a full panel (presently only geometry and reflection properties). The panel
      can also be endowed with an identifier to specify the type of the panel. This has no direct consequences for the model,
      but may be useful in estimation, to for instance estimate the reflection properties of all panels specified with identified "MLI"
      as a single parameter

    parameters:
      - name: panel_geometry # [py]
        type: BodyPanelGeometrySettings
        description: "Geometric properties of the panel (size and orientation, at least)"

      - name: panel_reflection_law # [py]
        type: BodyPanelReflectionLawSettings, default = None
        description: "Reflection law settings of the panel (default none)"

      - name: panel_type_id # [py]
        type: str, default = ""
        description: "Optional identifier for panel type"

    returns:
      type: BodyPanelSettings
      description: Object defining settings for a panel

  #######################################################################

  - name: full_panelled_body_settings # [py]
    short_summary: "Factory function for creating settings for a full panelled vehicle exterior"
    extended_summary: |
      Factory function for creating settings for a full panelled vehicle exterior, taking a list of panel settings,
      and (optionally) a list of rotation model settings for vehicle parts. The identifiers for the rotation models
      are used to specify the names of part-fixed frames, which are used by the ``frame_orientation`` inputs to factory
      functions creating settings for :class:`~BodyPanelGeometrySettings`. For instance, assigning a rotation model
      to frame ``LRO_SolarArray`` (dict key for ``part_rotation_model_settings``) allows panels defined in the frame
      with this same frame orientation to be defined. The associated rotation model defines rotations from body-fixed
      frame :math:`\mathcal{B}` to part-fixed frame :math:`\mathcal{F}_{j}` (for part :math:`j`). The rotation from part-fixed
      (where the surface normal is defined) to inertial frame is then computed from 
      :math:`\mathbf{R}^{I/\mathcal{F}_{j}}=\mathbf{R}^{I/\mathcal{B}}\mathbf{R}^{\mathcal{B}/\mathcal{F}_{j}}`, where :math:`\mathbf{R}^{I/\mathcal{B}}` 
      defines the body's orientation, and :math:`\mathbf{R}^{\mathcal{B}/\mathcal{F}_{j}}` the part orientation (w.r.t. a body-fixed frame)

    parameters:
      - name: panel_settings # [py]
        type: list[BodyPanelSettings]
        description: "List of settings for body panels."

      - name: part_rotation_model_settings # [py]
        type: dict[str,RotationModelSettings], default = dict()
        description: "Rotation model settings per vehicle part (default empty, indicating no part-fixed frames are defined)"

    returns:
      type: FullPanelledBodySettings
      description: Object defining full panelled vehicle exterior

  #######################################################################

  - name: box_wing_panelled_body_settings # [py]
    short_summary: "Factory function for creating a simple box-wing spacecraft exterior shape with reflection law settings."
    extended_summary: |
      This function creates a :func:`~full_panelled_body_settings` with ``panel_settings`` generated from simple box-wing 
      settings. The assumptions behind the box-wing model are:
      
      * The spacecraft shape is defined by a rectangular box (cuboid) and solar array
      * The box has its faces parallel to the xy-, xz- and yz-planes
      * The solar array surface normal always points towards the Sun
      * Each box face has identical reflection law settings, defined by :func:`~tudatpy.numerical_simulation.environment_setup.radiation_pressure.specular_diffuse_body_panel_reflection` settings.
      * The solar array has reflection law settings, defined by :func:`~tudatpy.numerical_simulation.environment_setup.radiation_pressure.specular_diffuse_body_panel_reflection` settings.

    parameters:
      - name: length # [py]
        type: float
        description: "Box length (size in body-fixed x-direction)."

      - name: width # [py]
        type: float
        description: "Box width (size in body-fixed y-direction)."

      - name: height # [py]
        type: float
        description: "Box height (size in body-fixed z-direction)."

      - name: solar_array_area # [py]
        type: float
        description: "Surface area of the solar array."

      - name: box_specular_reflectivity # [py]
        type: float
        description: Box secular reflectivity :math:`\rho`.

      - name: box_diffuse_reflectivity # [py]
        type: float
        description: Box secular reflectivity :math:`\delta`.

      - name: solar_array_specular_reflectivity # [py]
        type: float
        description: Solar array secular reflectivity :math:`\rho`.

      - name: solar_array_diffuse_reflectivity # [py]
        type: float
        description: Solar array secular reflectivity :math:`\delta`.

      - name: box_instantaneous_reradiation # [py]
        type: bool
        description: Boolean denoting whether absorbed radiation is instantaneously retransmitted from box (yes, if true).

      - name: solar_array_instantaneous_reradiation # [py]
        type: bool
        description: Boolean denoting whether absorbed radiation is instantaneously retransmitted from solar array (yes, if true).
    returns:
      type: FullPanelledBodySettings
      description: Object defining full panelled vehicle exterior

  #######################################################################
