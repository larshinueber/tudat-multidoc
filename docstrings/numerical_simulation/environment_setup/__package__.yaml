#########################################################################
#    ███    ███  ██████  ██████  ██    ██ ██      ███████
#    ████  ████ ██    ██ ██   ██ ██    ██ ██      ██
#    ██ ████ ██ ██    ██ ██   ██ ██    ██ ██      █████
#    ██  ██  ██ ██    ██ ██   ██ ██    ██ ██      ██
#    ██      ██  ██████  ██████   ██████  ███████ ███████
#########################################################################
# Environment Setup

summary : "Definition of environment settings."

extended_summary: |
  This module contains submodules to define environment settings. It also contains a set of factory functions to use
  environment settings in a simulation by creating natural and artificial body objects.


modules:
  - aerodynamic_coefficients
  - atmosphere
  - ephemeris
  - gravity_field
  - gravity_field_variation
  - ground_station
  - radiation_pressure
  - rigid_body
  - rotation_model
  - shape
  - shape_deformation
  - vehicle_systems

  #########################################################################
  #  ███████ ███   ██ ██    ██ ███    ███  ██████
  #  ██      ████  ██ ██    ██ ████  ████ █
  #  █████   ██ ██ ██ ██    ██ ██ ████ ██  █████
  #  ██      ██  ████ ██    ██ ██  ██  ██       █
  #  ███████ ██    ██  ██████  ██      ██ ██████
  #########################################################################

  # no enums


#########################################################################
#   ██████ ██          ██      ██████  ██████ ███████  ██████
#  ██      ██         ████    █       █       ██      █
#  ██      ██        ██  ██    █████   █████  █████    █████
#  ██      ██       ████████        █       █ ██            █
#   ██████ ███████ ██      ██ ██████  ██████  ███████ ██████
#########################################################################

classes:

  #########################################################################

  - name: BodyListSettings
    short_summary: "Class for defining settings for the creation of a system of bodies."
    extended_summary: |
      Class for defining settings for the creation of a system of bodies. This object is typically created from default settings, and
      then adapted to the user's specific needs.

    properties: # [py]
      - name: frame_origin # [py]
        type: str # [py]
        description: Definition of the global frame origin for the bodies # [py]
        readonly: True # [py]

      - name: frame_orientation # [py]
        type: str # [py]
        description: Definition of the global frame orientation for the bodies # [py]
        readonly: True # [py]


    methods:
      - name: getBody # [cpp]
      - name: get # [py]
        short_summary: "This function extracts a single BodySettings object ."

        parameters:
        - name: bodyName # [cpp]
          type: std::string # [cpp]
        - name: body_name # [py]
          type: str # [py]
          description: |
            Name of the body for which settings are to be retrieved

  #########################################################################

  - name: BodySettings
    short_summary: "Class for defining settings for the creation of a single body."
    extended_summary: |
      Class for defining settings for the creation of a single body, this object is typically stored inside a
      :class:`BodyListSettings`, object.

    properties: # [py]
      - name: constant_mass # [py]
        type: float # [py]
        description: | # [py]
          Mass that gets assigned to the vehicle. This mass does *not* automatically define a gravity field
          model, but is instead used for the calculation of non-conservative forces only. When creating a body with a gravity field,
          leave this entry empty. NOTE: this option is a shorthand for assigning a mass-only
          :func:`~tudatpy.numerical_simulation.environment_setup.rigid_body.constant_rigid_body_properties` to ``mass_property_settings``, and will be deprecated.

      - name: atmosphere_settings # [py]
        type: AtmosphereSettings # [py]
        description: | # [py]
          Object that defines the settings of the atmosphere model that is to be created. Note that wind model settings
          may be defined inside this object. A variable of this type is typically assigned by using a factory function from the
          :ref:`\`\`atmosphere\`\`` module.

      - name: ephemeris_settings # [py]
        type: EphemerisSettings # [py]
        description: | # [py]
          Object that defines the settings of the ephemeris model that is to be created. A variable of this type is typically
          assigned by using a factory function from the :ref:`\`\`ephemeris\`\`` module.

      - name: gravity_field_settings # [py]
        type: GravityFieldSettings # [py]
        description: | # [py]
          Object that defines the settings of the gravity field model that is to be created. A variable of this type is typically
          assigned by using a factory function from the :ref:`\`\`gravity_field\`\`` module.

      - name: rotation_model_settings # [py]
        type: RotationModelSettings # [py]
        description: | # [py]
          Object that defines the settings of the rotation model that is to be created. A variable of this type is typically
          assigned by using a factory function from the :ref:`\`\`rotation_model\`\`` module.

      - name: shape_settings # [py]
        type: BodyShapeSettings # [py]
        description: | # [py]
          Object that defines the settings of the shape model that is to be created. A variable of this type is typically
          assigned by using a factory function from the :ref:`\`\`shape\`\`` module.

      - name: aerodynamic_coefficient_settings # [py]
        type: AerodynamicCoefficientSettings # [py]
        description: | # [py]
          Object that defines the settings of the aerodynamic coefficient model that is to be created. A variable of this type is typically
          assigned by using a factory function from the :ref:`\`\`aerodynamic_coefficients\`\`` module.


      - name: gravity_field_variation_settings # [py]
        type: list[GravityFieldVariationSettings] # [py]
        description: | # [py]
          List of objects that define the settings of time variations of the gravity field variation models that are to be created. Variables in this list are typically
          assigned by using a factory function from the :ref:`\`\`gravity_field_variations\`\`` module.

      - name: shape_deformation_settings # [py]
        type: list[BodyDeformationSettings] # [py]
        description: | # [py]
          List of objects that define the settings of time variations of the exterior shape of natural bodies are to be created. Variables in this list are typically
          assigned by using a factory function from the :ref:`\`\`shape_deformation\`\`` module.


      - name: rigid_body_settings # [py]
        type: RigidBodyPropertiesSettings # [py]
        description: | # [py]
          Object that defines the settings of the body rigid body (mass, center of mass, inertia) properties that are to be created. A variable of this type is typically
          assigned by using a factory function from the :ref:`\`\`rigid_body\`\`` module. Note that this setting does *not* define
          the gravity field, but rather only the mass, center of mass and inertia tensor.

      - name: radiation_pressure_target_settings # [py]
        type: RadiationPressureTargetModelSettings # [py]
        description: | # [py]
          Object that defines the settings of the radiation pressure target model that is to be created. A variable of this type is typically
          assigned by using a factory function from the :ref:`\`\`radiation_pressure\`\`` module. 

      - name: radiation_source_settings # [py]
        type: RadiationSourceModelSettings # [py]
        description: | # [py]
          Object that defines the settings of the radiation source model that is to be created. A variable of this type is typically
          assigned by using a factory function from the :ref:`\`\`radiation_pressure\`\`` module. 

      - name: vehicle_shape_settings # [py]
        type: FullPanelledBodySettings # [py]
        description: | # [py]
          Object that defines the settings of an exterior panelled vehicle shape that is to be created. A variable of this type is typically
          assigned by using a factory function from the :ref:`\`\`vehicle_systems\`\`` module. 

##############################################################################
#  ███████ ██    ██ ███    ██  ██████ ████████ ██  ██████  ███    ██  ██████
#  ██      ██    ██ ████   ██ ██         ██    ██ ██    ██ ████   ██ █
#  █████   ██    ██ ██ ██  ██ ██         ██    ██ ██    ██ ██ ██  ██  █████
#  ██      ██    ██ ██  ██ ██ ██         ██    ██ ██    ██ ██  ██ ██       █
#  ██       ██████  ██   ████  ██████    ██    ██  ██████  ██   ████ ██████
##############################################################################

functions:

  - name: get_default_body_settings # [py]
  - name: getDefaultBodySettings # [cpp]
    short_summary: "Function that retrieves the default settings for the given set of input bodies."
    extended_summary: |
      Function that retrieves the default settings for the given set of input bodies. Default settings are described in
      detail `here <https://docs.tudat.space/en/latest/_src_user_guide/state_propagation/environment_setup/default_env_models.html>`_ .
      Note that if a body is provided as input for which default settings do not exist, an exception is thrown. In addition
      to settings for each separate body, this function returns an object that defines the global frame origin and orientation,
    parameters:
      - name: bodies # [py]
        type: list[str] # [py]
        description: "List of name of bodies for which default settings are to be retrieved and created." # [py]

      - name: base_frame_origin # [py]
        type: str, default = 'SSB' # [py]
        description: "Base frame origin of the set of bodies that is to be created. It defaults to the solar system barycenter (SSB), but it can by any of the bodies in `bodies_to_create` (provided it has an ephemeris defined)." # [py]

      - name: base_frame_orientation # [py]
        type: str, default = 'ECLIPJ2000' # [py]
        description: "Base frame orientation of the set of bodies that is to be created. It can be either ECLIPJ2000 (default) or J2000." # [py]

    returns: # [py]
        type: BodyListSettings  # [py]
        description: Object containing the settings for the SystemOfBodies that are to be created # [py]

  #########################################################################

  - name: get_default_body_settings_time_limited # [py]
  - name: getDefaultBodySettings # [cpp]
    short_summary: "Function that retrieves the default settings for the given set of input bodies, with a limited valid time interval."
    extended_summary: |
      Same as :func:`~tudatpy.numerical_simulation.environment_setup.get_default_body_settings`, but with body settings valid over a limited time interval. This makes the
      the extraction of states from ephemerides more computationally efficient, at the expense of more RAM usage, and a
      constrained time interval over which the ephemerides are valid. See `this page <https://docs.tudat.space/en/latest/_src_user_guide/state_propagation/environment_setup/default_env_models/default_bodies_limited_time_range.html>`_ for more details.

    parameters:
      - name: bodies # [py]
        type: list[str] # [py]
        description: "List of name of bodies for which default settings are to be retrieved and created." # [py]

      - name: initial_time # [py]
        type: float # [py]
        description: "Start time from which the environment settings should be created." # [py]

      - name: final_time # [py]
        type: float # [py]
        description: "End time up to which the environment settings should be created." # [py]

      - name: base_frame_origin # [py]
        type: str # [py]
        description: "Base frame origin of the set of bodies that is to be created." # [py]

      - name: base_frame_orientation # [py]
        type: str # [py]
        description: "Base frame orientation of the set of bodies that is to be created." # [py]

      - name: time_step # [py]
        type: float, default = 300.0 # [py]
        description: "Time step to be used for the tabulated ephemeris." # [py]


    returns: # [py]
        type: BodyListSettings  # [py]
        description: Object containing the settings for the SystemOfBodies that are to be created # [py]

#########################################################################


  - name: get_default_single_body_settings # [py]
    short_summary: "Function that retrieves the default settings for a single body."
    extended_summary: |
      As :func:`~tudatpy.numerical_simulation.environment_setup.get_default_body_settings`, but for retrieving default settings of only a single body
    parameters:
      - name: body_name # [py]
        type: str # [py]
        description: "Name of body for which default settings are to be retrieved and created." # [py]

      - name: base_frame_orientation # [py]
        type: str, default = 'ECLIPJ2000' # [py]
        description: "Base frame orientation of the body settings. It can be either ECLIPJ2000 (default) or J2000." # [py]

    returns: # [py]
        type: BodySettings  # [py]
        description: Object containing the settings for the bodt that is to be created # [py]

#########################################################################


  - name: get_default_single_body_settings_time_limited # [py]
    short_summary: "Function that retrieves the default settings for a single body, with a limited valid time interval."
    extended_summary: |
      As :func:`~tudatpy.numerical_simulation.environment_setup.get_default_body_settings_time_limited`, but for retrieving default settings of only a single body
    parameters:
      - name: body_name # [py]
        type: str # [py]
        description: "Name of body for which default settings are to be retrieved and created." # [py]


      - name: initial_time # [py]
        type: float # [py]
        description: "Start time from which the environment settings should be created." # [py]

      - name: final_time # [py]
        type: float # [py]
        description: "End time up to which the environment settings should be created." # [py]

      - name: base_frame_orientation # [py]
        type: str, default = 'ECLIPJ2000' # [py]
        description: "Base frame orientation of the body settings. It can be either ECLIPJ2000 (default) or J2000." # [py]

      - name: time_step # [py]
        type: float, default = 300.0 # [py]
        description: "Time step to be used for the tabulated ephemeris." # [py]

    returns: # [py]
        type: BodySettings  # [py]
        description: Object containing the settings for the bodt that is to be created # [py]
  
  #########################################################################


  - name: get_default_single_alternate_body_settings # [py]
    short_summary: "Function that retrieves the default settings for a single body, and assigns them to another body."
    extended_summary: |
      As :func:`~tudatpy.numerical_simulation.environment_setup.get_default_body_settings`, but for retrieving default settings of only a single body,
      where the default settings of body with name ``source_body_name`` are retrieved and assigned to a body with name ``body_name``.
      For instance, if ``source_body_name`` is set to "Mars", and ````body_name`` is set to "Earth" body name Earth will be created, with all the properties
      of Mars
      
    parameters:
      - name: body_name # [py]
        type: str # [py]
        description: "Name of body for which default settings are to be created." # [py]

      - name: source_body_name # [py]
        type: str # [py]
        description: "Name of body for which default settings are to be retrieved, and assigned to a body with name ``body_name``." # [py]

      - name: base_frame_orientation # [py]
        type: str, default = 'ECLIPJ2000' # [py]
        description: "Base frame orientation of the body settings. It can be either ECLIPJ2000 (default) or J2000." # [py]

    returns: # [py]
        type: BodySettings  # [py]
        description: Object containing the settings for the bodt that is to be created # [py]

#########################################################################


  - name: get_default_single_body_settings_time_limited # [py]
    short_summary: "Function that retrieves the default settings for a single body, with a limited valid time interval."
    extended_summary: |
      As :func:`~tudatpy.numerical_simulation.environment_setup.get_default_body_settings_time_limited`, but for retrieving default settings of only a single body,
      where the default settings of body with name ``source_body_name`` are retrieved and assigned to a body with name ``body_name``.
      For instance, if ``source_body_name`` is set to "Mars", and ````body_name`` is set to "Earth" body name Earth will be created, with all the properties
      of Mars
      
    parameters:
      - name: body_name # [py]
        type: str # [py]
        description: "Name of body for which default settings are to be retrieved." # [py]

      - name: source_body_name # [py]
        type: str # [py]
        description: "Name of body for which default settings are to be retrieved, and assigned to a body with name ``body_name``." # [py]


      - name: initial_time # [py]
        type: float # [py]
        description: "Start time from which the environment settings should be created." # [py]

      - name: final_time # [py]
        type: float # [py]
        description: "End time up to which the environment settings should be created." # [py]

      - name: base_frame_orientation # [py]
        type: str, default = 'ECLIPJ2000' # [py]
        description: "Base frame orientation of the body settings. It can be either ECLIPJ2000 (default) or J2000." # [py]

      - name: time_step # [py]
        type: float, default = 300.0 # [py]
        description: "Time step to be used for the tabulated ephemeris." # [py]

    returns: # [py]
        type: BodySettings  # [py]
        description: Object containing the settings for the bodt that is to be created # [py]      
  #########################################################################
  
  - name: add_aerodynamic_coefficient_interface # [py]
    short_summary: "Function that creates an aerodynamic coefficient interface from settings, and adds it to an existing body."
    extended_summary: |
      This function can be used to add an aerodynamic coefficient interface to an existing body. It requires
      settings for the aerodynamic coefficients, created using one of the factory functions from the `~tudatpy.numerical_simulation_environment_setup.aerodynamic_coefficient` module.
      This function creates the actual coefficient interface from these settings, and assigns it to the
      selected body. In addition to the identifier for the body to which it is assigned, this function
      requires the full :class:`~tudatpy.numerical_simulation.environment.SystemOfBodies` as input, to facilitate
      inter-body dependencies in the coefficient interface

    parameters:
      - name: bodies # [py]
        type: SystemOfBodies # [py]
        description: "Object defining the physical environment, with all properties of artificial and natural bodies." # [py]

      - name: body_name # [py]
        type: str # [py]
        description: "Name of the body to which the aerodynamic coefficients are to be assigned" # [py]

      - name: coefficient_settings # [py]
        type: AerodynamicCoefficientSettings # [py]
        description: "Settings defining the coefficient interface that is to be created." # [py]


  - name: create_system_of_bodies # [py]
    short_summary: "Function that creates a System of bodies from associated settings."
    extended_summary: |
      Function that creates a System of bodies from associated settings. This function creates the separate :class:`~tudatpy.numerical_simulation.Body`
      objects and stores them in a :class:`~tudatpy.numerical_simulation.environment.SystemOfBodies` object. This object represents the full
      physical environment in the simulation.

    parameters:
      - name: body_settings # [py]
        type: BodyListSettings # [py]
        description: "Object defining the physical environment, with all properties of artificial and natural bodies." # [py]

    returns: # [py]
        type: :class:`~tudatpy.numerical_simulation.environment.SystemOfBodies`  # [py]
        description: Object containing the objects for bodies and environment models constituting the physical environment # [py]

  - name: create_simplified_system_of_bodies # [py]
    short_summary: "Function that creates a simplified System of bodies." # [py]
    extended_summary: | # [py]
      Function that creates a simplified system of bodies. The following bodies are created in this system: the Sun, all planets of the Solar system, and Pluto. # [py]
      All bodies in this system use Gtop ephemerides and point mass gravity. The Earth is setup with a spherical shape model and a simple rotation model. # [py]
      The reference frame used to setup this simplified system of bodies has its origin at the SSB, and has an ECLIPJ2000 orientation.

    parameters: # [py]
      - name: initial_time # [py]
        type: float, optional, default=0 # [py]
        description: "Initial system time in seconds since J2000." # [py]

    returns: # [py]
        type: :class:`~tudatpy.numerical_simulation.environment.SystemOfBodies`  # [py]
        description: Object containing the objects for bodies and environment models constituting the physical environment # [py]


  - name: add_radiation_pressure_interface # [py]
    short_summary: "Function that creates an radiation pressure interface from settings, and adds it to an existing body."
    extended_summary: |
      This function can be used to add an radiation pressure interface to an existing body. It requires
      settings for the radiation pressure interface, created using one of the factory functions from the :ref:`\`\`radiation_pressure\`\`` module.
      This function creates the actual coefficient interface from these settings, and assigns it to the
      selected body. In addition to the identifier for the body to which it is assigned, this function
      requires the full :class:`~tudatpy.numerical_simulation.environment.SystemOfBodies` as input, to facilitate
      inter-body dependencies in the radiation pressure interface

    parameters:
      - name: bodies # [py]
        type: SystemOfBodies # [py]
        description: "Object defining the physical environment, with all properties of artificial and natural bodies." # [py]

      - name: body_name # [py]
        type: str # [py]
        description: "Name of the body to which the radiation pressure interface is to be assigned" # [py]

      - name: radiation_pressure_settings # [py]
        type: RadiationPressureInterfaceSettings # [py]
        description: "Settings defining the radiation pressure interface that is to be created." # [py]

  - name: add_flight_conditions # [py]
    short_summary: "Function that creates a flight conditions, and adds it to an existing body."
    extended_summary: |
      This function can be used to add  a :class:`~tudatpy.numerical_simulation.environment.FlightConditions` object to an existing body.
      Typically, the ``FlightConditions`` are created automatically when they are required (for the calulcation of an
      aerodynamic acceleration, or the saving of certain dependent variables). However, in some cases it may be useful
      to manually trigger their creation, which is done through this function. If the ``central_body_name`` input
      denotes a body that is endowed with an :class:`~tudatpy.numerical_simulation.environment.AtmosphereModel`, this function
      automically creates an :class:`~tudatpy.numerical_simulation.environment.AtmosphericFlightConditions` object (capable of
      calculating density, speed of sound, etc.), instead of the more basic :class:`~tudatpy.numerical_simulation.environment.FlightConditions`
      (which is limited to properties such as altitude, latitude, etc.)

    parameters:
      - name: bodies # [py]
        type: SystemOfBodies # [py]
        description: "Object defining the physical environment, with all properties of artificial and natural bodies." # [py]

      - name: body_name # [py]
        type: str # [py]
        description: "Name of the body for which the flight conditions are to be created" # [py]

      - name: central_body_name # [py]
        type: str # [py]
        description: "Name of the cenral body w.r.t. which the flight conditions are to be created (typically, but not necesarilly, the central body of propagation)/" # [py]

  - name: add_rotation_model # [py]
    short_summary: "Function that creates a rotation model, and adds it to an existing body."
    extended_summary: |
      This function can be used to add  a :class:`~tudatpy.numerical_simulation.environment.RotationalEphemeris` object to an existing body.
      Typically, the ``RotationalEphemeris`` is created along with the `~tudatpy.numerical_simulation.environment.Body` itself However, in some cases it may be useful
      to create a rotation model after the Body objects have been created. This function requires
      settings for the rotation model, created using one of the factory functions from the :ref:`~tudatpy.numerical_simulation_environment_setup.rotation_model` module.
      This function creates the actual coefficient interface from these settings, and assigns it to the
      selected body. In addition to the identifier for the body to which it is assigned, this function
      requires the full :class:`~tudatpy.numerical_simulation.environment.SystemOfBodies` as input, to facilitate
      inter-body dependencies in the radiation model

    parameters:
      - name: bodies # [py]
        type: SystemOfBodies # [py]
        description: "Object defining the physical environment, with all properties of artificial and natural bodies." # [py]

      - name: body_name # [py]
        type: str # [py]
        description: "Name of the body to which the rotation model is to be assigned" # [py]

      - name: rotation_model_settings # [py]
        description: "Settings defining the rotation model that is to be created." # [py]

  - name: add_mass_properties_model # [py]
    short_summary: "Function that creates a body mass property model, and adds it to an existing body."
    extended_summary: |
      This function can be used to add  a :class:`~tudatpy.numerical_simulation.environment.BodyMassProperties` object to an existing body.
      Typically, the ``BodyMassProperties`` is created along with the `~tudatpy.numerical_simulation.environment.Body` itself However, in some cases it may be useful
      to create body mass properties after the Body objects have been created. This function requires
      settings for the body mass properties, created using one of the factory functions from the :ref:`~tudatpy.numerical_simulation_environment_setup.AAAA` module.
      This function creates the actual body mass properties from these settings, and assigns it to the
      selected body.

    parameters:
      - name: bodies # [py]
        type: SystemOfBodies # [py]
        description: "Object defining the physical environment, with all properties of artificial and natural bodies." # [py]

      - name: body_name # [py]
        type: str # [py]
        description: "Name of the body to which the model is to be assigned" # [py]

      - name: mass_property_settings # [py]
        description: "Settings defining the mass properties model that is to be created." # [py]


  - name: add_engine_model # [py]
    short_summary: "Function that creates an engine model (to be used for thrust calculations), and adds it to an existing body."
    extended_summary: |
      Function that creates an engine model (to be used for thrust calculations), and adds it to an existing body. It creates and
      object of class :class:`~tudatpy.numerical_simulation.environment.EngineModel`, and adds it to an existing body. Properties
      assigned to this engine model are:
      * The (constant) direction in body-fixed frame in which the engine is pointing (e.g. the body-fixed thrust direction when the engine is on)
      * Settings for computing the thrust magnitude (as a function of time and/or other parameters), using a suitable function from the :ref:`\`\`thrust\`\`` submodule


    parameters:

      - name: body_name # [py]
        type: str # [py]
        description: Name of the body to which the engine is to be added.

      - name: engine_name # [py]
        type: str # [py]
        description: Name (e.g. unique identifier) of the engine that is to be added to the body

      - name: thrust_magnitude_settings # [py]
        type: ThrustMagnitudeSettings # [py]
        description: Settings for computing the thrust magnitude (and specific impulse) as a function of time

      - name: bodies # [py]
        type: SystemOfBodies # [py]
        description: "Object defining the physical environment, with all properties of artificial and natural bodies." # [py]

      - name: body_fixed_thrust_direction # [py]
        type: numpy.ndarray[numpy.float64[3, 1]], default = [1,0,0] # [py]
        description: "Unit vector along which the thrust from the engine will point in a body-fixed frame" # [py]

  - name: add_variable_direction_engine_model # [py]
    short_summary: "Function that creates an engine model (to be used for thrust calculations), and adds it to an existing body."
    extended_summary: |
      Same as :func:`add_engine_model`, but with a time-variable body-fixed thrust direction

    parameters:

      - name: body_name # [py]
        type: str # [py]
        description: Name of the body to which the engine is to be added.

      - name: engine_name # [py]
        type: str # [py]
        description: Name (e.g. unique identifier) of the engine that is to be added to the body

      - name: thrust_magnitude_settings # [py]
        type: ThrustMagnitudeSettings # [py]
        description: Settings for computing the thrust magnitude (and specific impulse) as a function of time

      - name: bodies # [py]
        type: SystemOfBodies # [py]
        description: "Object defining the physical environment, with all properties of artificial and natural bodies." # [py]

      - name: body_fixed_thrust_direction_function # [py]
        type: Callable[[float], numpy.ndarray[numpy.float64[3, 1]]] # [py]
        description: "Function returning a unit vector, as a function of time, along which the thrust from the engine will point in a body-fixed frame" # [py]
