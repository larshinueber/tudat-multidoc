summary : "Setup and execution of numerical simulations."

extended_summary: |
  This module contains everything related to the setup of a numerical simulation, including submodules to define
  environment, propagation, and integration settings. It also contains objects that perform the simulation using such
  settings.

modules:
  - estimation_setup
  - environment_setup
  - propagation_setup
  - estimation
  - environment
  - propagation

classes:

  #####    SIMPLE SIMULATOR    #####

  - name: SingleArcSimulator # [py]
  - name: SingleArcSimulator # [cpp]
    short_summary: "Class for consolidating single arc dynamics simulation functionality."
    extended_summary: |
      Class for consolidating all functionality required to perform single arc dynamics simulations.
    autoclass: # See https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html#directive-autoclass
        special_members: __init__
    properties:
  
      - name: integrator_settings # [py]
        type: IntegratorSettings  # [py]
        description: |
          Settings to create the numerical integrator that is to be used
          for the integration of the equations of motion

      - name: stateDerivativeFunction_ # [cpp]
        type: std::function<Eigen::Matrix>(double, Eigen::Matrix) # [cpp]
      - name: state_derivative_function # [py]
        type: Callable[[float, numpy.ndarray], numpy.ndarray] # [py]
        readonly: Yes
        description: |
          Function that performs a single state derivative function evaluation. This function takes the numerically propagated
          state, and current independent variable (time) as input, and returns the derivative of the state that is then used
          by the numerical integration routine. Typically, this function is NOT used directly by users.

      - name: environmentUpdater_ # [cpp]
      - name: environment_updater # [py]
        type: EnvironmentUpdater
        readonly: Yes
        description: |
          Object used in the propagation to update the environment, it uses the current time and numerically calculated state
          to update the translational state, rotational state, flight conditions, etc. of all bodies in the simulation to be
          consistent with this time and state.  Typically, this class is NOT used directly by users, but can be useful in specific situations.

      - name: propagation_results  # [py]
        type: SingleArcSimulationResults
        readonly: Yes
        description: |
          This function retrieves all the results of the numerical propagation, stored
          in a single wrapper object

    methods:
    
      - name: integrateEquationsOfMotion                          # [cpp]
      - name: integrate_equations_of_motion                       # [py]
        short_summary: |
          This function numerically (re-)integrates the equations of
          motion.
        extended_summary: |
          This function numerically (re-)integrates the equations of
          motion, using the settings set through the constructor and a
          new initial state vector provided here.

        parameters:
        - name: initialStates # [cpp]
          type: Eigen::Matrix # [cpp]
        - name: initial_states # [py]
          type: numpy.ndarray # [py]
          description: |
            Initial state vector that is to be used for numerical
            integration. Note that this state should be in the correct
            frame (i.e. relative to central_bodies in
            propagator_settings), and in Cartesian elements (even when
            using a different propagation scheme than Cowell).

            .. note:: When using default settings for the class
                      constructor, this function is called during object
                      creation.

      #- name: manuallySetAndProcessRawNumericalEquationsOfMotionSolution # [cpp]
      #- name: manually_set_and_process_raw_numerical_equations_of_motion_solution # [py]
        #short_summary: "This function returns the history of cumulative computation time needed during the propagation as a vector of key-value containers."
        #extended_summary: |
          #This function returns the history of cumulative computation time needed during the propagation as a vector of key-value containers.
          #This means that at each time step the computation time is the sum of the computation time needed for that particular
          #time step and the computation time needed for all the previous time steps. The computation time is returned
          #as value, with time as key. This function is similar to the corresponding function without "base", with
          #different return types.

        #parameters:
          #- name: equationsOfMotionNumericalSolution # [cpp]
            #type: std::map<double, Eigen::Matrix> # [cpp]
          #- name: equations_of_motion_numerical_solution # [py]
            #type: Dict[float, numpy.ndarray] # [py]
            #description: State history generated externally.

          #- name: dependentVariableHistory # [cpp]
            #type: std::map<double, Eigen::Vector> # [cpp]
          #- name: dependent_variable_history # [py]
            #type: Dict[float, numpy.ndarray] # [py]
            #description: Dependent variable history generated externally.

          #- name: processSolution # [cpp]
            #type: bool # [cpp]
          #- name: process_solution # [py]
            #type: bool # [py]
            #description: If true, the new solution will be reprocessed immediately.

     

  #####  VARIATIONAL SIMULATOR #####

  - name: SingleArcVariationalSimulator # [py]
  - name: SingleArcVariationalEquationsSolver # [cpp]
    short_summary: "Class for consolidating single arc variational dynamics functionality."
    extended_summary: |
      Class for consolidating all functionality required to perform single arc variational dynamics simulations.
    autoclass: # See https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html#directive-autoclass
      special_members: __init__
    properties:

      - name: parametersToEstimate_ # [cpp]
        type: std::shared_ptr< estimatable_parameters::EstimatableParameterSet< > > # [cpp]
      - name: parameter_vector # [py]
        type: :class:`~tudatpy.numerical_simulation.estimation.EstimatableParameterSet`  # [py]
        readonly: No
        description: |
          Consolidated set of (estimatable) parameters
          w.r.t. the variational dynamics in the Variational Simulator are defined.

      - name: variationalEquationsSolution_ # [cpp]
        type: std::vector< std::map< double, Eigen::MatrixXd > > # [cpp]
      - name: variational_equations_history # [py]
        type: list[ dict[float, numpy.ndarray] ] # [py]
        readonly: Yes
        description: |
          List containing the solution of the variational equations, i.e. the
          state transition matrix history (first entry) and sensitivity matrix history (second vector entry).

      - name: state_transition_matrix_history # [py]
        type: dict[float, numpy.ndarray] # [py]
        readonly: Yes
        description: |
          State transition matrix history, given as epoch with propagation epochs as keys.
          This is (alongside the `sensitivity_matrix_history`) the solution of the variational equations.

      - name: sensitivity_matrix_history # [py]
        type: dict[float, numpy.ndarray] # [py]
        readonly: Yes
        description: |
          Sensitivity matrix history, given as epoch with propagation epochs as keys.
          This is (alongside the `state_transition_matrix_history`) the solution of the variational equations.

      - name: state_history # [py]
        type: dict[float, numpy.ndarray] # [py]
        readonly: Yes
        description: |
          State history, given as epoch with propagation epochs as keys.
          This is the solution of the (propagated) equations of motion, describing the states along which
          the variational dynamics are solved.


      - name: dynamicsSimulator_ # [cpp]
        type: std::shared_ptr< SingleArcDynamicsSimulator< > > # [cpp]
      - name: dynamics_simulator # [py]
        type: :class:`~tudatpy.numerical_simulation.SingleArcSimulator` # [py]
        readonly: Yes
        description: |
          Simulator object containing all functionality for solving of the (regular) equations of motion.


    methods:
      - name: ctor
        short_summary: "Class constructor."
        extended_summary: |
          Constructor through which the user can create instances of this class.
          Defines environment, propagation and integrations models, as well as a number of settings related
          to the (estimatable) parameters, w.r.t. which the variational equations are defined.

          .. note:: When using default settings, creating an object of
                    this type automatically triggers the propagation

        parameters:
          - name: bodies
            type: :class:`~tudatpy.numerical_simulation.environment.SystemOfBodies`
            description: |
              Object defining the physical environment, with all
              properties of artificial and natural bodies.

          - name: integrator_settings # [py]
            type: :class:`~tudatpy.numerical_simulation.propagation_setup.integrator.IntegratorSettings`  # [py]
            description: |            # [py]
              Settings to create the numerical integrator that is to be used for the integration of the equations of motion.

          - name: propagator_settings # [py]
            type: :class:`~tudatpy.numerical_simulation.propagation_setup.propagator.PropagatorSettings`  # [py]
            description: |            # [py]
              Settings to create the propagator that is to be used for the propagation of the dynamics.

          - name: estimated_parameters # [py]
            type: :class:`~tudatpy.numerical_simulation.estimation.EstimatableParameterSet` # [py]
            description: | # [py]
              Object defining a consolidated set of (estimatable) parameters (w.r.t. variational equations are defined),
              linked to the environment and acceleration settings of the simulation.

          - name: integrate_equations_concurrently # [py]
            type: Bool, default = True # [py]
            description: |             # [py]
              Boolean defining whether equations of motion and variational equations are to be propagated concurrently
              (if true) or sequentially (of false).

          - name: variational_only_integrator_settings # [py]
            type: :class:`~tudatpy.numerical_simulation.propagation_setup.integrator.IntegratorSettings`, default = [] # [py]
            description: |             # [py]
              Settings to create the numerical integrator that is to be used for integration the variational equations.
              If none is given (default), the numerical integration settings are taken to be the same as the ones applied
              in the integration of the equations of motions (specified by the `integrator_settings` parameter).

          - name: clear_numerical_solutions # [py]
            type: Bool, default = False # [py]
            description: |             # [py]
              Boolean to determine whether to clear the raw numerical solution member variables
              and to reset the state transition interface after propagation.

          - name: integrate_on_creation # [py]
            type: Bool, default = True # [py]
            description: |             # [py]
              Boolean defining whether the propagation should be performed immediately (default), or at a later time
              (when calling the :func:`integrate_full_equations` or :func:`integrate_equations_of_motion_only` member function).

          - name: set_integrated_result # [py]
            type: Bool, default = True # [py]
            description: |             # [py]
              Boolean to determine whether to automatically use the integrated results to set ephemerides for the
              propagated bodies.


      - name: integrateDynamicalEquationsOfMotionOnly                     # [cpp]
      - name: integrate_equations_of_motion_only                          # [py]
        short_summary: |
          Function to trigger the integration of the (regular) equations of motion.

        extended_summary: |
          Function to trigger the integration only of the (regular) equations of motion, resulting in a `state_history`.
          This step does not yet use variational dynamics. In order to also solve the variational equations,
          use the :func:`integrate_full_equations` member function.

        returns:
          type: None # [py]
          description: Creates / modifies the `state_history` property of the :class:`~tudatpy.numerical_simulation.SingleArcVariationalSolver` object. # [py]


      - name: integrateVariationalAndDynamicalEquations         # [cpp]
      - name: integrate_full_equations                          # [py]
        short_summary: |
          Function to trigger the integration of variational and dynamical equations (equations of motion).

        parameters:
          - name: initial_states
            type: numpy.ndarray([m, 1])
            description: |
              Initial state to be used for the parameters in the equations of motion.

          - name: integrate_equations_concurrently # [py]
            type: Bool, default = True # [py]
            description: |             # [py]
              Boolean defining whether equations of motion and variational equations are to be propagated concurrently
              (if true) or sequentially (of false).


        extended_summary: |
          Function to trigger the integration of the (regular) equations of motion as well as the variational equations,
          solving for `state_history` and `variational_equations_history`
          (in its two components `state_transition_matrix_history` & `sensitivity_matrix_history`).

        returns:
          type: None # [py]
          description: Creates / modifies the properties of the VariationalSolver object. # [py]


  #####       ESTIMATOR        #####

  - name: Estimator # [py]
  - name: OrbitDeterminationManager # [cpp]
    short_summary: "Class for consolidating all estimation functionality."
    extended_summary: |
       Class for consolidating all functionality required to perform an estimation.
    autoclass: # See https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html#directive-autoclass
        special_members: __init__
    properties:
      # - name: equationsOfMotionNumericalSolution_ # [cpp]
      #  type: std::map<double, Eigen::Matrix> # [cpp]
      - name: observation_simulators # [py]
        type: list[ :class:`~tudatpy.numerical_simulation.estimation.ObservationSimulator` ] # [py]
        readonly: Yes
        description: |
          Observation simulators contained in the Estimator object. A single observation simulator hosts
          the functionality for simulating a given observable over the defined link geometry.


      - name: observationManagers_ # [cpp]
        type: std::map< observation_models::ObservableType, std::shared_ptr< observation_models::ObservationManagerBase<  > > >  # [cpp]
      - name: observation_managers # [py]
        type: dict[ :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservableType`, :class:`~tudatpy.numerical_simulation.estimation.ObservationManager` ] # [py]
        readonly: Yes
        description: |
          Observation managers contained in the Estimator object. A single observation manager can simulate observations and
          calculate observation partials for all link ends involved in the given observable type.

      - name: stateTransitionAndSensitivityMatrixInterface_ # [cpp]
        type: std::shared_ptr< propagators::CombinedStateTransitionAndSensitivityMatrixInterface > # [cpp]
      - name: state_transition_interface # [py]
        type: :class:`~tudatpy.numerical_simulation.estimation.CombinedStateTransitionAndSensitivityMatrixInterface` # [py]
        readonly: Yes
        description: |
          State transition and sensitivity matrix interface, setting the variational equations/dynamics in the
          Estimator object.

      - name: variationalEquationsSolver_ # [cpp]
        type: std::shared_ptr< propagators::VariationalEquationsSolver< > > # [cpp]
      - name: variational_solver # [py]
        type: :class:`~tudatpy.numerical_simulation.SingleArcVariationalSolver` # [py]
        readonly: Yes
        description: |
          Variational equations solver, which is used to manage and execute the numerical integration of
          equations of motion and variational equations/dynamics in the Estimator object.


    methods:
      - name: ctor
        short_summary: "Class constructor."
        extended_summary: |
          Constructor through which the user can create instances of this class.
          Defines environment, propagation and integrations models, as well as a number of settings related
          to the estimatable parameters and observation settings.

          .. note:: When using default settings, creating an object of
                    this type automatically triggers the propagation

        parameters:
          - name: bodies
            type: :class:`~tudatpy.numerical_simulation.environment.SystemOfBodies`
            description: |
              Object defining the physical environment, with all
              properties of artificial and natural bodies.

          - name: estimated_parameters # [py]
            type: :class:`~tudatpy.numerical_simulation.estimation.EstimatableParameterSet` # [py]
            description: | # [py]
              Object defining a consolidated set of estimatable parameters,
              linked to the environment and acceleration settings of the simulation.

          - name: observation_settings # [py]
            type: :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSettings`
            description: | # [py]
               List of settings objects, each object defining the observation model settings for one
               combination of observable and link geometry that is to be simulated.

          - name: integrator_settings # [py]
            type: :class:`~tudatpy.numerical_simulation.propagation_setup.integrator.IntegratorSettings`  # [py]
            description: |            # [py]
              Settings to create the numerical integrator that is to be
              used for the integration of the equations of motion

          - name: propagator_settings # [py]
            type: :class:`~tudatpy.numerical_simulation.propagation_setup.propagator.PropagatorSettings`  # [py]
            description: |            # [py]
              Settings to create the propagator that is to be
              used for the propagation of dynamics

          - name: integrate_on_creation # [py]
            type: Bool, default = True # [py]
            description: |             # [py]
              Boolean defining whether the propagation should be
              performed immediately (default), or at a later time
              (when calling the :func:`perform_estimation` member function.


      - name: compute_covariance                          # [py]
        short_summary: |
          Function to perform a covariance analysis for the given observations and parameters
        extended_summary: | 
          Function to perform a covariance analysis for the given observations and parameters. The observations are provided through the 
          ``covariance_analysis_input`` input, as are the weights :math:`\mathbf{W}` and inverse a priori covariance :math:`(\mathbf{P}_{0})^{-1}`.
          Calling this function uses the environment and propagator settings provided to the constructor of this `Estimator` class to simulate
          the dynamics of any relevant bodies for the observations (and associated variational equations). The observations are then
          computed using the observation models created by the settings provided to the constructor of this `Estimator` class, as is the
          associated design matrix :math:`\mathbf{H}`. This function then produces the covariance :math:`\mathbf{P}` (omitting the normalization used
          internally for numerical stability)

          .. math::
             \mathbf{P}=\left(\mathbf{H}^{T}\mathbf{W}\mathbf{H}+(\mathbf{P}_{0})^{-1}\right)^{-1}
          
          Note that, although the actual observations are formally not required for a covariance analysis, all additional data (e.g. observation time, type, link ends, etc.)
          are. And, as such, the ``covariance_analysis_input`` does require the full set of observations and associated information, for consistency purposes (e.g., same input as
          ``perform_estimation`` function) .

        parameters:
        - name: covariance_analysis_input # [py]
          type: :class:`~tudatpy.numerical_simulation.estimation.CovarianceAnalysisInput` # [py]
          description: |
            Object consolidating all relevant settings for the covariance analysis
            This includes foremost the simulated observations, as well as a priori information about the estimatable parameters

        returns:
          type: :class:`~tudatpy.numerical_simulation.estimation.vOutput` # [py]
          description:  Object containing all outputs from the estimation process. # [py]

      - name: perform_estimation                          # [py]
        short_summary: |
          Function to trigger the parameter estimation.
        extended_summary: |
          Function to trigger the parameter estimation. Much of the process and requirements are similar to those described in the 
          :func:`~tudatpy.numerical_simulation.Estimator.compute_covariance` function. This function uses an iterative least-squares
          estimate process to fit the data (inside ``estimation_input``) to the model defined by the inputs to the ``Estimator`` constructor.s

        parameters:
        - name: estimation_input # [py]
          type: :class:`~tudatpy.numerical_simulation.estimation.EstimationInput` # [py]
          description: |
            Object consolidating all relevant settings for the estimation
            This includes foremost the simulated observations, as well as a priori information about the estimatable parameters and convergence criteria for the least squares estimation.

        returns:
          type: simulation_setup::PodOutput # [cpp]
          type: :class:`~tudatpy.numerical_simulation.estimation.EstimationOutput` # [py]
          description:  Object containing all outputs from the estimation process. # [py]

##############################################################################
  #  ███████ ██    ██ ███    ██  ██████ ████████ ██  ██████  ███    ██  ██████
  #  ██      ██    ██ ████   ██ ██         ██    ██ ██    ██ ████   ██ █
  #  █████   ██    ██ ██ ██  ██ ██         ██    ██ ██    ██ ██ ██  ██  █████
  #  ██      ██    ██ ██  ██ ██ ██         ██    ██ ██    ██ ██  ██ ██       █
  #  ██       ██████  ██   ████  ██████    ██    ██  ██████  ██   ████ ██████
  ##############################################################################

functions:

  - name: create_dynamics_simulator # [py]
    short_summary: "Function to create object that propagates the dynamics."
    extended_summary: |
      Function to create object that propagates the dynamics, as specified by propagator settings, and the physical environment.
      Depending on the specific input type (e.g. which factory function from the :ref:`\`\`propagator\`\`` module was used),
      a single-, multi- or hybrid-arc simulator is created. The environment is typically created by the :func:`~tudatpy.numerical_simulation.environment_setup.create_system_of_bodies`
      function. When using default settings, calling this function will automatically propagate the dynamics.
    parameters:

    - name: bodies # [py]
      type: :class:`~tudatpy.numerical_simulation.environment.SystemOfBodies` # [py]n
      description: |
        Object defining the physical environment, with all
        properties of artificial and natural bodies.

    - name: propagator_settings # [py]
      type: :class:`~tudatpy.numerical_simulation.propagation_setup.propagator.PropagatorSettings` # [py]
      description: |
        Settings to be used for the numerical propagation (dynamics type, termination conditions, integrator, etc.)

    - name: simulate_dynamics_on_creation # [py]
      type: Bool, default=True # [py]
      description: |
        Boolean defining whether to propagate the dynamics upon creation of the Simulator. If false, the dynamics c
        can be propagated at a later time by calling the :class:`~tudatpy.numerical_simulation.Simulator.integrate_equations_of_motion` function

    returns:
      type: :class:`~tudatpy.numerical_simulation.Simulator` # [py]
      description: Object that propagates the dynamics, and processes the results. # [py]

