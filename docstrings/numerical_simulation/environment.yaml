summary : "Functionalities of environment objects."

extended_summary: |
  This module provides functionalities for environment objects. Specifically, it contains
  classes and functions that perform computations related to environment models of natural and artificial bodies.
  Much of the functionality in this module concerns classes stored inside :class:`~tudatpy.numerical_simulation.environment.Body` objects, a list of which is in turn
  stored in a :class:`~tudatpy.numerical_simulation.environment.SystemOfBodies` object. Note that the classes in this module are rarely created manually, 
  but are instead created by the functionality in the :ref:`\`\`environment_setup\`\`` module. 


enums:

  - name: AerodynamicsReferenceFrames
    short_summary: "Enumeration of reference frame identifiers typical for aerodynamic calculations."
    extended_summary: |
      Enumeration of reference frame identifiers typical for aerodynamic calculations. Note that the frames are also defined
      in the absence of any aerodynamic forces and/or atmosphere. They define frames of a body w.r.t. a central body, with
      the details given by Mooij (1994). The chain of frames starts from the inertial frame, to the frame fixed to the
      central body (corotating), to the vertical frame (defined by the body's relative position), the trajectory and aerodynamic frames
      (defined by the body's relative velocity) and finally the body's own body-fixed frame.

    members:
      - name: inertial_frame
      - name: corotating_frame
      - name: vertical_frame
      - name: trajectory_frame
      - name: aerodynamic_frame
      - name: body_frame

  - name: AerodynamicCoefficientFrames
    short_summary: "Enumeration of reference frames used for definition of aerodynamic coefficients."
    extended_summary: |
      Enumeration of reference frames used for definition of aerodynamic coefficients. There is a partial overlap between this enum
      and the :class:`~tudatpy.numerical_simulation.environment.AerodynamicsReferenceFrames`. This enum combines a subset of those
      frames (which are typically used for aerodynamic coefficient definition), and a swap in sign. For instance, aerodynamic
      force coefficients are often defined positive along *negative* axes of the aerodynamic frame (drag, side force and lift coefficients)

    members:
      - name: positive_body_fixed_frame_coefficients
      - name: negative_body_fixed_frame_coefficients
      - name: positive_aerodynamic_frame_coefficients
      - name: negative_aerodynamic_frame_coefficients


  - name: AerodynamicCoefficientsIndependentVariables
    short_summary: "Enumeration of the independent variables that can be used to compute aerodynamic coefficients."
    extended_summary: ""

    members:
      - name: mach_number_dependent
        description: "Mach number of the propagated vehicle."
      - name: angle_of_attack_dependent
        description: "Angle of attack of the propagated vehicle."
      - name: sideslip_angle_dependent
        description: "Sideslip angle of the propagated vehicle."
      - name: altitude_dependent
        description: "Altitude of the propagated vehicle."
      - name: time_dependent
        description: "Current simulation epoch."
      - name: control_surface_deflection_dependent
        description: "Angle of deflection of the control surface of the propagated vehicle."
      - name: undefined_independent_variable
        description: "Can be used for a custom coefficient interface with other variables, at the expense of being able to use the FlightConditions class to automatically updates the aerodynamic coefficients during propagation."



classes:

  - name: HypersonicLocalInclinationAnalysis
    short_summary: "Class to calculate the hypersonic aerodynamic coefficients using local inclination methods."
    extended_summary: |
       Class to calculate the hypersonic aerodynamic coefficients using local inclination methods. This class
       implements several local inclination methods, and calculates the aerodynamic force and moment coefficients
       as a function of angle of attack, sideslip angle and Mach number
    autoclass: # See https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html#directive-autoclass
        special_members: __init__
    methods:
      - name: ctor
        short_summary: "Class constructor, taking the shape of the vehicle, and various analysis options as input."

        parameters:
          - name: independent_variable_points  # [py]
            type: list[list[float]] # [py]
            description: |
              List containing three lists, with each sublist containing the data points of each of the 
              independent variables for the coefficient generation. The physical meaning of each of the 
              three independent variables is: 0 = mach number, 1 = angle of attack, 2 = angle of sideslip. 
              Each of the subvectors must be sorted in ascending order.

          - name: body_shape  # [py]
            type: SurfaceGeometry # [py]
            description: |
              Class that defines the shape of the vehicle as a continuous surface. The local inclination analysis
              discretizes the surface of the vehicle into quadrilateral panels, defined by the other inputs to
              this constructor. In case the :class:`tudat.geometry.SurfaceGeometry` object is made up of multiple
              sub-shapes, different settings may be used for each

          - name: number_of_lines  # [py]
            type: List[ float ] # [py]
            description: |
              Number of discretization points in the first independent surface variable of each of the subparts of body_shape. 	
              The size of this list should match the number of parts of which the body_shape is composed. The first independent
              variable of a subpart typically runs along the longitudinal vehicle direction

          - name: number_of_points  # [py]
            type: List[ float ] # [py]
            description: |
              Number of discretization points in the second independent surface variable of each of the subparts of body_shape. 	
              The size of this list should match the number of parts of which the body_shape is composed. The first independent
              variable of a subpart typically runs along the lateral vehicle direction

          - name: invert_orders  # [py]
            type: List[ bool ] # [py]
            description: |
              Booleans to denote whether the surface normals of the panels of each discretized body_shape subpart are to be inverted
              (i.e. inward-facing->outward facing or vice versa). The size of this list should match the number of parts of which the body_shape is composed. 

          - name: selected_methods  # [py]
            type: List[ List[ int ] ] # [py]
            description: |
              Double list of selected local inclination methods, the first index (outer list) represents compression or expansion (0 and 1), 
              the second index (inner list) denotes the vehicle part index. The size of this inner list should match the number of parts of which the body_shape is composed. 
              The int defining the method type is interpreted as follows. 
              For the compression methods, the following are available:
              *  0: Newtonian Method.
              *  1: Modified Newtonian.
              *  2 and 3: not available at this moment.
              *  4: Tangent-wedge method.
              *  5: Tangent-cone method.
              *  6: Modified Dahlem-Buck method.
              *  7: VanDyke unified pressure method.
              *  8: Smyth Delta Wing method.
              *  9: Hankey flat surface method
              The expansion method has the following options:
              *  0: Vacuum Pressure coefficient method.
              *  1: Zero Pressure function.
              *  4: High Mach base pressure method.
              *  3 or 5: Prandtl-Meyer method.
              *  6: ACM empirical pressure coefficient.

          - name: reference_area # [py]
            type: float # [py]
            description: |
               Reference area used to non-dimensionalize aerodynamic forces and moments.

          - name: reference_length # [py]
            type: float # [py]
            description: |
               Reference length used to non-dimensionalize aerodynamic moments.

            name: moment_reference_point  # [py]
            type: numpy.ndarray # [py]
            description: |
              Reference point wrt which aerodynamic moments are calculated.

          - name: save_pressure_coefficients  # [py]
            type: Bool # [py]
            description: |
              Boolean denoting whether to save the pressure coefficients that are computed to files

  - name: FlightConditions
    short_summary: |
       Object that calculates various state-derived quantities typically
       relevant for flight dynamics.
    extended_summary: |
       Object that calculates various state-derived quantities typically
       relevant for flight dynamics, such as latitude, longitude,
       altitude, etc. It also contains an
       :py:class:`~AerodynamicAngleCalculator` that computes derived
       angles (flight path, heading angle, etc.). This object is limited
       to non-atmospheric flight. For flight through Body objects
       endowed with an atmosphere model, the derived class
       :py:class:`~AtmosphericFlightConditions` is used. This object is
       stored inside a Body object, and represents the flight conditions
       of a single body w.r.t. a single central body.

    properties: # [py]
      - name: aerodynamic_angle_calculator # [py]
        type: AerodynamicAngleCalculator # [py]
        readonly: Yes
        description: |  # [py]
          The object that is responsible for computing various relevant
          flight dynamics angles and frame rotations.

      - name: longitude # [py]
        type: float # [py]
        readonly: Yes
        description: |  # [py]
          The body-fixed longitude of the body w.r.t. its central body.

      - name: latitude # [py]
        type: float # [py]
        readonly: Yes
        description: | # [py]
          The body-fixed geographic latitude of the body w.r.t. its
          central body.

      - name: geodetic_latitude # [py]
        type: float # [py]
        readonly: Yes
        description: |  # [py]
          The body-fixed geodetic latitude of the body w.r.t. its central
          body, using an :py:class:`~OblateSpheroidBodyShapeModel` of the
          central body. If no such model is defined in the central body,
          this attribute equals the latitude.

      - name: altitude # [py]
        type: float # [py]
        readonly: Yes
        description: | # [py]
          The altitude of this body w.r.t. the central body (using the
          :py:class:`~ShapeModel` of the central body).

      - name: time # [py]
        type: float # [py]
        readonly: Yes
        description: | # [py]
          The current time, at which this object was last updated

      - name: body_centered_body_fixed_state # [py]
        type: numpy.ndarray # [py]
        readonly: Yes
        description:  | # [py]
          Cartesian translational state, expressed in a frame centered
          at, and fixed to, the central body. Note that, due to the
          rotation of the central body, the norm of the body-fixed,
          body-centered, velocity differs from the norm of the inertial
          body-centered velocity. # [py]

##################################################################
      

  - name: AtmosphericFlightConditions
    short_summary: |
       Object that calculates various state-derived quantities typically
       relevant for flight dynamics, for flight in an atmosphere.
    extended_summary: |
       Object that calculates various state-derived quantities typically
       relevant for flight dynamics, for flight in an atmosphere, such
       as latitude,  longitude, altitude, density, Mach number etc. It
       also contains an ``AerodynamicAngleCalculator`` that computes
       derived angles (flight path, heading angle, etc.). This object is
       derived from ``FlightConditions``, which performs computations for
       non-atmospheric flight only. This object is stored inside a Body
       object, and represents the flight conditions of a single body
       w.r.t. a single central body.

    properties: # [py]
      - name: density # [py]
        type: float # [py]
        readonly: Yes
        description: | # [py]
          The freestream atmospheric density at the body's current
          location.

      - name: temperature # [py]
        type: float # [py]
        readonly: Yes
        description: | # [py]
          The freestream atmospheric temperature at the body's current
          location.

      - name: dynamic_pressure # [py]
        type: float # [py]
        readonly: Yes
        description: | # [py]
          The freestream atmospheric dynamic pressure at the body's
          current location.

      - name: pressure # [py]
        type: float # [py]
        readonly: Yes
        description: | # [py]
          The freestream atmospheric static pressure at the body's
          current location.

      - name: speed_of_sound # [py]
        type: float # [py]
        readonly: Yes
        description: | # [py]
          The freestream atmospheric speed of sound at the body's current
          location.

      - name: airspeed # [py]
        type: float # [py]
        readonly: Yes
        description: | # [py]
          The airspeed of the body w.r.t. the atmosphere.

      - name: airspeed_velocity # [py]
        type: numpy.ndarray # [py]
        readonly: Yes
        description: | # [py]
          The velocity vector of the body w.r.t. the freestream
          atmosphere (e.g. vectorial counterpart of airspeed).

      - name: mach_number # [py]
        type: float # [py]
        readonly: Yes
        description: | # [py]
          The freestream Mach number of the body.

      - name: aero_coefficient_independent_variables # [py]
        type: numpy.ndarray # [py]
        readonly: Yes
        description: | # [py]
          List of current values of independent variables of aerodynamic
          coefficients. This list is only defined if the body has an
          :py:class:`~AerodynamicCoefficientInterface` that has
          dependencies on environmental variables (e.g. Mach number,
          angle of attack, etc.).

      - name: control_surface_aero_coefficient_independent_variables # [py]
        type: numpy.ndarray # [py]
        readonly: Yes
        description: | # [py]
          List of lists current values of independent variables of
          aerodynamic coefficients for control surfaces. The outer list
          defines the control surface, the inner list the values of the
          independent variables. This list is only defined if the body
          has an :py:class:`~AerodynamicCoefficientInterface` with
          control surfaces that have dependencies on environmental
          variables (e.g. Mach number, angle of attack, etc.).

      - name: aerodynamic_coefficient_interface # [py]
        type: AerodynamicCoefficientInterface # [py]
        readonly: Yes
        description: | # [py]
          Object extracted from the same Body object as this
          :py:class:`~AtmosphericFlightConditions` object, which defines
          the aerodynamic coefficients.

##################################################################

  - name: AerodynamicAngleCalculator
    short_summary: |
       Object to calculate (aerodynamic) orientation angles, and frame transformations,
       from current vehicle state.
    extended_summary: |
       Object to calculate (aerodynamic) orientation angles (list given by the :class:`~AerodynamicsReferenceFrameAngles` enum)
       and transformations between frames (list given by the :class:`~AerodynamicsReferenceFrames` enum) from current vehicle state.
       
       
    methods:
      
      - name: getRotationMatrixBetweenFrames                           # [cpp]
      - name: get_rotation_matrix_between_frames                       # [py]
        short_summary: |
          Function to get the rotation matrix between two frames. 
        extended_summary: |
          Function to get the rotation matrix between two frames. This function
          is meant to be used only *during* a numerical propagation, in particular
          for the definition of a custom (e.g. guidance) model.

        parameters:
        - name: originalFrame # [cpp]
          type: AerodynamicsReferenceFrames # [cpp]
        - name: original_frame # [py]
          type: AerodynamicsReferenceFrames # [py]
          description: |
            The frame :math:`A` from which the rotation matrix is to be calculated
    
        - name: targetFrame # [cpp]
          type: AerodynamicsReferenceFrames # [cpp]
        - name: target_frame # [py]
          type: AerodynamicsReferenceFrames # [py]
          description: |
            The frame :math:`B` to which the rotation matrix is to be calculated

        returns:
          type: np.ndarray # [py]
          type: Eigen::Matrix3d # [cpp]
          description: Rotation matrix :math:`\mathbf{R}^{B/A}` from frame :math:`A` to frame `B`

      - name: getAngle                           # [cpp]
      - name: get_angle                       # [py]
        short_summary: |
          Function to get a single orientation angle
        extended_summary: |
          Function to get a single orientation angle. This function
          is meant to be used only *during* a numerical propagation, in particular
          for the definition of a custom (e.g. guidance) model.
      
        parameters:
        - name: originalFrame # [cpp]
          type: AerodynamicsReferenceFrameAngles # [cpp]
        - name: original_frame # [py]
          type: AerodynamicsReferenceFrameAngles # [py]
          description: |
            The identifier for the angle that is to be returnd

        returns:
          type: float # [py]
          type: double # [py]
          description: Value of requested angle
##################################################################
  - name: RotationalEphemeris
    short_summary: |
      Object that stores the rotational state of the bodies.
    extended_summary: |
      Object that stores the rotational state of the bodies. This object can be used to calculate rotation matrices,
      which are used to transform coordinates between reference frames.

    methods:
      - name: body_fixed_to_inertial_rotation                       # [py]
        short_summary: |
          Function to get rotation matrix from body-fixed frame to inertial frame over time.
        extended_summary: |
          Function to get rotation matrix from body-fixed (target) frame to inertial (base) frame over time. 
          The calculation of this rotation matrix depends on the specific rotation model that has been defined,
          either from an a priori definition (see :ref:`\`\`rotation_model\`\`` submodule) or from processing
          the results of propagation of the rotational equations of motion.

        parameters:
          - name: current_time # [py]
            type: float # [py]
            description: |
              The time (in seconds since epoch J2000, TDB time scale) at which the rotation matrix is evaluated

        returns:
          type: np.ndarray # [py]
          description: Rotation matrix :math:`\mathbf{R}^{I/B}` from body-fixed frame :math:`B` to inertial frame `I`

      - name: inertial_to_body_fixed_rotation                       # [py]
        short_summary: |
          Function to get rotation matrix from inertial frame to body-fixed frame over time.
        extended_summary: |
          Function computes the inverse (equal to transpose) rotation of the ``body_fixed_to_inertial_rotation`` function.

        parameters:
          - name: current_time # [py]
            type: float # [py]
            description: |
              The time (in seconds since epoch J2000, TDB time scale) at which the rotation matrix is evaluated

      - name: time_derivative_body_fixed_to_inertial_rotation                       # [py]
        short_summary: |
          Function to get time derivative of rotation matrix from body-fixed frame to inertial frame over time.
        extended_summary: |
          Function to get time derivative of rotation matrix from body-fixed frame to inertial frame over time (see ``body_fixed_to_inertial_rotation``), 
          denoted :math:`\dot{\mathbf{R}}^{(I/B)}`,
      

        parameters:
          - name: current_time # [py]
            type: float # [py]
            description: |
              The time (in seconds since epoch J2000, TDB time scale) at which the rotation matrix derivative is evaluated


        returns:
          type: np.ndarray # [py]
          description: Rotation matrix :math:`\dot{\mathbf{R}}^{I/B}` from body-fixed frame :math:`B` to inertial frame `I`

      - name: time_derivative_inertial_to_body_fixed_rotation                       # [py]
        short_summary: |
          Function to get time derivative of rotation matrix from inertial frame to body-fixed frame over time.
        extended_summary: |
          Function to get time derivative of rotation matrix from inertial frame to body-fixed frame over time (see ``inertial_to_body_fixed_rotation``), 
          denoted :math:`\dot{\mathbf{R}}^{(B/I)}`,


        parameters:
          - name: current_time # [py]
            type: float # [py]
            description: |
              The time (in seconds since epoch J2000, TDB time scale) at which the rotation matrix derivative is evaluated


        returns:
          type: np.ndarray # [py]
          description: Rotation matrix :math:`\dot{\mathbf{R}}^{B/I}` from inertial frame `I` to body-fixed frame :math:`B`


      - name: angular_velocity_in_body_fixed_frame                       # [py]
        short_summary: |
          Function to get the body's angular velocity vector, expressed in the body-fixed frame.
        extended_summary: |
          Function to get the body's angular velocity vector :math:`\boldsymbol{\omega}^{(B)}`, expressed in the body-fixed frame :math:`B`.
          The calculation of the angular velocity depends on the specific rotation model that has been defined,
          either from an a priori definition (see :ref:`\`\`rotation_model\`\`` submodule) or from processing
          the results of propagation of the rotational equations of motion. 
          Note that when numerically propagating rotational dynamics, this angular velocity vector is typically directly defined
          in the last three entries of the state vector.

        parameters:
          - name: current_time # [py]
            type: float # [py]
            description: |
              The time (in seconds since epoch J2000, TDB time scale) at which the angular velocity vector is evaluated

        returns:
          type: np.ndarray # [py]
          description: Angular velocity vector of the body  :math:`\boldsymbol{\omega}^{(B)}` expressed in the body-fixed frame :math:`B`

      - name: angular_velocity_in_inertial_frame                       # [py]
        short_summary: |
          Function to get the body's angular velocity vector, expressed in the inertial frame.
        extended_summary: |
          Function to get the body's angular velocity vector :math:`\boldsymbol{\omega}^{(I)}`, expressed in the body-fixed frame :math:`I`.
          This quantity is computed from :math:`\mathbf{R}^{I/B}\boldsymbol{\omega}^{(B)}`, see the ``angular_velocity_in_body_fixed_frame`` and
          ``body_fixed_to_inertial_rotation`` functions.

        parameters:
          - name: current_time # [py]
            type: float # [py]
            description: |
              The time (in seconds since epoch J2000, TDB time scale) at which the angular velocity vector is evaluated

        returns:
          type: np.ndarray # [py]
          description: Angular velocity vector of the body  :math:`\boldsymbol{\omega}^{(B)}` expressed in the body-fixed frame :math:`B`

    properties: # [py]
      - name: body_fixed_frame_name # [py]
        type: str # [py]
        readonly: Yes
        description: |
          The identifier of the body-fixed frame, used in other parts of the simulation to identify it.

      - name: inertial_frame_name # [py]
        type: str # [py]
        readonly: Yes
        description: |
          The identifier of the inertial frame, used in other parts of the simulation to identify it.

      ##################################################################
     
  - name: VehicleSystems
    short_summary: |
       Object used to store physical (hardware) properties of a vehicle.       
       
    methods:
      
      - name: set_control_surface_deflection                       # [py]
        short_summary: |
          Function to set the current deflection of an aerodynamic control surface.
        extended_summary: |
          Function to set the current deflection of an aerodynamic control surface,
          identified by its name. To set the control surface deflection, the control 
          surface has to exist. A control surface is created whenever control surfaces are
          defined in a body's aerodynamic coefficient interface.

        parameters:
        - name: control_surface_id # [py]
          type: str # [py]
          description: |
            The identified (name) of the given control surface
            
        - name: deflection_angle # [py]
          type: float # [py]
          description: |
            The deflection (in radians) that the control surface is to be set to. This will 
            typically influence the aerodynamic coefficients of the vehicle


      - name: set_control_surface_deflection                       # [py]
        short_summary: |
          Function to retrieve the current deflection of an aerodynamic control surface.
        extended_summary: |
          Function to retrieve the current deflection of an aerodynamic control surface,
          identified by its name. To extract the control surface deflection, the control 
          surface has to exist. A control surface is created whenever control surfaces are
          defined in a body's aerodynamic coefficient interface.

        parameters:
        - name: control_surface_id # [py]
          type: str # [py]
          description: |
            The identified (name) of the given control surface           

        returns:
          type: float # [py]
          description: Current deflection (in radians) that the control surface
          
      - name: get_engine_model                       # [py]
        short_summary: |
          Function to retrieve an engine model from the vehicle
        
      
        parameters:
        - name: engine_name # [py]
          type: str # [py]
          description: |
            The identifier for the engine model that is to be retrieved

        returns:
          type: EngineModel # [py]
          description: Model for the engine that is requested
    
##################################################################

     
  - name: Ephemeris
    short_summary: |
       Object that computes the state of a body as a function of time
    extended_summary: |
       Object (typically stored inside a :class:`~Body` object) that computes the state of a body as a function of time,
       both outside of a propagation, and during a propagation if the given body's translational state is not propagated.
       Note that this object computes the state w.r.t. its own origin (defined by ``frame_origin``), which need not be the same as the global frame origin
       of the environment.
       
    methods:
      - name: cartesian_state # [py]
        short_summary: "This function returns the Cartesian state (position and velocity) at the given time, w.r.t. the ``frame_origin``."

        parameters:
        - name: current_time # [py]
          type: float # [py]
          description: |
            Time (in seconds since J2000 in TDB time scale) at which the state is to be computed.

        returns:
          type: np.ndarray
          description: Requested Cartesian state
        
      - name: cartesian_position # [py]
        short_summary: "As ``cartesian_state``, but only the three position components"

        parameters:
        - name: current_time # [py]
          type: float # [py]
          description: |
            Time (in seconds since J2000 in TDB time scale) at which the state is to be computed.

        returns:
          type: np.ndarray
          description: Requested Cartesian position  
         
      - name: cartesian_velocity # [py]
        short_summary: "As ``cartesian_state``, but only the three velocity components"

        parameters:
        - name: current_time # [py]
          type: float # [py]
          description: |
            Time (in seconds since J2000 in TDB time scale) at which the state is to be computed.

        returns:
          type: np.ndarray
          description: Requested Cartesian velocity
           
    properties: # [py]
      - name: frame_origin # [py]
        type: str # [py]
        readonly: Yes
        description: |
          Name of the reference body/point w.r.t. which this object provides its states
  
      - name: frame_orientation # [py]
        type: str # [py]
        readonly: Yes
        description: |
          Name of the frame orientation w.r.t which this object provides its states
                
##################################################################

     
  - name: EngineModel
    short_summary: |
       Object used to store properties of an engine, and compute the thrust magnitude and body-fixed thrust direction     
       
    methods:
      
    properties: # [py]
      - name: thrust_magnitude_calculator # [py]
        type: ThrustMagnitudeWrapper # [py]
        readonly: Yes
        description: |
          Object used to manage and compute the magnitude of the thrust provided by the engine
          
##################################################################

  - name: Body
    short_summary: |
       Object that stores the environment properties and current state of
       a single body.
    extended_summary: |
       Object that stores the environment properties and current state
       of a single celestial body (natural or artificial). Each separate
       environment model (gravity field, ephemeris, etc.) is stored as a
       member object in this class. During each time step, the Body gets
       updated to the current time/propagated state, and the current
       properties, in as much as they are time-dependent, can be
       extracted from this object

    properties: # [py]
      - name: state # [py]
        type: numpy.ndarray # [py]
        readonly: Yes
        description: |
          The translational state of the Body, as set during the current
          step of the numerical propagation. The translational state
          stored here is always in Cartesian elements, w.r.t. the global
          frame origin, with axes along the global frame orientation. If
          the body's translational state is numerically propagated, this
          property gets extracted from the propagated state vector. If it
          is not propagated, the state is extracted from this body's
          ephemeris. In both cases, any required state transformations
          are automatically applied. Note that this function  is *only*
          valid during the numerical propagation if any aspects of the
          dynamics or dependent variables require the body's state.

      - name: position # [py]
        type: numpy.ndarray # [py]
        readonly: Yes
        description: |
          The translational position of the Body, as set during the
          current step of the numerical propagation
          (see :py:attr:`~state`).

      - name: velocity # [py]
        type: numpy.ndarray # [py]
        readonly: Yes
        description: |
          The translational velocity of the Body, as set during the
          current step of the numerical propagation
          (see :py:attr:`~state`).

      - name: inertial_to_body_fixed_frame # [py]
        type: numpy.ndarray # [py]
        readonly: Yes
        description: |
          The rotation from inertial frame (with global frame
          orientation) to this Body's body-fixed frame. The rotation is
          always returned here as a rotation matrix.  If the body's
          rotational state is numerically propagated, this property gets
          extracted from the propagated state vector. If it is not
          propagated, the state is extracted from this body's rotational
          ephemeris.

          .. note:: This function is **only** valid during the
                    numerical propagation if any aspects of the dynamics
                    or dependent variables require the body's rotational
                    state.

      - name: body_fixed_to_inertial_frame # [py]
        type: numpy.ndarray # [py]
        readonly: Yes
        description: |
          The rotation from this Body's body-fixed frame to inertial
          frame (see :py:attr:`~inertial_to_body_fixed_frame`).

      - name: inertial_to_body_fixed_frame_derivative # [py]
        type: numpy.ndarray # [py]
        readonly: Yes
        description: |
          Time derivative of rotation matrix from inertial frame to this
          Body's body-fixed frame
          (see :py:attr:`~inertial_to_body_fixed_frame`).

      - name: body_fixed_to_inertial_frame_derivative # [py]
        type: numpy.ndarray # [py]
        readonly: Yes
        description: |
          Time derivative of rotation matrix from this Body's body-fixed
          frame to inertial frame
          (see :py:attr:`~inertial_to_body_fixed_frame`).

      - name: inertial_angular_velocity # [py]
        type: numpy.ndarray # [py]
        readonly: Yes
        description: |
          Angular velocity vector of the body, expressed in inertial
          frame (see :py:attr:`~inertial_to_body_fixed_frame`).
    
      - name: body_fixed_angular_velocity # [py]
        type: numpy.ndarray # [py]
        readonly: Yes
        description: |
          Angular velocity vector of the body, expressed in body-fixed
          frame (see :py:attr:`~inertial_to_body_fixed_frame`).

      - name: mass # [py]
        type: float # [py]
        description: |
          Denotes the current mass of the vehicle, as used in the calculation of
          non-conservative acceleration. Note that defining a mass for a vehicle
          does *not* define a gravity field (this is done through a gravity field model).
          However, defining a gravity field model in a body automatically assigns it
          a mass here.
          Unlike the attributes containing the state, orientation, angular velocity
          of the Body, this attribute may be used to retrieve the state during the
          propagation *and* to define the mass of a vehicle

      - name: ephemeris # [py]
        type: Ephemeris # [py]
        description: |
          Ephemeris model of this body, used to calculate its current state as a function of time.
          Depending on the selected type of model, the type of this attribute
          is of type Ephemeris, or a derived class thereof.

      - name: flight_conditions # [py]
        type: FlightConditions # [py]
        description: |
          Current flight conditions of the body, which can be accessed during the propagation to get the current altitude, aerodynamic angle calculator, longitude, etc.

      - name: atmosphere_model # [py]
        type: AtmosphereModel # [py]
        description: |
          Atmosphere model of this body, used to calculate density, temperature, etc. at a given
          state/time. Depending on the selected type of model, the type of this attribute
          is of type AtmosphereModel, or a derived class thereof.

      - name: shape_model # [py]
        type: BodyShapeModel # [py]
        description: |
          Shape model of this body, used to define the exterior shape of the body, for instance for
          the calculation of vehicle's altitude. Depending on the selected type of model, the type of this attribute
          is of type BodyShapeModel, or a derived class thereof.

      - name: gravity_field_model # [py]
        type: GravityFieldModel # [py]
        description: |
          Gravity field model of this body, used to define the exterior gravitational potential, and
          its gradient(s). Depending on the selected type of model, the type of this attribute
          is of type GravityFieldModel, or a derived class thereof.

      - name: aerodynamic_coefficient_interface # [py]
        type: AerodynamicCoefficientInterface # [py]
        description: |
          Object defining the aerodynamic coefficients of a vehicle (force-only, or force and moment)
          as a function of any number of independent variables. Depending on the selected type of model, the type of this attribute
          is of type AerodynamicCoefficientInterface, or a derived class thereof.

      - name: rotation_model # [py]
        type: RotationalEphemeris # [py]
        description: |
          Object defining the orientation of a body, used to calculate the rotation to/from a body-fixed
          frame (and its derivate). Depending on the selected type of model, the type of this attribute
          is of type RotationalEphemeris, or a derived class thereof.

      - name: flight_conditions # [py]
        type: FlightConditions # [py]
        description: |
          Object used to calculated and store the current flight conditions of a vehicle (altitude, latitude, longitude,
          flight-path angle, etc.) w.r.t. a central body. In case the central body contains an atmosphere, this object
          also stores current local density, Mach number, etc. This object is typically used for aerodynamic accelerations,
          guidance models or other central-body-related custom models. 

      - name: system_models # [py]
        type: VehicleSystems # [py]
        description: |
          Object used to store physical (hardware) properties of a vehicle, such as engines, control surfaces, etc. This
          object is typically created automatically whenever such a hardware model needs to be assigned to a vehicle.


      - name: gravitational_parameter # [py]
        type: float # [py]
        readonly: Yes
        description: |
          Attribute of convenience, equivalent to ``.gravity_field_model.gravitational_parameter``

  - name: SystemOfBodies
    short_summary: |
       Object that contains a set of Body objects and associated frame
       information.
    extended_summary: |
       Object that contains a set of Body objects and associated frame
       information. This object stored the entire environment for a
       typical Tudat numerical simulation, and is fundamental for the
       overall Tudat architecture.

    # attributes:

    methods:
      - name: getBody # [cpp]
      - name: get # [py]
        short_summary: "This function extracts a single Body object from the SystemOfBodies."
        #extended_summary: |
        #  This function extracts a single Body object from the SystemOfBodies

        parameters:
        - name: bodyName # [cpp]
          type: std::string # [cpp]
        - name: body_name # [py]
          type: numpy.ndarray # [py]
          description: |
            Name of the Body that is to be retrieved.

        returns:
          type: Body
          description: Body object of the requested name

      - name: get_body # [py]
        short_summary: "Deprecated version of :py:func:`~get`"

      - name: createEmptyBody # [cpp]
      - name: create_empty_body # [py]
        short_summary: "This function creates a new empty body."
        extended_summary: |
          This function creates a new empty body, and adds it to the
          :py:class:`~SystemOfBodies`. Since the body is empty, it will
          not have any environment models defined. These must all be
          added manually by a user.

        examples: |

          This function is often used early on in the environment
          creation segment of a simulation, following the creation of
          a :py:class:`~SystemOfBodies` from the default settings
          for celestial bodies.

          .. code-block:: python
             :emphasize-lines: 18

             # Define string names for bodies to be created from default.
             bodies_to_create = ["Sun", "Earth", "Moon", "Mars", "Venus"]

             # Use "Earth"/"J2000" as global frame origin and orientation.
             global_frame_origin = "Earth"
             global_frame_orientation = "J2000"

             # Create default body settings, usually from `spice`.
             body_settings = environment_setup.get_default_body_settings(
                 bodies_to_create,
                 global_frame_origin,
                 global_frame_orientation)

             # Create system of selected celestial bodies
             bodies = environment_setup.create_system_of_bodies(body_settings)

             # Create vehicle objects.
             bodies.create_empty_body("Delfi-C3")


        parameters:
        - name: bodyName # [cpp]
          type: std::string # [cpp]
        - name: body_name # [py]
          type: string # [py]
          description: |
            Name of the Body that is to be added

        - name: processBody # [cpp]
          type: bool, default=True # [cpp]
        - name: process_body # [py]
          type: bool, default=True # [py]
          description: |
            Variable that defines whether this new Body will have its
            global frame origin/orientation set to conform to rest of
            the environment.

            .. warning:: Only in very rare cases should
                         this variable be anything other than ``True``.
                         Users are recommended to keep this default value
                         intact.

      - name: addBody # [cpp]
      - name: add_body # [py]
        short_summary: |
          This function adds an existing body, which the user has
          separately created, to the :py:class:`~SystemOfBodies`.

        parameters:
        - name: bodyToAdd # [cpp]
          type: std::shared_ptr< Body > # [cpp]
        - name: body_to_add # [py]
          type: Body # [py]
          description: |
            Body object that is to be added.

        - name: bodyName # [cpp]
          type: std::string # [cpp]
        - name: body_name # [py]
          type: numpy.ndarray # [py]
          description: |
            Name of the Body that is to be added.

        - name: processBody # [cpp]
          type: bool, default=True # [cpp]
        - name: process_body # [py]
          type: bool, default=True # [py]
          description: |
            Variable that defines whether this new Body will have its
            global frame origin/orientation set to conform to rest of
            the environment.

            .. warning:: Only in very rare cases should this variable be
                         anything other than ``True``. Users are
                         recommended to keep this default value intact.

      - name: deleteBody # [cpp]
      - name: remove_body # [py]
        short_summary: |
           This function removes an existing body from the
           :py:class:`~SystemOfBodies`.
        extended_summary: |

          .. warning:: This function does *not* necessarily delete the
                       Body object, it only removes it from this object.
                       If any existing models in the simulation refer to
                       this Body, it will persist in memory.

        parameters:
        - name: bodyName # [cpp]
          type: std::string # [cpp]
        - name: body_name # [py]
          type: numpy.ndarray # [py]
          description: |
            Name of the Body that is to be removed.

 
 
  ##############################################################################
  #  ███████ ██    ██ ███    ██  ██████ ████████ ██  ██████  ███    ██  ██████
  #  ██      ██    ██ ████   ██ ██         ██    ██ ██    ██ ████   ██ █
  #  █████   ██    ██ ██ ██  ██ ██         ██    ██ ██    ██ ██ ██  ██  █████
  #  ██      ██    ██ ██  ██ ██ ██         ██    ██ ██    ██ ██  ██ ██       █
  #  ██       ██████  ██   ████  ██████    ██    ██  ██████  ██   ████ ██████
  ##############################################################################

functions:

  - name: save_vehicle_mesh_to_file # [py]
    short_summary: "Function to save the mesh used for a hypersonic local inclination analysis to a file."
    extended_summary: |
      Function to save the mesh used for a hypersonic local inclination analysis to a file. This function saves 
      two files to the specified directory, with filenames: "ShapeFile.dat" and "SurfaceNormalFile.dat", where these
      files names may be prefixed by an optional string (see below). The first of these files contains four columns defining
      the surface points that define mesh, with Column 0: point index; Column 1: x-position of point; Column 1: y-position of point; 
      Column 2: z-position of point. The second file contains four columns with Column 0: point index; Column 1: x-component of surface normal; 
      Column 1: y-position of surface normal; Column 2: z-position of surface normal.

    parameters:

      - name: local_inclination_analysis_object # [py]
        type: HypersonicLocalInclinationAnalysis # [py]
        description: |
          Object used to calculate the aerodynamics of the vehicle

      - name: output_directory # [py]
        type: str # [py]
        description: |
          Directory to which the files are to be saved

      - name: output_file_prefix # [py]
        type: str, default='' # [py]
        description: |
          Optional prefix of output file names
