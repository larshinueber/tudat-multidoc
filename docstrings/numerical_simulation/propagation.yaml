summary : "Functionalities and utilities of propagation objects."

extended_summary: |
  This module provides functionalities for propagation settings
  objects. It also contains some utility functions that extract specific quantities from propagation settings and body
  objects. Note that the classes in this module are rarely created manually, 
  but are instead created by the functionality in the :ref:`\`\`propagation_setup\`\``  module. 

enums:
  - name: PropagationTerminationReason
    short_summary: "Enumeration of types of termination of propagation."

    members:
      - name: propagation_never_run
      - name: unknown_reason
      - name: termination_condition_reached
      - name: runtime_error_caught_in_propagation
      - name: nan_or_inf_detected_in_state

classes:

  #############################################

  - name: SimulationResults
    short_summary: "Base class for objects that store all results of a numerical propagation."
    extended_summary: |
       Base class for objects that store all results of a numerical propagation. Derived class are implemented for single-, multi- and hybrid-arc propagation of botj dynamics and variational equations
       
  - name: SingleArcSimulationResults
    short_summary: |
       Class that stores all the results (including logging data) of a single-arc propagation

    properties: # [py]
      - name: equationsOfMotionNumericalSolution_ # [cpp]
        type: std::map<double, Eigen::Matrix> # [cpp]
      - name: state_history # [py]
        type: dict[float, numpy.ndarray] # [py]
        readonly: Yes
        description: |
          Numerical solution of the equations of motion as key-value pairs. The key denotes the epoch. The value contains the
          numerically calculated state at this epoch. For this function, the states are always converted to so-called
          'processed' formulations (e.g. Cartesian states for translational dynamics), see `here <https://docs.tudat.space/en/latest/_src_user_guide/state_propagation/propagation_setup/processed_propagated_elements.html>`_
          for details. For the history of the states that were actually propagated, use the ``unprocessed_state_history``.

          .. note:: The propagated state at each epoch contains the state types in the following order: Translational ( **T** ), Rotational ( **R** ), Mass ( **M** ), and Custom ( **C** ).
                    When propagating two bodies, an example of what the output state would look like is for instance:
                    [ **T** Body 1, **T** Body 2, **R** Body 1, **R** Body 2, **M** Body 1, **M** Body 2 ] The specifics can be retrieved using the :attr:`state_ids` attribute of this class

          .. note:: For propagation of translational dynamics using cowell
                    propagator, the conventional and propagated
                    coordinates are identical.

      - name: equationsOfMotionNumericalSolutionRaw_ # [cpp]
        type: std::map<double, Eigen::Matrix> # [cpp]
      - name: unprocessed_state_history # [py]
        type: dict[float, numpy.ndarray] # [py]
        readonly: Yes
        description: |
          Numerical solution of the equations of motion as key-value pairs, without any processing applied. The key denotes the epoch. The value contains the
          numerically calculated state at this epoch. This attribute contains the states of the propagated bodies expressed in the
          "raw" form in which the propagation took place. For instance, when using a Gauss-Kepler propagation scheme, this
          attribute will contain the numerically propagated Keplerian elements at each time epoch

      - name: dependentVariableHistory_ # [cpp]
        type: std::map<double, Eigen::Vector> # [cpp]
      - name: dependent_variable_history # [py]
        type: dict[float, numpy.ndarray] # [py]
        readonly: Yes
        description: |
          Dependent variables computed during the propagation as key-value pairs.
          The vector of all dependent variables concatenated into a single vector as value, with the epoch as key.
          They order of the concatenated dependent variables in a single value is provided by the ``dependent_variable_ids`` attribute of this object. 


      - name: cumulativeComputationTimeHistory_ # [cpp]
        type: std::map<double, double> # [cpp]
      - name: cumulative_computation_time_history # [py]
        type: dict[float, float] # [py]
        readonly: Yes
        description: |
          History of cumulative computation time in seconds needed during the propagation as key-value
          pairs. At each epoch (key) the computation time (value) in seconds is the total computation time
          used up to and including that time step. This includes the total time up to and including the current time step,
          since the beginning of the (single-arc) propagation.

      - name: cumulativeNumberOfFunctionEvaluations_ # [cpp]
        type: std::map<double, int> # [cpp]
      - name: cumulative_number_of_function_evaluations # [py]
        type: dict[float, int] # [py]
        readonly: Yes
        description: |
          This function returns the history of cumulative number of function evaluations taken during the propagation as key-value
          pairs. At each epoch (key), the total number of computed function evaluations (value) are given up to and including that time step.
          This includes all function evaluations up to and including the current time step, since the beginning of the (single-arc) propagation.

      - name: termination_details # [py]
        type: PropagationTerminationDetails
        readonly: Yes
        description: |
          Object describing the details of the event that triggered the termination of the last propagation.

      - name: dependent_variable_ids # [py]
        type: dict[[int,int], str] # [py]
        readonly: Yes
        description: |
          Key-value container with the starting entry of the dependent variables saved (key), along with associated ID (value).

      - name: state_ids # [py]
        type: dict[[int,int] str] # [py]
        readonly: Yes
        description: |
          Key-value container with the starting entry of the states (key), along with associated ID (value).

      - name: integration_completed_successfully # [py]
        type: bool # [py]
        readonly: Yes
        description: |  # [py]
          Boolean defining whether the last propagation was finished
          successfully, as defined by the termination conditions, or if
          it was terminated prematurely (for instance due to an
          exception, or an Inf/NaN state entry being detected).

  #############################################

  - name: PropagationTerminationDetails
    short_summary: |
       Class that provides information on the reason for the
       termination of the propagation.

    properties: # [py]
      - name: termination_reason # [py]
        type: PropagationTerminationReason # [py]
        description: | # [py]
          Enum defining the reason the propagation was terminated

      - name: terminated_on_exact_condition # [py]
        type: bool # [py]
        description: | # [py]
          Boolean defining whether the propagation was terminated on an *exact* final condition,
          or once the propagation went *past* the determined final condition. The choice of behaviour is
          defined by the termination settings provided as input to the Simulator object. This variable only
          has a meaningful definition if the ``termination_reason`` has value ``termination_condition_reached``

  #############################################

  - name: PropagationTerminationDetailsFromHybridCondition
    short_summary: |
       Class that provides information on the reason for the termination of the propagation, for hybrid termination conditions
    extended_summary: |
       Derived class from :class:`PropagationTerminationDetails` that provides information on the reason for the termination of the propagation,
       for the case of hybrid termination conditions (defined using the :func:`~tudatpy.numerical_simulation.propagation_setup.propagator.hybrid_termination`)
       function

    properties: # [py]
      - name: was_condition_met_when_stopping # [py]
        type: list[bool] # [py]
        description: | # [py]
          List of booleans defining, per entry in ``termination_settings`` when calling :func:`~tudatpy.numerical_simulation.propagation_setup.propagator.hybrid_termination`,
          whether the corresponding entry of the hybrid termination settings was met or not



  #############################################

  - name: RotationalProperModeDampingResults
    short_summary: |
      Object that stores the results of the algorithm to damp the proper mode of rotational dynamics for an initial state,
      as computed by the :func:`~get_damped_proper_mode_initial_rotational_state` function

    properties: # [py]
      - name: damped_initial_state # [py]
        type: np.ndarray  # [py]
        description: | # [py]
          Initital state produced by the damping algorithm, for which the signature of the proper mode should be
          removed (or at least, substantially reduced). Note that this initial state corresponds to the *full* state vector
          that is provided to the ``get_damped_proper_mode_initial_rotational_state`` function (e.g. is size 7
          for rotational dynamics of a single body, size 13 for coupled orbital-rotational dynamics of a single body, etc.)

      - name: forward_backward_states # [py]
        type: list[tuple[dict[float,np.ndarray],dict[float,np.ndarray]]] # [py]
        description: | # [py]
          Data structure that contains the full state histories used by the damping algorithm. The contents are are as follows:
          
          * The :math:`i^{th}` entry of the list corresponds to the :math:`i^{th}` iteration of the forward-backward propagation
          * Each tuple in the list contains two dictionaries, the first one corresponding to the forward propagation results, the seconds one to the backward propagation results

      - name: forward_backward_dependent_variables # [py]
        type: list[tuple[dict[float,np.ndarray],dict[float,np.ndarray]]] # [py]
        description: | # [py]
          As ``forward_backward_states``, but for the dependent variables.

#############################################
functions:


  - name: getInitialStatesOfBodies # [cpp]
  - name: get_state_of_bodies # [py]
    short_summary: "Function to get the translational states of a set of bodies, with respect to some set of central bodies, at the requested time."

    extended_summary: |
      Function to get the translational states of a set of bodies, with respect to some set of central bodies, at the requested time. This function
      is typically used to extract an initial state for a propagation of a set of bodies, for which the initial state is extracted from the
      existing ephemerides of the bodies.

    parameters:
      - name: bodiesToIntegrate # [cpp]
        type: std::vector<std::string> # [cpp]
      - name: bodies_to_propagate # [py]
        type: list[str] # [py]
        description: List of names of bodies for which the state is to be extracted

      - name: centralBodies # [cpp]
        type: std::vector<std::string> # [cpp]
      - name: central_bodies # [py]
        type: list[str] # [py]
        description: List of central bodies, w.r.t. which the states are to be computed (in the same order as ``bodies_to_propagate``)

      - name: bodies # [cpp]
        type: SystemOfBodies # [cpp]
      - name: bodies_to_propagate # [py]
        type: SystemOfBodies # [py]
        description: System of bodies that define the environment

      - name: initialTime # [cpp]
        type: double # [cpp]
      - name: initial_time # [py]
        type: float # [py]
        description: Time at which the states are to be extracted from the environment

    returns:
        type: numpy.ndarray # [py]
        description: |
          Vector of size :math:`6\times N`, with the translational states of each entry of body from 
          ``bodies_to_propagate`` w.r.t. the corresponding central body in ``central_bodies``. 

  #############################################

  - name: get_damped_proper_mode_initial_rotational_state # [py]
    short_summary: "Function to compute an initial rotational state for which the proper mode of rotation is damped."

    extended_summary: |
      Function to compute an initial rotational state for which the proper mode of rotation is damped, using the algorithm 
      used by Rambaux et al. (2010) to compute an initial rotational state for Phobos. This algorithm propagates the
      dynamics of the system a number of times, with the settings specified by the user and a specific modification to
      damp the proper mode. Since a number of propagations are performed by this function, it may take some time to run.
      Specifically, the algorithm works as follows:
      
      * Introduce a damping torque (see below) to damp the proper mode, with damping time :math:`\tau_{d}`
      * Propagate the dynamics forward in time for a period of :math:`10\tau_{d}`
      * Remove the virtual torque, and propagate the dynamics back to the initial time :math:`t_{0}`
      * Repeat the above for the list of damping times provided by the user
      
      The state after the final backwards propagation to :math:`t_{0}` is provided as output by this function, to be
      used as damped initial state. The output from this function also provides the user access to the full state history
      and dependent variable history of the forward and backward propagations, to allow a user to track and validate
      the pgress of the algorithm.
      
      The damping torque :math:`\Gamma` is defined as follows:
      
      .. math::
         \boldsymbol{\Gamma}= -\frac{1}{\tau_{d}}\mathbf{I}\begin{pmatrix}\omega_{x}\\ \omega_{y}\\ \omega_{x}-\omega_{p} \end{pmatrix}
      
      where :math:\mathbf{I}` is the body's inertia tensor (in its body-fixed frame), :math:`\tau_{d}` the damping time of the
      current propagation, and :math:`\omega_{x}, \omega_{y}, \omega_{z}` the body's current rotation about its
      body-fixed, x-, y- and z-axes, respectively. The damping torque is implemented to damp out all rotations along 
      the body-fixed x- and y-axes, and any deviations from constant rotation with frequency :\omega_{p}: about the body-fixed z-axis. 
      
      .. note:: The mean rotation rate of the body :math:`\omega_{p}` is a user-defined input, and must be tuned to the dynamics of the system.

    parameters:
      - name: bodies # [py]
        type: SystemOfBodies # [py]
        description: Set of body objects that defines the environment

      - name: propagator_settings # [py]
        type: SingleArcPropagatorSettings # [py]
        description: |
          Propagator settings for the dynamics of which the initial rotational state is to be damped. These propagator
          settings must be for rotational dynamics only, or for multi-type rotational dynamics that contains rotational
          dynamics for a single body (e.g. translational-rotational dynamics for a single body)

      - name: body_mean_rotational_rate # [py]
        type: float # [py]
        description: Mean rotational rate :math:`\omega_{p}` to which the damping algorithm will force the body-fixed rotation about its z-axis.

      - name: dissipation_times # [py]
        type: list[ float ] # [py]
        description: List of damping times :math:`\tau_{d}` for which the algorithm is to be run. Note that this list should be organized in ascending order for the algorithm to perform properly

      - name: propagate_undamped # [py]
        type: bool, default = True # [py]
        description: |
          Boolean defining whether the first forward/backward propagation performed by the damping algorithm has damping turned off (damping turned off if True, damping turned on if False).
          Propagating without any damping before starting the damping algorithm is useful for verification purposes, but not required for the algorithm itself.

    returns:
      type: DampedInitialRotationalStateResults # [py]
      description: Object that contains the results of the damping algorithm (final damped rotational state, and forward/backward propagation results).

#############################################

  # Free function
  - name: createCombinedInitialState # [cpp]
  - name: combine_initial_states # [py]
    short_summary: "Function to retrieve the initial state for a list of propagator settings."
    extended_summary: |
      Function to retrieve the initial state for a list of propagator settings. This way, the initial state for
      different quantities to be propagated (e.g., translational state, rotational state, mass) are retrieved and
      organized in a single container.

    parameters:
      - name: propagatorSettingsList # [cpp]
        type: map # [cpp]
      - name: propagator_settings_per_type # [py]
        type: dict # [py]
        description: Propagator settings where the type of propagation is reported as key and the respective list of propagator settings as value.

    returns:
        type: Eigen::Matrix # [cpp]
        type: numpy.ndarray # [py]
        description: Vector of initial states, sorted in order of IntegratedStateType, and then in the order of the vector of SingleArcPropagatorSettings of given type.



      
