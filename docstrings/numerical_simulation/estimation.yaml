extended_summary: |
  This module contains the functionality for managing the inputs and outputs of an estimation.

#########################################################################
#  ███████ ███   ██ ██    ██ ███    ███  ██████
#  ██      ████  ██ ██    ██ ████  ████ █
#  █████   ██ ██ ██ ██    ██ ██ ████ ██  █████
#  ██      ██  ████ ██    ██ ██  ██  ██       █
#  ███████ ██    ██  ██████  ██      ██ ██████
#########################################################################

# no enums


#########################################################################
#   ██████ ██          ██      ██████  ██████ ███████  ██████
#  ██      ██         ████    █       █       ██      █
#  ██      ██        ██  ██    █████   █████  █████    █████
#  ██      ██       ████████        █       █ ██            █
#   ██████ ███████ ██      ██ ██████  ██████  ███████ ██████
#########################################################################


classes:

  #################        PARAMETERS       ################################

  - name: EstimatableParameterSet
    short_summary: "Class containing a consolidated set of estimatable parameters."
    extended_summary: |
      Class containing a consolidated set of estimatable parameters, linked to the environment and acceleration settings of the simulation.
      The user typically creates instances of this class via the :func:`~tudatpy.numerical_simulation.estimation_setup.create_parameters_to_estimate` factory function.

    properties: # [py]

      - name: parameter_set_size # [py]
        type: int # [py]
        description: Size of the parameter set, i.e. amount of estimatable parameters contained in the set. # [py]
        readonly: True # [py]

      - name: initial_states_size # [py]
        type: int # [py]
        description: Amount of initial state parameters contained in the set. # [py]
        readonly: True # [py]

      - name: initial_single_arc_states_size # [py]
        type: int # [py]
        description: Amount of initial state parameters in the set, which are treated in a single-arc fashion.  # [py]
        readonly: True # [py]

      - name: initial_multi_arc_states_size # [py]
        type: int # [py]
        description: Amount of initial state parameters in the set, which are treated in a multi-arc fashion.  # [py]
        readonly: True # [py]

      - name: constraints_size # [py]
        type: int # [py]
        description: Total size of linear constraint that is to be applied during estimation.  # [py] (%!)
        readonly: True # [py]

      - name: parameter_vector # [py]
        type: numpy.ndarray[numpy.float64[m, 1]] # [py]
        description: Vector containing the parameter values of all parameters in the set. # [py]
        readonly: False # [py]


    methods:

      - name: ctor   # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of the `EstimatableParameterSet` class should be created through the `createParametersToEstimate` factory function." # [cpp]

      - name: indices_for_parameter_type # [py] (%!) help with this function
        short_summary: "Function to retrieve the indices of a given type of parameter." # [py]
        extended_summary: | # [py]
          Function to retrieve the index of all parameters of a given type from the parameter set.
          This function can be very useful, since the order of parameters within the parameter set does not necessarily correspond to the order in which the elements were added to the set.

        parameters: # [py]
        - name: parameter_type # [py] (%!)
          type: Tuple[ :class:`~tudatpy.numerical_simulation.estimation_setup.parameter.EstimatableParameterTypes`, Tuple[str, str] ] # [py]
          description: help  # [py]

        returns: # [py]
          type: List[ Tuple[int, int] ] # [py]
          description: help  # [py]


  #################        OBSERVATION       ################################

  - name: ObservationViabilityCalculator
    short_summary: "Template class for observation viability calculators."
    extended_summary: |
      Template class for classes which conducts viability calculations on simulated observations.
      Instances of the applicable ObservationViabilityCalculators are automatically created from the given :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` objects during the simulation of observations (:func:`~tudatpy.numerical_simulation.estimation.simulate_observations`).
      The user typically does not interact directly with this class.

    methods:
      - name: is_observation_viable
        short_summary: Function to check whether an observation is viable.
        extended_summary: |
          Function to check whether an observation is viable.
          The calculation is performed based on the given times and link end states.
          Note, that this function is called automatically during the simulation of observations.
          Direct calls to this function are generally not required.

        parameters:

        - name: link_end_states
          type: List[ numpy.ndarray[numpy.float64[6, 1]] ]
          description: Vector of states of the link ends involved in the observation.

        - name: link_end_times
          type: List[float]
          description: Vector of times at the link ends involved in the observation.

        returns:
          type: bool
          description: True if observation is viable, false if not.

  - name: ObservationViabilityCalculator_1
    short_summary: "Class which conducts viability calculations on simulated observations of size 1."
    extended_summary: |
      Class which conducts viability calculations on simulated observations of size 1, e.g. Doppler or range observations.
      Instances of the applicable ObservationViabilityCalculators are automatically created from the given :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` objects during the simulation of observations (:func:`~tudatpy.numerical_simulation.estimation.simulate_observations`).
      The user typically does not interact directly with this class.

  - name: ObservationViabilityCalculator_2
    short_summary: "Class which conducts viability calculations on simulated observations."
    extended_summary: |
      Class which conducts viability calculations on simulated observations of size 2, e.g. angular position observations.
      Instances of the applicable ObservationViabilityCalculators are automatically created from the given :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` objects during the simulation of observations (:func:`~tudatpy.numerical_simulation.estimation.simulate_observations`).
      The user typically does not interact directly with this class.

  - name: ObservationViabilityCalculator_3
    short_summary: "Class which conducts viability calculations on simulated observations."
    extended_summary: |
      Class which conducts viability calculations on simulated observations of size 3, e.g. Euler angle observations
      Instances of the applicable ObservationViabilityCalculators are automatically created from the given :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` objects during the simulation of observations (:func:`~tudatpy.numerical_simulation.estimation.simulate_observations`).
      The user typically does not interact directly with this class.

  - name: ObservationViabilityCalculator_6
    short_summary: "Class which conducts viability calculations on simulated observations."
    extended_summary: |
      Class which conducts viability calculations on simulated observations of size 6, e.g. (pseudo-) observations of the full cartesian state.
      Instances of the applicable ObservationViabilityCalculators are automatically created from the given :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` objects during the simulation of observations (:func:`~tudatpy.numerical_simulation.estimation.simulate_observations`).
      The user typically does not interact directly with this class.




  ##############################################################################

  - name: ObservationSimulator # (%!) help: how to document the 1, 2, 3, 6 extensions
    short_summary: "Class hosting the functionality for simulating observations."
    extended_summary: |
      Class hosting the functionality for simulating a given observable over a defined link geometry.
      Instances of this class are automatically created from the given :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSettings` objects upon instantiation of the :class:`~tudatpy.numerical_simulation.Estimator` class.

  ##############################################################################

  - name: ObservationCollection
    short_summary: "Class collecting all observations and associated data for use in an estimation."
    extended_summary: |
      Class containing the full set of observations and associated data, typically for input into the estimation. When using simulated data,
      this class is instantiated via a call to the :func:`~tudatpy.numerical_simulation.estimation.simulate_observations` function. More information is provided
      on the `user guide <https://docs.tudat.space/en/stable/_src_user_guide/state_estimation/observation_simulation.html#accessing-and-analyzing-the-observations>`_

    methods: # [py]

      - name: get_single_link_and_type_observations # [py]
        short_summary: Function to get all observation sets for a given observable type and link definition.

        parameters:
        - name: observable_type # [py]
          type: :class:`ObservableType` # [py]
          description: Observable type of which observations are to be simulated.

        - name: link_ends # [py]
          type: LinkDefinition # [py]
          description: Link ends for which observations are to be simulated.

        returns:
          type: list[ SingleObservationSet ]
          description: List of observation sets for given observable type and link definition.

    properties: # [py]

      - name: concatenated_times # [py]
        type: numpy.ndarray[numpy.float64[m, 1]] # [py]
        description: Vector containing concatenated observation times. See `user guide <https://docs.tudat.space/en/stable/_src_user_guide/state_estimation/observation_simulation.html#accessing-and-analyzing-the-observations>`_ for details on storage order # [py]
        readonly: True # [py]

      - name: concatenated_observations # [py]
        type: numpy.ndarray[numpy.float64[m, 1]] # [py]
        description: Vector containing concatenated observable values. See `user guide <https://docs.tudat.space/en/stable/_src_user_guide/state_estimation/observation_simulation.html#accessing-and-analyzing-the-observations>`_ for details on storage order # [py]
        readonly: True # [py]

      - name: concatenated_link_definition_ids # [py]
        type: numpy.ndarray[ int ] # [py]
        description: Vector containing concatenated indices identifying the link ends. Each set of link ends is assigned a unique 
          integer identifier (for a given instance of this class). The definition of a given integer identifier with the link ends is given by
          this class' :func:`link_definition_ids` function. See `user guide <https://docs.tudat.space/en/stable/_src_user_guide/state_estimation/observation_simulation.html#accessing-and-analyzing-the-observations>`_ for details on storage order of the present vector. # [py]
        readonly: True # [py]	

      - name: link_definition_ids # [py]
        type: dict[ int, dict[ LinkEndType, LinkEndId ] ] # [py]
        description: Dictionaty mapping a link end integer identifier to the specific link ends # [py]
        readonly: True # [py]	

      - name: observable_type_start_index_and_size # [py]
        type: dict[ ObservableType, [ int, int ] ] # [py]
        description: Dictionary defining per obervable type (dict key), the index in the full observation vector (:func:`concatenated_observations`) where the given observable
          type starts, and the number of subsequent entries in this vector containing a value of an observable of this type   # [py]
        readonly: True # [py]	

      - name: observation_set_start_index_and_size # [py]
        type: dict[ ObservableType, dict[ int, list[ int, int ] ] ] # [py]
        description: The nested dictionary/list
          returned by this property mirrors the structure of the :func:`sorted_observation_sets` property of this class. The present function provides the start index and size of
          the observables in the full observation vector that come from the correspoding `SingleObservationSet` in the :func:`sorted_observation_sets` 
          Consequently, the present property returns a nested dictionary defining per obervable type, link end identifier, and `SingleObservationSet` index 
          (for the given observable type and link end identifier),
          where the observables in the given `SingleObservationSet` starts, and the number of subsequent entries in this vector containing data from it.   # [py]
        readonly: True # [py]	

      - name: sorted_observation_sets # [py]
        type: dict[ ObservableType, dict[ int, list[ SingleObservationSet ] ] ] # [py]
        description: The nested dictionary/list contains the list of `SingleObservationSet` objects, in the same method as they are stored internally in the present
          class. Specifics on the storage order are given in the `user guide <https://docs.tudat.space/en/stable/_src_user_guide/state_estimation/observation_simulation.html#accessing-and-analyzing-the-observations>`_  # [py]
        readonly: True # [py]	

      - name: observation_vector_size # [py]
        type: int # [py]
        description:  Length of the total vector of observations # [py]
        readonly: True # [py]	


  ##############################################################################

  - name: SingleObservationSet
    short_summary: "Class collecting a single set of observations and associated data, of a given observable type, link ends, and ancilliary data."

    properties: # [py]

      - name: observable_type # [py]
        type: ObservableType # [py]
        description: Type of observable for which the object stores observations # [py]
        readonly: True # [py]

      - name: link_definition # [py]
        type: LinkDefinition # [py]
        description: Definition of the link ends for which the object stores observations   # [py]
        readonly: True # [py]

      - name: reference_link_end # [py]
        type: LinkEndType # [py]
        description: Reference link end for all stored observations   # [py]
        readonly: True # [py]

      - name: ancilliary_settings # [py]
        type: ObservationAncilliarySimulationSettings # [py]
        description: Ancilliary settings all stored observations   # [py]
        readonly: True # [py]

      - name: concatenated_observations # [py]
        type: numpy.ndarray[numpy.float64[m, 1]]  # [py]
        description: Concatenated vector of all stored observations   # [py]
        readonly: True # [py]

      - name: list_of_observations # [py]
        type: list[ numpy.ndarray[numpy.float64[m, 1]] ]  # [py]
        description: List of separate stored observations. Each entry of this list is a vector containing a single observation. In cases where the observation 
          is single-valued (range, Doppler), the vector is size 1, but for multi-valued observations such as angular position, each vector in the list will have size >1  # [py]
        readonly: True # [py]

      - name: observation_times # [py]
        type: list[ float]  # [py]
        description: Reference time for each of the observations in ``list_of_observations``   # [py]
        readonly: True # [py]

      - name: observations_history # [py]
        type: dict[ float, numpy.ndarray[numpy.float64[m, 1]] ]  # [py]
        description: Dictionary of observations sorted by time. Created by making a dictionaty with ``observation_times`` as keys and  ``list_of_observations`` as values  # [py]
        readonly: True # [py]

  ################# VARIATIONAL EQUATIONS ######################################

  - name: CombinedStateTransitionAndSensitivityMatrixInterface
    short_summary: "Class establishing an interface with the simulation's State Transition and Sensitivity Matrices."
    extended_summary: |
      Class establishing an interface to the State Transition and Sensitivity Matrices.
      Instances of this class are instantiated automatically upon creation of :class:`~tudatpy.numerical_simulation.Estimator` objects,
      using the simulation information in the observation, propagation and integration settings that the :class:`~tudatpy.numerical_simulation.Estimator` instance is linked to.

    properties: # [py]

      - name: state_transition_size # [py]
        type: int # [py]
        description: Size of the (square) state transition matrix.  # [py]
        readonly: True # [py]

      - name: sensitivity_size # [py]
        type: int # [py]
        description: Number of columns in the sensitivity matrix. # [py]
        readonly: True # [py]

      - name: full_parameter_size # [py]
        type: int # [py]
        description: Full amount of parameters w.r.t. which partials have been set up via State Transition and Sensitivity Matrices. # [py]
        readonly: True # [py]

    methods: # [py]

      - name: state_transition_sensitivity_at_epoch # [py]
        short_summary: Function to get the concatenated state transition and sensitivity matrix at a given time.
        extended_summary: |
          Function to get the concatenated state transition and sensitivity matrix at a given time.
          Entries corresponding to parameters which are not active at the current arc are omitted.

        parameters:
        - name: time
          type: float
          description: Time at which concatenated state transition and sensitivity matrix are to be retrieved.

        returns:
          type: numpy.ndarray[numpy.float64[m, n]]
          description: Concatenated state transition and sensitivity matrix at a given time.


      - name: full_state_transition_sensitivity_at_epoch # [py]
        short summary: Function to get the full concatenated state transition and sensitivity matrix at a given time.
        extended summary: |
          Function to get the full concatenated state transition and sensitivity matrix at a given time.
          Entries corresponding to parameters which are not active at the current arc are included in the returned matrix,
          having a value of zero.

        parameters:
        - name: time                                              
          type: float                                         
          description: Time at which full concatenated state transition and sensitivity matrix are to be retrieved.   # [py]

        returns:
          type: numpy.ndarray[numpy.float64[m, n]]
          description: Full concatenated state transition and sensitivity matrix at a given time.


  ################# ESTIMATION ######################################

  - name: EstimationConvergenceChecker
    short_summary: "Class defining the convergence criteria for an estimation."
    extended_summary: |
      Class defining the convergence criteria for an estimation.
      The user typically creates instances of this class via the :func:`~tudatpy.numerical_simulation.estimation.estimation_convergence_checker` factory function.

    methods: # [cpp]
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: The user typically does not use the constructor, but creates instances of this class via the `createEstimationConvergenceChecker` factory function. # [cpp]


  ##############################################################################

  - name: CovarianceAnalysisInput
    short_summary: Class for defining all specific inputs to a covariance analysis.
    extensive_summary: |
      Class for defining all specific inputs required to conduct a covariance analysis, after the :class:`~tudatpy.numerical_simulation.Estimator` has been created.
      This includes foremost the simulated observations, as well as possible a priori information about the estimatable parameters.
    autoclass: # See https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html#directive-autoclass
       special_members: __init__

    methods:
      - name: ctor
        short_summary: "Class constructor."
        extended_summary: |
          Constructor through which the user can create instances of this class. Note that the weight are all initiated as 1.0, and the default settings of ``define_covariance_settings`` are used.

        parameters:

        - name: observations_and_times              # [py]
          type: ObservationCollection               # [py]
          description: "Total data structure of observations and associated times/link ends/type/etc."             # [py]

        - name: inverse_apriori_covariance              # [py]
          type: numpy.ndarray[numpy.float64[m, n]], default = [ ]           # [py]
          description: A priori covariance matrix (unnormalized) of estimated parameters. This should be either a size 0x0 matrix (no a priori information), or a square matrix
            with the same size as the number of parameters that are considered # [py]

        returns:
          type: :class:`~tudatpy.numerical_simulation.estimation.CovarianceAnalysisInput`
          description: Instance of the :class:`~tudatpy.numerical_simulation.estimation.CovarianceAnalysisInput` class, defining the data and other settings to be used for the covariance analysis.


      - name: set_constant_weight # [py]
        short_summary: Function to set a constant weight matrix for all observables.
        extended_summary: |
          Function to set a constant weight matrix for all observables.
          The weights are applied to all observations managed by the given PodInput object.

        parameters:
        - name: constant_weight
          type: float
          description: Constant weight factor that is to be applied to all observations.

        returns:
          type: None
          description: Function modifies the object in-place.


      - name: set_constant_weight_per_observable # [py]
        short_summary: Function to set a constant weight matrix for a given type of observable.
        extended_summary: |
          Function to set a constant weight matrix for a given type of observable.
          The weights are applied to all observations of the observable type specified by the `weight_per_observable` parameter.

        parameters:
        - name: constant_weight
          type: Dict[ :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservableType`, float ]
          description: Constant weight factor that is to be applied to all observations.

        returns:
          type: None
          description: Function modifies the object in-place.

      - name: define_covariance_settings # [py]
        short_summary: Function to define specific settings for covariance analysis process
        extended_summary: |
          Function to define specific settings for covariance analysis process

        parameters:
        - name: reintegrate_equations
          type: bool, default = True
          description: |
            Boolean denoting whether the dynamics and variational equations are to be reintegrated
            or if existing values are to be used to perform first iteration.

        - name: reintegrate_variational_equations
          type: bool, default = True
          description: |
            Boolean denoting whether the variational equations are to be reintegrated during estimation 
            (if this is set to False, and ``reintegrate_equations`` to true, only the dynamics are re-integrated)

        - name: save_design_matrix
          type: bool, default = True
          description: |
            Boolean denoting whether to save the partials matrix (also called design matrix) :math:`\mathbf{H}` in the output. Setting this to false makes the
            :math:`\mathbf{H}` matrix unavailable to the user, with the advantage of lower RAM usage.

        - name: print_output_to_terminal
          type: bool, default = True
          description: |
            Boolean denoting whether to print covariance-analysis-specific output to the terminal when running the estimation.

        returns:
          type: None
          description: Function modifies the object in-place.


    properties: # [py]
      - name: weight_matrix_diagonal # [py]
        type: numpy.ndarray[numpy.float64[n, 1]] # [py]
        description: Complete diagonal of the weights matrix that is to be used # [py]
        readonly: True # [py]

  ##############################################################################

  - name: EstimationInput
    short_summary: Class for defining all inputs to the estimation.
    extensive_summary: |
      Class for defining all inputs required to conduct an estimation, after the :class:`~tudatpy.numerical_simulation.Estimator` has been created.
      This class is derived from :class:`~tudatpy.numerical_simulation.estimation.CovarianceAnalysisInput` class, and includes settings on the iteration
      and convergence, in addition to those for the covariance analysis
    autoclass: # See https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html#directive-autoclass
       special_members: __init__


    methods:
      - name: ctor
        short_summary: "Class constructor."
        extended_summary: |
          Constructor through which the user can create instances of this class.

        parameters:

        - name: observations_and_times              # [py]
          type: ObservationCollection               # [py]
          description: "Total data structure of observations and associated times/link ends/type/etc."             # [py]

        - name: inverse_apriori_covariance              # [py]
          type: numpy.ndarray[numpy.float64[m, n]], default = [ ]           # [py]
          description: A priori covariance matrix (unnormalized) of estimated parameters. This should be either a size 0x0 matrix (no a priori information), or a square matrix
            with the same size as the number of parameters that are considered # [py]

        - name: convergence_checker              # [py]
          type: :class:`~tudatpy.numerical_simulation.estimation.EstimationConvergenceChecker`, default = :func:`~tudatpy.numerical_simulation.estimation.estimation_convergence_checker` # [py]
          description: "Object defining when the estimation is converged."        # [py]

        returns:
          type: :class:`~tudatpy.numerical_simulation.estimation.EstimationInput`
          description: Instance of the :class:`~tudatpy.numerical_simulation.estimation.EstimationInput` class, defining the data and other settings to be used for the estimation.

      - name: define_estimation_settings # [py]
        short_summary: Function to define specific settings for the estimation process
        extended_summary: |
          Function to define specific settings for covariance analysis process

        parameters:
        - name: reintegrate_equations_on_first_iteration
          type: bool, default = True
          description: |
            Boolean denoting whether the dynamics and variational equations are to be reintegrated
            or if existing values are to be used to perform first iteration.

        - name: reintegrate_variational_equations
          type: bool, default = True
          description: |
            Boolean denoting whether the variational equations are to be reintegrated during estimation 
            (if this is set to False, and ``reintegrate_equations_on_first_iteration`` to true, only the dynamics are re-integrated)

        - name: save_design_matrix
          type: bool, default = True
          description: |
            Boolean denoting whether to save the partials matrix (also called design matrix) :math:`\mathbf{H}` in the output. Setting this to false makes the
            :math:`\mathbf{H}` matrix unavailable to the user, with the advantage of lower RAM usage.

        - name: print_output_to_terminal
          type: bool, default = True
          description: |
            Boolean denoting whether to print covariance-analysis-specific output to the terminal when running the estimation.
       
        - name: save_residuals_and_parameters_per_iteration
          type: bool, default = True
          description: |
            Boolean denoting whether the residuals and parameters from the each iteration are to be saved.

        - name: save_state_history_per_iteration
          type: bool, default = False
          description: |
            Boolean denoting whether the state history and dependent variables are to be saved on each iteration.

        returns:
          type: None
          description: Function modifies the object in-place.


  ##############################################################################

  - name: CovarianceAnalysisOutput
    short_summary: Class collecting all outputs from the covariance analysis process.
    extensive_summary: |
      Class collecting all outputs from the covariance analysi process.
      Instances of this class are typically created by calling the `compute_covariance` member function of the :class:`~tudatpy.numerical_simulation.Estimator` class.
      Many members of this class can be retrieved in normalized or unnormalized form. See  `user guide <https://docs.tudat.space/en/stable/_src_user_guide/state_estimation/runningEstimation.html#normalization>`_ for details.

    properties:

      - name: inverse_covariance
        type: numpy.ndarray[numpy.float64[m, m]]
        description: (Unnormalized) inverse estimation covariance matrix :math:`\mathbf{P}^{-1}`.
        readonly: True

      - name: covariance
        type: numpy.ndarray[numpy.float64[m, m]]
        description: (Unnormalized) estimation covariance matrix :math:`\mathbf{P}`.
        readonly: True

      - name: inverse_normalized_covariance
        type: numpy.ndarray[numpy.float64[m, m]]
        description: Normalized inverse estimation covariance matrix :math:`\mathbf{\tilde{P}}^{-1}`.
        readonly: True

      - name: normalized_covariance
        type: numpy.ndarray[numpy.float64[m, m]]
        description: Normalized estimation covariance matrix :math:`\mathbf{\tilde{P}}`.
        readonly: True

      - name: formal_errors
        type: numpy.ndarray[numpy.float64[m, 1]]s
        description: Formal error vector :math:`\boldsymbol{\sigma}` of the estimation result (e.g. square root of diagonal entries of covariance)s
        readonly: True

      - name: correlations
        type: numpy.ndarray[numpy.float64[m, m]]
        description: Correlation matrix of the estimation result. Entry :math:`i,j` is equal to :math:`P_{i,j}/(\sigma_{i}\sigma_{j})`
        readonly: True

      - name: design_matrix
        type: numpy.ndarray[numpy.float64[m, n]]
        description: Matrix of unnormalized partial derivatives :math:`\mathbf{H}=\frac{\partial\mathbf{h}}{\partial\mathbf{p}}`.
        readonly: True

      - name: normalized_design_matrix
        type: numpy.ndarray[numpy.float64[m, n]]
        description: Matrix of normalized partial derivatives :math:`\tilde{\mathbf{H}}`.
        readonly: True

      - name: weighted_design_matrix
        type: numpy.ndarray[numpy.float64[m, n]]
        description: Matrix of weighted partial derivatives, equal to :math:`\mathbf{W}^{1/2}{\mathbf{H}}`
        readonly: True

      - name: weighted_normalized_design_matrix
        type: numpy.ndarray[numpy.float64[m, n]]
        description: Matrix of weighted, normalized partial derivatives, equal to :math:`\mathbf{W}^{1/2}\tilde{\mathbf{H}}`
        readonly: True

      - name: normalization_terms
        type: numpy.ndarray[numpy.float64[m, 1]]
        description: Vector of normalization terms used for covariance and design matrix
        readonly: True


  ##############################################################################

  - name: EstimationOutput
    short_summary: Class collecting all outputs from the iterative estimation process.
    extensive_summary: |
      Class collecting all outputs from the iterative estimation process.
      Instances of this class are typically created by calling the `perform_estimation` member function of the :class:`~tudatpy.numerical_simulation.Estimator` class.
      This class is derived from :class:`~tudatpy.numerical_simulation.estimation.CovarianceAnalysisOutput` class, and includes all members from that class.


    properties:
      - name: residual_history
        type: numpy.ndarray[numpy.float64[m, n]]
        description: Residual vectors, concatenated per iteration into a matrix; the :math:`i^{th}` column has the residuals from the :math:`i^{th}` iteration.
        readonly: True

      - name: parameter_history
        type: numpy.ndarray[numpy.float64[m, n]]
        description: Parameter vectors, concatenated per iteration into a matrix. Column 0 contains pre-estimation values. The :math:`(i+1)^{th}` column has the residuals from the :math:`i^{th}` iteration.
        readonly: True

      - name: simulation_results_per_iteration
        type: list[SimulationResults]
        description: List of complete numerical propagation results, with the :math:`i^{th}` entry of thee list thee results of the :math:`i^{th}` propagation 
        readonly: True


      - name: final_residuals
        type: numpy.ndarray[numpy.float64[m, 1]]
        description: Vector of post-fit observation residuals, for the iteration with the lowest rms residuals.
        readonly: True


  ##############################################################################
  #  ███████ ██    ██ ███    ██  ██████ ████████ ██  ██████  ███    ██  ██████
  #  ██      ██    ██ ████   ██ ██         ██    ██ ██    ██ ████   ██ █
  #  █████   ██    ██ ██ ██  ██ ██         ██    ██ ██    ██ ██ ██  ██  █████
  #  ██      ██    ██ ██  ██ ██ ██         ██    ██ ██    ██ ██  ██ ██       █
  #  ██       ██████  ██   ████  ██████    ██    ██  ██████  ██   ████ ██████
  ##############################################################################

functions:

  #################        OBSERVATIONS       ################################

  - name: simulate_observations # [py]
    short_summary: "Function to simulate observations."
    extended_summary: |
      Function to simulate observations from set observation simulators and observation simulator settings.
      Automatically iterates over all provided observation simulators, generating the full set of simulated observations.

    parameters:

      - name: observation_to_simulate # [py]
        type: List[ :class:`ObservationSimulationSettings` ] # [py]
        description: |
          List of settings objects, each object providing the observation time settings for simulating one type of observable and link end set.

      - name: observation_simulators # [py]
        type: List[ :class:`~tudatpy.numerical_simulation.estimation.ObservationSimulator` ] # [py]
        description: |
          List of :class:`~tudatpy.numerical_simulation.estimation.ObservationSimulator` objects, each object hosting the functionality for simulating one type of observable and link end set.

      - name: bodies # [py]
        type: :class:`~tudatpy.numerical_simulation.environment.SystemOfBodies` # [py]
        description: |
          Object consolidating all bodies and environment models, including ground station models, that constitute the physical environment.

    returns:
      type: :class:`~tudatpy.numerical_simulation.estimation.ObservationCollection`  # [py]
      description: Object collecting all products of the observation simulation.

  - name: compute_target_angles_and_range # [py]
    short_summary: "Function to compute the azimuth angle, elevation angle and range at a ground station."
    extended_summary: |
      Function to compute the azimuth angle, elevation angle and range at a ground station. This functions is provided as a function of
      convenience, to prevent users having to manually define the relevant settings for this often-needed functionality. This function
      takes an observing station and a target body as input, and provides the observed angles and current range (without correction for aberrations, with correction for light time)
      as observed at that station   

    parameters:

      - name: bodies # [py]
        type: SystemOfBodies # [py]
        description: |
         System of bodies that defines the full physical environment

      - name: station_id # [py]
        type: tuple[ str, str] # [py]
        description: |
          Identifier for the observing station, as a pair of strings: the body name and the station name.

      - name: target_body # [py]
        type: str # [py]
        description: |
          Name of body which is observed by ground station

      - name: observation_times # [py]
        type: list[float] # [py]
        description: |
          List of times at which the ground station observations are to be analyzed

      - name: is_station_transmitting # [py]
        type: Bool # [py]
        description: |
          Boolean defining whether the observation times define times at which the station is transmitting to, or receiving from, the ground station. 
          This has an impact on the whether the light-time is computed forward or backward in time from the ground station to the target

    returns:
      type: dict[float,numpy.ndarray[numpy.float64[3, 1]]]  # [py]
      description: 
        Dictionary with the required output. Key defines the observation time, the value is an array of size three containing 
        entry 0 - elevation angle, entry 1 - azimuth angle, entry 2 - range


  #################        COVARIANCES       ################################

  - name: propagate_covariance # [py]
    short_summary: "Function to propagate system covariance through time."
    extended_summary: |
      Function to propagate the covariance of a given system through time.
      The system dynamics and numerical settings of the propagation are prescribed by the `state_transition_interface` parameter.

    parameters:

      - name: initial_covariance # [py]
        type: numpy.ndarray[numpy.float64[m, n]] # [py]
        description: |
          System covariance matrix (symmetric and positive semi-definite) at initial time.
          Dimensions have to be consistent with estimatable parameters in the system (specified by `state_transition_interface`)

      - name: state_transition_interface # [py]
        type: :class:`~tudatpy.numerical_simulation.estimation.CombinedStateTransitionAndSensitivityMatrixInterface` # [py]
        description: |
          Interface to the variational equations of the system dynamics, handling the propagation of the covariance matrix through time.

      - name: output_times # [py]
        type: List[ float ] # [py]
        description: |
          Times at which the propagated covariance matrix shall be reported.
          Note that this argument has no impact on the integration time-steps of the covariance propagation,
          which always adheres to the integrator settings that the `state_transition_interface` links to.
          Output times which do not coincide with integration time steps are calculated via interpolation.

    returns:
      type: Dict[ float, numpy.ndarray[numpy.float64[m, n]] ]  # [py]
      description: Dictionary reporting the propagated covariances at each output time.

  ##############################################################################

  - name: propagate_formal_errors # [py]
    short_summary: "Function to propagate system formal errors through time."
    extended_summary: |
      Function to propagate the formal errors of a given system through time.
      Note that in practice the entire covariance matrix is propagated, but only the formal errors (variances) are reported at the output times.
      The system dynamics and numerical settings of the propagation are prescribed by the `state_transition_interface` parameter.

    parameters:

      - name: initial_covariance # [py]
        type: numpy.ndarray[numpy.float64[m, n]] # [py]
        description: |
          System covariance matrix (symmetric and positive semi-definite) at initial time.
          Dimensions have to be consistent with estimatable parameters in the system (specified by `state_transition_interface`)

      - name: state_transition_interface # [py]
        type: :class:`~tudatpy.numerical_simulation.estimation.CombinedStateTransitionAndSensitivityMatrixInterface` # [py]
        description: |
          Interface to the variational equations of the system dynamics, handling the propagation of the covariance matrix through time.

      - name: output_times # [py]
        type: List[ float ] # [py]
        description: |
          Times at which the propagated covariance matrix shall be reported.
          Note that this argument has no impact on the integration time-steps of the covariance propagation,
          which always adheres to the integrator settings that the `state_transition_interface` links to.
          Output times which do not coincide with integration time steps are calculated via interpolation.

    returns:
      type: Dict[ float, numpy.ndarray[numpy.float64[m, 1]] ]  # [py]
      description: Dictionary reporting the propagated formal errors at each output time.


  ################# ESTIMATION ######################################

  - name: estimation_convergence_checker # [py]
    short_summary: Function for creating an :class:`~tudatpy.numerical_simulation.estimation.EstimationConvergenceChecker` object.
    extended_summary: |
      Function for creating an :class:`~tudatpy.numerical_simulation.estimation.EstimationConvergenceChecker` object, which is required for defining the convergence criteria of an estimation.

    parameters:

      - name: maximum_iterations              # [py]
        type: int, default = 5                # [py]
        description: "Maximum number of allowed iterations for estimation."             # [py]

      - name: minimum_residual_change             # [py]
        type: float, default = 0.0                # [py]
        description: "Minimum required change in residual between two iterations."              # [py]

      - name: minimum_residual                  # [py]
        type: float, default = 0.0              # [py]
        description: "Minimum value of observation residual below which estimation is converged."             # [py]

      - name: number_of_iterations_without_improvement              # [py]
        type: int, default = 2                                    # [py]
        description: "Number of iterations without reduction of residual."              # [py]

    returns:
        type: :class:`~tudatpy.numerical_simulation.estimation.EstimationConvergenceChecker`
        description: Instance of the :class:`~tudatpy.numerical_simulation.estimation.EstimationConvergenceChecker` class, defining the convergence criteria for an estimation.

