#########################################################################
#    ███    ███  ██████  ██████  ██    ██ ██      ███████
#    ████  ████ ██    ██ ██   ██ ██    ██ ██      ██
#    ██ ████ ██ ██    ██ ██   ██ ██    ██ ██      █████
#    ██  ██  ██ ██    ██ ██   ██ ██    ██ ██      ██
#    ██      ██  ██████  ██████   ██████  ███████ ███████
#########################################################################
# incl files

extended_summary: |
  This module contains a set of factory functions for setting up the
  observation models, for use in the tudat estimation framework


#########################################################################
#  ███████ ███   ██ ██    ██ ███    ███  ██████
#  ██      ████  ██ ██    ██ ████  ████ █
#  █████   ██ ██ ██ ██    ██ ██ ████ ██  █████
#  ██      ██  ████ ██    ██ ██  ██  ██       █
#  ███████ ██    ██  ██████  ██      ██ ██████
#########################################################################


enums:


  #    py::enum_< tom::LinkEndType >
  #        enum tudat::observation_models::LinkEndType
  - name: LinkEndType
    short_summary: "Enumeration of available link end types."
    #extended_summary: |
    #Enumeration of link end types supported by tudat.

    members:
      - name: unidentified_link_end
      - name: transmitter
      - name: reflector1
      - name: retransmitter
      - name: reflector2
      - name: reflector3
      - name: reflector4
      - name: receiver
      - name: observed_body


  #    py::enum_< tom::ObservableType >
  #        enum tudat::observation_models::ObservableType
  - name: ObservableType
    short_summary: "Enumeration of available observable types."
    #extended_summary: |
    #Enumeration of observable types supported by tudat.

    members:
      - name: one_way_range_type # [py]
      - name: n_way_range_type # [py]
      - name: angular_position_type # [py]
      - name: relative_angular_position_type # [py]
      - name: position_observable_type # [py]
      - name: velocity_observable_type # [py]
      - name: one_way_instantaneous_doppler_type # [py]
      - name: one_way_averaged_doppler_type # [py]
      - name: two_way_instantaneous_doppler_type # [py]
      - name: n_way_averaged_doppler_type # [py]
      - name: euler_angle_313_observable_type # [py]

  #    py::enum_< tom::ObservationViabilityType >
  #        enum tudat::observation_models::ObservationViabilityType
  - name: ObservationViabilityType
    short_summary: "Enumeration of observation viability criterion types."
    #extended_summary: |
    #Enumeration of observation viability criteria supported by tudat.

    members:
      - name: minimum_elevation_angle
      - name: body_avoidance_angle
      - name: body_occultation


  - name: LightTimeFailureHandling
    short_summary: "Enumeration of behaviour when failing to converge light-time with required settings."

    members:
      - name: accept_without_warning
      - name: print_warning_and_accept
      - name: throw_exception
  # (%!) ObservationDependentVariables not yet exposed, since associated functionality is too immature for end user


  ###### done


#########################################################################
#   ██████ ██          ██      ██████  ██████ ███████  ██████
#  ██      ██         ████    █       █       ██      █
#  ██      ██        ██  ██    █████   █████  █████    █████
#  ██      ██       ████████        █       █ ██            █
#   ██████ ███████ ██      ██ ██████  ██████  ███████ ██████
#########################################################################

classes:

  # (%!) notes:
  # - make distinction between struct and class ?
  # - I decided to explicitly refer to factory functions from derived classes? multitude of base and derived classes now...

  - name: LinkEndId
    short_summary: "Object serving as identifier of a specific link end."

  - name: LinkDefinition
    short_summary: "Object storing the link ends involved in a given observation."

    properties: # [py]
      - name: link_ends # [py]
        type: dict[LinkEndType,LinkEndId] # [py]
        description: Dictionary of link ends, with the key denoting the role in the observaton, and the associated value the identifier for the link end. # [py]


  # breaking up grouping of all base and all derived classes, instead grouping by heritage
  #######################################################################

  - name: DopplerProperTimeRateSettings
    short_summary: "Base class to defining proper time rate settings."
    extended_summary: |
      Functional (base) class for settings of proper time rate (at a single link end) for instantaneous Doppler observation model settings.
      Specific proper time rate settings must be defined using an object derived from this class.
      The derived classes are made accessible via dedicated factory functions.

    # attributes: none exposed

    methods:
      - name: ctor # [cpp]
        #      - name: __init__ # [py]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for proper time rates should be instantiated through the factory functions of a derived class." # [cpp]


  - name: ObservationSettings # [py]
  - name: ObservationModelSettings # [cpp]
    short_summary: "Base class for defining observation settings."
    extended_summary: |
      Functional (base) class for settings of observation models.
      Observation model settings define at least the type and geometry of a given observation.
      They can furthermore set observation biases and/or light-time corrections.
      Simple observation models settings that are fully characterised by these elements can be managed by this base class, which can be instantiated through dedicated factory functions, such as
      :func:`~tudatpy.numerical_simulation.estimation_setup.observation.one_way_range`, :func:`~tudatpy.numerical_simulation.estimation_setup.observation.cartesian_position`, 
      :func:`~tudatpy.numerical_simulation.estimation_setup.observation.angular_position`, etc.
      Model settings for specific observation models that require additional information such as integration time, retransmission time, etc. must be defined using an object derived from this class.
      The derived classes are made accessible through further factory functions.

    # attributes: none exposed

    methods:
      - name: ctor # [cpp]
        #      - name: __init__ # [py]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for observation models should be instantiated through the factory functions of a derived class." # [cpp]


  - name: OneWayDopplerObservationSettings
    short_summary: "Class for defining the settings of one-way instantaneous Doppler observation models."
    extended_summary: |
      :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSettings` derived class for one-way instantaneous Doppler observation model settings.
      Settings object can account for additional observation model aspects such as light time corrections and proper time rate settings.
      Instances of this class can be created via the :func:`~tudatpy.numerical_simulation.estimation_setup.observation.one_way_doppler_instantaneous` factory function.

    # attributes: none exposed

    methods:
      - name: ctor # [cpp]
        #      - name: __init__ # [py]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of the `OneWayDopplerObservationSettings` class should be created via the `oneWayOpenLoopDoppler` factory function." # [cpp]


  - name: LightTimeCorrectionSettings
    short_summary: "Base class to defining light time correction settings."
    extended_summary: |
      Functional (base) class for settings of light time corrections.
      This class is not used for calculations of corrections, but is used for the purpose of defining the light time correction properties.
      Specific light time correction settings must be defined using an object derived from this class.
      The derived classes are made accessible via dedicated factory functions, such as e.g. 
      :func:`~tudatpy.numerical_simulation.estimation_setup.observation.first_order_relativistic_light_time_correction`

    # attributes: none exposed

    methods:
      - name: ctor # [cpp]
        #      - name: __init__ # [py]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for light time corrections should be instantiated through the factory functions of a derived class." # [cpp]

  - name: LightTimeConvergenceCriteria
    short_summary: "Base class to defining light time convergence criteria."
    extended_summary: |
      Functional (base) class for criteria of light time convergence.
      This class is not used for calculations of corrections, but is used for the purpose of defining the light time convergence criteria.
      Specific light time convergence criteria must be defined using an object derived from this class.
      The derived classes are made accessible via :func:`~tudatpy.numerical_simulation.estimation_setup.observation.light_time_convergence_settings`.

    # attributes: none exposed

    methods:
      - name: ctor # [cpp]
        #      - name: __init__ # [py]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for light time corrections should be instantiated through the factory functions of a derived class." # [cpp]


  - name: ObservationBiasSettings
    short_summary: "Base class to defining observation bias settings."
    extended_summary: |
      Functional (base) class for settings of observation bias.
      Specific observation bias settings must be defined using an object derived from this class.
      The derived classes are made accessible via dedicated factory functions.

    # attributes: none exposed

    methods:
      - name: ctor # [cpp]
        #      - name: __init__ # [py]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for observation biases should be instantiated through the factory functions of a derived class." # [cpp]


  - name: ObservationSimulationSettings
    short_summary: "Base class for defining settings for simulating observations."
    extended_summary: |
      Base class for defining settings for simulating observations.
      This simulation settings object defines observation times, noise and viability criteria, *etc.* at which observations are to be simulated.
      Therefore, one simulation settings object of this type can only refer to one combination of observable type and link geometry (LinkDefinition).
      The user does not interact with this class directly, but defines specific observation simulation settings using an object derived from this class (created through the associated factory function).

    # attributes: none exposed

    methods:
      - name: ctor # [cpp]
        #      - name: __init__ # [py]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for observation simulation times should be instantiated through the factory functions of a derived class." # [cpp]


  - name: TabulatedObservationSimulationSettings
    short_summary: "Class for defining settings for simulating observations at a predefined set of times."
    extended_summary: |
      :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` derived class for defining settings for simulating observations
      at a predefined set of times
      This type defines predefined time epochs at which applicable observations are to be simulated, stored in a rigid, "tabulated" form. 
      Some observation times may be discarded due to the use of viability settings.
      Instances of this class are typicall created via the :func:`~tudatpy.numerical_simulation.estimation_setup.observation.tabulated_simulation_settings` 
      and :func:`~tudatpy.numerical_simulation.estimation_setup.observation.tabulated_simulation_settings_list` factory functions. # [py]

    # attributes: none exposed

    methods:
      - name: ctor # [cpp]
        #      - name: __init__ # [py]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of the `TabulatedObservationSimulationSettings` class should be created via the `tabulatedObservationSimulationSettings` factory function." # [cpp]


  - name: ObservationViabilitySettings
    short_summary: "Class for defining observation viability calculator settings."
    extended_summary: |
      Class for defining the settings for observation viability calculator creation.
      Instances of this class can be created through various dedicated factory functions, such as :func:`~tudatpy.numerical_simulation.estimation_setup.observation.elevation_angle_viability`, :func:`~tudatpy.numerical_simulation.estimation_setup.observation.body_avoidance_viability` and :func:`~tudatpy.numerical_simulation.estimation_setup.observation.body_occultation_viability`

    # attributes: none exposed

    methods:
      - name: ctor # [cpp]
        #      - name: __init__ # [py]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of the `ObservationViabilitySettings` class should be created via the associated factory functions." # [cpp]



# (%!) ObservationDependentVariableSettings not yet exposed, since associated functionality is too immature for end user

  - name: ObservationDependentVariableSettings
    short_summary: "Base class for setting observation dependent variables."
    extended_summary: |
      Functional (base) class for setting observation dependent variables as part of the observation output.
      Note: The associated functionality is not yet mature enough for the end user. Class is exposed for development purposes only.

  - name: ObservationAncilliarySimulationSettings
    short_summary: "Class for holding ancilliary settings for observation simulation."

    methods:
      - name: get_float_settings 
        short_summary: "Function to retrieve a floating point value for a setting of a specific type from the ancilliary settings object." # [cpp]
        parameters:
          - name: setting_type # [py]
            type: ObservationAncilliarySimulationVariable # [py]
            description: |
              Type of the setting for which the value is to be returned

          - name: throw_exception # [py]
            type: bool, default = false # [py]
            description: |
              Boolean defining whether to throw an exception if the requested setting does not exist, or does not exist as a floating point value.

        returns:
            type: float # [py]
            description: Value of the requested ancilliary variable (or NaN if it does not exist)

      - name: get_float_list_settings 
        short_summary: "Function to retrieve a vector (list) of floating point values for a setting of a specific type from the ancilliary settings object." # [cpp]
        parameters:
          - name: setting_type # [py]
            type: ObservationAncilliarySimulationVariable # [py]
            description: |
              Type of the setting for which the value is to be returned

          - name: throw_exception # [py]
            type: bool, default = false # [py]
            description: |
              Boolean defining whether to throw an exception if the requested setting does not exist, or does not exist as list of floating point values.

        returns:
            type: list[ float ] # [py]
            description: Value of the requested ancilliary variable (or empty list if it does not exist)

  #######################################################################

##############################################################################
#  ███████ ██    ██ ███    ██  ██████ ████████ ██  ██████  ███    ██  ██████
#  ██      ██    ██ ████   ██ ██         ██    ██ ██    ██ ████   ██ █
#  █████   ██    ██ ██ ██  ██ ██         ██    ██ ██    ██ ██ ██  ██  █████
#  ██      ██    ██ ██  ██ ██ ██         ██    ██ ██    ██ ██  ██ ██       █
#  ██       ██████  ██   ████  ██████    ██    ██  ██████  ██   ████ ██████
##############################################################################

functions:

  ###############    LINK ENDS           ################################


  - name: link_definition # [py]
    short_summary: "Function to create a link definition object."

    parameters:
      - name: link_ends # [py]
        type: dict[LinkEndType,LinkEndId] # [py]
        description: Dictionary of link ends, with the key denoting the role in the observaton, and the associated value the identifier for the link end. # [py]

    returns:
      type: LinkDefinition # [py]
      description: The ``LinkDefinition`` object storing the link ends of the observation

  #######################################################################

  - name: body_origin_link_end_id # [py]
    short_summary: "Function to create a link end identifier for the origin (typically center of mass) of a body."
    extended_summary: |
      Function to create a link end identifier for the origin (typically center of mass) of a body.
      Using this option will simulate the origin of a body transmitter, receiving, etc. the observation.
      Although this is typically not physically realistic, it can be a useful approximation, in particular for simulation studies.

    parameters:
      - name: body_name # [py]
        type: str # [py]
        description: |
          Name of the body   

    returns:
      type: LinkEndId # [py]
      description: |
        A LinkEndId object representing the center of mass of a body

  #######################################################################

  - name: body_reference_point_link_end_id # [py]
    short_summary: "Function to create a link end identifier for a reference point on a body."
    extended_summary: |
      Function to create a link end identifier for a reference point on a body, where the reference point
      is typically the identifier of a ground stations

    parameters:
      - name: body_name # [py]
        type: str # [py]
        description: |
          Name of the body on which the reference point is located  

      - name: body_name # [py]
        type: str # [py]
        description: |
          Name of the reference point on the body.  


    returns:
      type: LinkEndId # [py]
      description: |
        A LinkEndId object representing a reference point on a body

  #######################################################################

  - name: one_way_downlink_link_ends # [py]
    short_summary: "Function for defining one-way downlinks via LinkDefinition types."
    extended_summary: |
      Function for defining single or multiple one-way downlinks.
      Multiple downlinks share the same transmitters, but may each have a different receiver.
      For each downlink, the returned list will contain an additional `LinkDefinition` type.

    parameters:
      - name: transmitter # [py]
        type: Tuple[str, str] # [py]
        description: |
          `LinkEndId` type (tuple of strings), where the first entrance identifies the body and the second entry the reference point of the single transmitter link end.

      - name: receivers # [py]
        type: List[ Tuple[str, str] ] # [py]
        description: |
          List of `LinkEndId` types (tuple of strings), where for each tuple the first entrance identifies the body and the second entry the reference point of the receiver link end(s).

    returns:
      type: List[ LinkDefinition ]  # [py]
      description: |
        List of one or more `LinkDefinition` types, each defining the geometry for one one-way downlink.
        A `LinkDefinition` type for a one one-way link is composed a dict with one `receiver` and one `transmitter` :class:`~tudatpy.numerical_simulation.estimation_setup.observation.LinkEndType` key, to each of which a `LinkEndId` type is mapped.

  #######################################################################

  - name: one_way_uplink_link_ends # [py]
    short_summary: "Function for defining one-way uplinks via LinkDefinition types."
    extended_summary: |
      Function for defining single or multiple one-way uplinks.
      Multiple uplinks share the same receiver, but may each have a different transmitter.
      For each uplink, the returned list will contain an additional `LinkDefinition` type.

    parameters:
      - name: transmitters # [py]
        type: List[ Tuple[str, str] ] # [py]
        description: |
          List of `LinkEndId` types (tuple of strings), where for each tuple the first entrance identifies the body and the second entry the reference point of the transmitter link end(s).

      - name: receiver # [py]
        type: Tuple[str, str] # [py]
        description: |
          `LinkEndId` type (tuple of strings), where the first entrance identifies the body and the second entry the reference point of the single receiver link end.

    returns:
      type: List[ LinkDefinition ]  # [py]
      description: |
        List of one or more `LinkDefinition` types, each defining the geometry for one one-way uplink.
        A `LinkDefinition` type for a one one-way link is composed a dict with one `receiver` and one `transmitter` :class:`~tudatpy.numerical_simulation.estimation_setup.observation.LinkEndType` key, to each of which a `LinkEndId` type is mapped.

 ############### LIGHT-TIME CONVERGENCE ################################
  # factory functions

  - name: light_time_convergence_settings # [py]
    short_summary: "Factory function for creating convergence settings for solving the light-time equation."
    extended_summary: |
      Factory function for creating convergence settings for solving the light-time equation. Computing the light time
      :math:`s=t_{R}-t_{T}` between two receiver :math:`R` and transmiter :math:`T` requires the iterative
      solution of the following equation:

      .. math::
         {t_{R}-t_{T}}=c\left(|\mathbf{r}_{R}(t_{R})-\mathbf{r}_{T}(t_{T})| + \Delta s(t_{R},t_{T},mathbf{r}_{R}(t_{R}),mathbf{r}_{T}(t_{T}))

      where either the reception time :math:`t_{R}` or the transmission time :math:`t_{T}` is kept fixed (reference link end time). The term :math:`\Delta s` contains any
      deviations in the light-time from straight-line propagation at speed of light (relativistic corrections, media corrections, etc.). The algorithm starts
      at :math:`t_{R}=t_{T}`, and uses this to evaluate the right-hand side of the above equation. This leads to a new value of :math:`t_{R}` or :math:`t_{T}` (depending on which is kept fixed)
      and the right-hand side is re-evaluated in a new iteration. The input to this function defines the settings for when the iteration will terminate.

    parameters:
      - name: iterate_corrections # [py]
        type: bool, default = False # [py]
        description: |
          Boolean denoting whether the terms :math:`\Delta s` are recomputed at each iteration or not. If false, the corrections are calculated only on the first iteration. Afterwards, the value
          is kept fixed until convergence. Once preliminarily converged, the algorithm recomputes :math:`\Delta s`, and continues the iteration (until proper convergence) while now recomputing
          :math:`\Delta s` each iteration. Setting this input to false is typically safe, and is computationally more efficient.

      - name: maximum_number_of_iterations # [py]
        type: int, default = 50 # [py]
        description: |
          Maximum number of iterations taken by the algorithm. If this number of iterations is reached without convergence (as defined by ``absolute_tolerance`` input),
          the behaviour of the algorithm is defined by the ``failure_handling`` input.

      - name: absolute_tolerance # [py]
        type: float, default = nan # [py]
        description: |
          Difference in :math:`t_{R}-t_{T}` between two consecutive iterataions below which the algorithm is considered to be converged. Default value is nan, which means the default value is taken.
          The default value depends on the time representation used (1 ps for float; 1 fs for Time class)

      - name: failure_handling # [py]
        type: LightTimeFailureHandling, default = accept_without_warning # [py]
        description: |
          Input defines behaviour when failing to converge within the required number of iterations. NOTE: the default value should be overridden for high-accuracy applications

    returns:
      type: :class:`LightTimeConvergenceCriteria`  # [py]
      description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observation.LightTimeConvergenceCriteria` with the required settings.

  ############### LIGHT-TIME CORRECTIONS ################################
  # factory functions

  - name: first_order_relativistic_light_time_correction # [py]
    short_summary: "Factory function for creating settings for first-order relativistic light-time corrections."
    extended_summary: |
      Factory function for creating settings for first-order relativistic light-time corrections: the correction to
      the light time of a (set of) stationary point masses, computed up to c−2 according to general relativity as formulated by e.g. Moyer (2000).
      One ambiguity in the model is the time at which the states of the perturbing bodies are evaluated. We distinguish two cases:

      * In the case where the perturbing body contains a link end of the observation (for instance perturbation due to Earth gravity field,
        with one of the link ends being an Earth-based station), the time at which the Earth’s state is evaluated equals the transmission time if Earth acts as transmitter, and reception time if
        Earth acts as receiver.
      * In other cases, where the perturbing body is not involved in the link ends, its state is evaluated at the midpoint time between transmitter and receiver.

    parameters:
      - name: perturbing_bodies
        type: str
        description: |
          A list containing the names of the bodies due to which the light-time correction is to be taken into account.

    returns:
      type: :class:`FirstOrderRelativisticLightTimeCorrectionSettings`  # [py]
      description: |
        Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observation.LightTimeCorrectionSettings` derived :class:`FirstOrderRelativisticLightTimeCorrectionSettings` class,
        defining the settings for the light-time corrections


  ###############        BIASES 		 ################################
  # factory functions

  - name: absolute_bias # [py]
    short_summary: "Factory function for creating settings for an absolute observation bias."
    extended_summary: |
      Factory function for creating settings for an absolute observation bias. When calculating the observable value, applying this setting
      will take the physically ideal observation :math:`h`, and modify it to obtain the biased observation :math:`\tilde{h}` as follows:

      .. math::
         \tilde{h}=h+K

      where :math:`K` is the `bias_value`. For an observable with size greater than 1, :math:`K` is a vector and the addition is component-wise.

    parameters:
      - name: bias_value # [py]
        type: numpy.ndarray # [py]
        description: |
          A vector containing the bias that is to be applied to the observable. This vector should be the same size as the observable to which it is
          applied (*e.g.* size 1 for a range observable, size 2 for angular position, *etc*.)

    returns:
      type: :class:`ConstantObservationBiasSettings`  # [py]
      description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationBiasSettings` derived :class:`ConstantObservationBiasSettings` class,
        defining the settings for a constant, absolute observation bias.

  #######################################################################

  - name: relative_bias # [py]
    short_summary: "Factory function for creating settings for a relative observation bias."
    extended_summary: |
      Factory function for creating settings for a relative observation bias. When calculating the observable value, applying this setting
      will take the physically ideal observation :math:`h`, and modify it to obtain the biased observation :math:`\tilde{h}` as follows:

      .. math::
         \tilde{h}=h(1+K)

      where :math:`K` is the`bias_value`. For an observable with size greater than 1, :math:`K` is a vector and the multiplication is component-wise.

    parameters:
      - name: bias_value # [py]
        type: numpy.ndarray # [py]
        description: |
          A vector containing the bias that is to be applied to the observable. This vector should be the same size as the observable to which it is
          applied (*e.g.* size 1 for a range observable, size 2 for angular position, *etc*.)

    returns:
      type: :class:`ConstantObservationBiasSettings`  # [py]
      description: |
        Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationBiasSettings` derived :class:`ConstantObservationBiasSettings` class,
        defining the settings for a constant, relative observation bias.

  #######################################################################

  - name: arcwise_absolute_bias # [py]
    short_summary: "Factory function for creating settings for arc-wise absolute observation biases."
    extended_summary: |
      Factory function for creating settings for arc-wise absolute observation biases.
      This bias setting differs from the :class:`~tudatpy.numerical_simulation.estimation_setup.observation.absolute_bias` setting only through the option of setting the `bias_value` :math:`K` to a different values for each arc.

    parameters:
      - name: arc_start_times # [py]
        type: List[ float ] # [py]
        description: |
          List containing starting times for each arc.

      - name: bias_values # [py]
        type: List[ numpy.ndarray ] # [py]
        description: |
          List of arc-wise bias vectors that are to be applied to the given observable. The vectors should be the same size as the observable to which it is
          applied (*e.g.* size 1 for a range observable, size 2 for angular position, *etc*.)

      - name: reference_link_end_type # [py]
        type: :class:`LinkEndType` # [py]
        description: |
          Defines the link end (via the :class:`LinkEndType`) which is used as a reference for observation times.

    returns:
      type: :class:`ArcWiseConstantObservationBiasSettings`  # [py]
      description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationBiasSettings` derived :class:`ArcWiseConstantObservationBiasSettings` class.

  #######################################################################

  - name: arcwise_absolute_bias # [py] # overload
    short_summary: "Factory function for creating settings for arc-wise absolute observation biases."
    extended_summary: |
      Factory function for creating settings for arc-wise absolute observation biases.
      This bias setting differs from the :class:`~tudatpy.numerical_simulation.estimation_setup.observation.absolute_bias` setting only through the option of setting the `bias_value` :math:`K` to a different values for each arc.

    parameters:

      - name: bias_values_per_start_time # [py]
        type: Dict[float, numpy.ndarray[numpy.float64[m, 1]]] # [py]
        description: |
          Dictionary, in which the bias value vectors for each arc are directly mapped to the starting times of the respective arc.
          The vectors should be the same size as the observable to which it is applied (*e.g.* size 1 for a range observable, size 2 for angular position, *etc*.)

      - name: reference_link_end_type # [py]
        type: :class:`LinkEndType` # [py]
        description: |
          Defines the link end (via the :class:`LinkEndType`) which is used as a reference for observation times.

    returns:
      type: :class:`ArcWiseConstantObservationBiasSettings`  # [py]
      description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationBiasSettings` derived :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ArcWiseConstantObservationBiasSettings` class.

  #######################################################################

  - name: arcwise_relative_bias # [py]
    short_summary: "Factory function for creating settings for arc-wise relative observation biases."
    extended_summary: |
      Factory function for creating settings for arc-wise relative observation biases.
      This bias setting differs from the :class:`~tudatpy.numerical_simulation.estimation_setup.observation.relative_bias` setting only through the option of setting the `bias_value` :math:`K` to a different values for each arc.

    parameters:

      - name: arc_start_times # [py]
        type: List[ float ] # [py]
        description: |
          List containing starting times for each arc.

      - name: bias_values # [py]
        type: List[ numpy.ndarray ] # [py]
        description: |
          List of arc-wise bias vectors that are to be applied to the given observable. The vectors should be the same size as the observable to which it is
          applied (*e.g.* size 1 for a range observable, size 2 for angular position, *etc*.)

      - name: reference_link_end_type # [py]
        type: :class:`LinkEndType` # [py]
        description: |
          Defines the link end (via the :class:`LinkEndType`) which is used as a reference for observation times.

    returns:
      type: :class:`ArcWiseConstantObservationBiasSettings`  # [py]
      description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationBiasSettings` derived :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ArcWiseConstantObservationBiasSettings` class.

  #######################################################################

  - name: arcwise_relative_bias # [py] # overload
    short_summary: "Factory function for creating settings for arc-wise relative observation biases."
    extended_summary: |
      Factory function for creating settings for arc-wise relative observation biases.
      This bias setting differs from the :class:`~tudatpy.numerical_simulation.estimation_setup.observation.relative_bias` setting only through the option of setting the `bias_value` :math:`K` to a different values for each arc.

    parameters:

      - name: bias_values_per_start_time # [py]
        type: Dict[float, numpy.ndarray[numpy.float64[m, 1]]] # [py]
        description: |
          Dictionary, in which the bias value vectors for each arc are directly mapped to the starting times of the respective arc.
          The vectors should be the same size as the observable to which it is applied (*e.g.* size 1 for a range observable, size 2 for angular position, *etc*.)

      - name: reference_link_end_type # [py]
        type: :class:`LinkEndType` # [py]
        description: |
          Defines the link end (via the :class:`LinkEndType`) which is used as a reference for observation times.

    returns:
      type: :class:`ArcWiseConstantObservationBiasSettings`  # [py]
      description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationBiasSettings` derived :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ArcWiseConstantObservationBiasSettings` class.

  #######################################################################

  - name: time_drift_bias # [py]
    short_summary: "Factory function for creating settings for a time-drift bias."
    extended_summary: |
      TODO

    parameters:
      - name: bias_value # [py]
        type: numpy.ndarray # [py]
        description: |
          Constant time drift bias that is to be considered for the observation time. This vector should be the same size as the observable to which it is
          assigned (*e.g.* size 1 for a range observable, size 2 for angular position, *etc*.)

      - name: time_link_end # [py]
        type: :class:`LinkEndType` # [py]
        description: |
          Defines the link end (via the :class:`LinkEndType`) which is used the current time.

      - name: ref_epoch # [py]
        type: float # [py]
        description: |
          Defines the reference epoch at which the effect of the time drift is initialised.

    returns:
      type: :class:`ConstantObservationBiasSettings`  # [py]
      description: |
        Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationBiasSettings` derived :class:`ConstantObservationBiasSettings` class,
        defining the settings for a constant, relative observation bias.

  #######################################################################

  - name: arc_wise_time_drift_bias # [py]
    short_summary: "Factory function for creating settings for arc-wise time-drift biases."
    extended_summary: |
      TODO

    parameters:
      - name: bias_value # [py]
        type: numpy.ndarray # [py]
        description: |
          Constant time drift bias that is to be considered for the observation time. This vector should be the same size as the observable to which it is
          assigned (*e.g.* size 1 for a range observable, size 2 for angular position, *etc*.)

      - name: arc_start_times # [py]
        type: List[ float ] # [py]
        description: |
          List containing starting times for each arc.

      - name: time_link_end # [py]
        type: :class:`LinkEndType` # [py]
        description: |
          Defines the link end (via the :class:`LinkEndType`) which is used the current time.

      - name: ref_epochs # [py]
        type: List[ float ] # [py]
        description: |
          List containing the arc-wise reference epochs at which the effect of the arc-wise time drift is initialised.

    returns:
      type: :class:`ArcWiseConstantObservationBiasSettings`  # [py]
      description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationBiasSettings` derived :class:`ArcWiseConstantObservationBiasSettings` class.

  #######################################################################

  - name: arc_wise_time_drift_bias # [py] # overload
    short_summary: "Factory function for creating settings for arc-wise time-drift biases."
    extended_summary: |
      TODO

    parameters:

      - name: bias_value_per_start_time # [py]
        type: Dict[float, numpy.ndarray[numpy.float64[m, 1]]] # [py]
        description: |          
          Dictionary, in which the time bias value vectors for each arc are directly mapped to the starting times of the respective arc.
          The vectors should be the same size as the observable to which it is applied (*e.g.* size 1 for a range observable, size 2 for angular position, *etc*.)

      - name: time_link_end # [py]
        type: :class:`LinkEndType` # [py]
        description: |
          Defines the link end (via the :class:`LinkEndType`) which is used the current time.

      - name: ref_epochs # [py]
        type: List[ float ] # [py]
        description: |
          List containing the arc-wise reference epochs at which the effect of the arc-wise time drift is initialised.

    returns:
      type: :class:`ArcWiseConstantObservationBiasSettings`  # [py]
      description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationBiasSettings` derived :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ArcWiseConstantObservationBiasSettings` class.

  #######################################################################

  - name: combined_bias # [py]
    short_summary: "Factory function for creating settings for a combined observation bias."
    extended_summary: |
      Factory function for creating settings for a combined observation bias, calculating by combining any number of bias types.
      Each contribution of the combined bias is computed from the unbiased observable, so when applying both a relative and absolute bias, we get:

      .. math::
         \tilde{h}=h+K_{a}+hK_{r}

      And, crucially:

      .. math::
         \tilde{h}\neq (h+K_{a})(1+K_{r})

      where :math:`K_{r}` and :math:`K_{a}` is the relative and absolute bias, respectively.

    parameters:
      - name: bias_list # [py]
        type: List[ class:`ObservationBiasSettings` ] # [py]
        description: |
          A list containing the bias the bias settings that are to be applied to the observable.

    returns:
      type: :class:`MultipleObservationBiasSettings`  # [py]
      description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationBiasSettings` derived :class:`MultipleObservationBiasSettings` class,
        combining the settings for multiple observation biases.


  ###############    OBSERVABLES         ################################
  # factory functions

  - name: one_way_range # [py]
    short_summary: "Factory function for creating settings for a one-way range observable."
    extended_summary: |
      Factory function for creating observation model settings of one-way range type observables, for a single link definition. The associated observation model creates
      a single-valued observable :math:`h_{_{\text{1-range}}}` as follows (in the unbiased case):
      
      .. math::
         h_{_{\text{1-range}}}(t_{R},t_{T})=|\mathbf{r}_{R}(t_{R})-\mathbf{r}_{T}(t_{T})| + \Delta s
      
      where :math:`\mathbf{r}_{R}`, :math:`\mathbf{r}_{T}`, :math:`t_{R}` and :math:`t_{T}` denote the position function of receiver and transmitter, and evaluation time 
      of receiver and transmitter. The term :math:`\Delta s` denotes light-time corrections due to e.g relativistic, atmospheric effects (as defined by the ``light_time_correction_settings`` input).
      The transmission and reception time are related to the light-time :math:`T=t_{R}-t_{T}`, which is in turn related to the one-way range as :math:`T=h/c`
      As a result, the calculation of the one-way range (and light-time) requires the iterative solution of the equation:
     
      .. math::
         t_{R}-t_{T}=c\left(|\mathbf{r}_{R}(t_{R})-\mathbf{r}(t_{R})| + \Delta s\right)

       The method for the iterative solution is described in the :func:`light_time_convergence_settings` entry
      
      
    parameters:
      - name: link_ends # [py]
        type: LinkDefinition # [py]
        description: |
          Set of link ends that define the geometry of the observation. This observable requires the
          `transmitter` and `receiver` :class:`~tudatpy.numerical_simulation.estimation_setup.observation.LinkEndType` entries to be defined.

      - name: light_time_correction_settings # [py]
        type: List[ :class:`LightTimeCorrectionSettings` ], default = list() # [py]
        description: |
          List of corrections for the light-time that are to be used. Default is none, which will result
          in the signal being modelled as moving in a straight line with the speed of light

      - name: bias_settings # [py]
        type: :class:`ObservationBiasSettings`, default = None # [py]
        description: |
          Settings for the observation bias that is to be used for the observation, default is None (unbiased observation)

      - name: light_time_convergence_settings # [py]
        type: :class:`LightTimeConvergenceCriteria`, default = :func:`light_time_convergence_settings`() # [py]
        description: |
          Settings for convergence of the light-time (default settings defined in :func:`light_time_convergence_settings`)

    returns:
        type: :class:`ObservationSettings`  # [py]
        description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationModelSettings` class
          defining the settings for the one-way observable.

  #######################################################################

  - name: n_way_range # [py]
    short_summary: "Factory function for creating settings for a n-way range observable."
    extended_summary: |
      Factory function for creating observation model settings of n-way range type observables, for a single link definition. The associated observation model creates
      a single-valued observable :math:`h_{_{\text{N-range}}}` by combining together a series :math:`n` one-way range observations    
      (see :func:`~tudatpy.numerical_simulation.estimation_setup.observation.one_way_range`). By default, the reception time of the :math:`i^{th}` one-way range is set as the 
      transmission time of the :math:`(i+1)^{th}` one-way range. A retransmission delay may be defined by ancilliary settings (see TODO) when creating observation
      simulation setings.

      For this factory function, the settings for each constituent one-way range (with the exception of the link end identifiers) are equal.

    parameters:
      - name: link_ends # [py]
        type: LinkDefinition # [py]
        description: |
          Set of link ends that define the geometry of the observation. This observable requires the
          `transmitter` and `receiver` :class:`~tudatpy.numerical_simulation.estimation_setup.observation.LinkEndType` entries to be defined, as well
          as a `retransmitter1`, `retransmitter2`, .... (with the number of retransmitters to be defined by the user). 

      - name: light_time_correction_settings # [py]
        type: List[ :class:`LightTimeCorrectionSettings` ], default = list() # [py]
        description: |
          List of corrections for the light-time that are to be used for each constituent one-way range. Default is none, which will result
          in the signal being modelled as moving in a straight line with the speed of light

      - name: bias_settings # [py]
        type: :class:`ObservationBiasSettings`, default = None # [py]
        description: |
          Settings for the observation bias that is to be used for the observation, default is none (unbiased observation).
          Note that only one bias setting is applied to the n-way observable.
     
      - name: light_time_convergence_settings # [py]
        type: :class:`LightTimeConvergenceCriteria`, default = :func:`light_time_convergence_settings`() # [py]
        description: |
          Settings for convergence of the light-time (default settings defined in :func:`light_time_convergence_settings`)

    returns:
      type: :class:`NWayRangeObservationSettings`  # [py]
      description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationModelSettings` derived :class:`NWayRangeObservationSettings` class.

  #######################################################################

  - name: n_way_range_from_one_way_links # [py]
    short_summary: "Factory function for creating settings for a n-way range observable."
    extended_summary: |
      Factory function for creating observation model settings of n-way range type observables, for a single link definition. The
      implementation is the same as :func:`~tudatpy.numerical_simulation.estimation_setup.observation.n_way_range`, with the difference
      that the constituent one-way ranges may have different settings.s

    parameters:
      - name: one_way_range_settings # [py]
        type: List[ :class:`ObservationModelSettings` ] # [py]
        description: |
          List of observation model settings for each of the :math:`n` constituent one-way ranges of the n-way range observable.
          The ``LinkDefinition`` of this n-way range observable is created from this list, with the ``transmitter`` and ``retransmitter1`` defined by the
          ``transmitter`` and ``receiver`` of the first entry in this list. The ``retransmitter``(n-1) and ``receiver`` are defined by the
          ``transmitter`` and ``receiver`` of the :math:`n`^{th} entry of this list.

      - name: bias_settings # [py]
        type: :class:`ObservationBiasSettings`, default = None # [py]
        description: |
          Settings for the observation bias that is to be used for the observation, default is none (unbiased observation).
          Note that only one bias setting is applied to the n-way observable.

    returns:
      type: :class:`NWayRangeObservationSettings`  # [py]
      description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationModelSettings` derived :class:`NWayRangeObservationSettings` class.

#######################################################################

  - name: two_way_range # [py]
    short_summary: "Factory function for creating settings for a two-way range observable."
    extended_summary: |
      Same as :func:`~tudatpy.numerical_simulation.estimation_setup.observation.n_way_range`, with :math:`n=2`. This function is provided
      for convenience.

    parameters:
      - name: link_ends # [py]
        type: LinkDefinition # [py]
        description: |
          Set of link ends that define the geometry of the observation. This observable requires the
          `transmitter`, `retransmitter` and `receiver` :class:`~tudatpy.numerical_simulation.estimation_setup.observation.LinkEndType` entries to be defined

      - name: light_time_correction_settings # [py]
        type: List[ :class:`LightTimeCorrectionSettings` ], default = list() # [py]
        description: |
          List of corrections for the light-time that are to be used for each constituent one-way range. Default is none, which will result
          in the signal being modelled as moving in a straight line with the speed of light

      - name: bias_settings # [py]
        type: :class:`ObservationBiasSettings`, default = None # [py]
        description: |
          Settings for the observation bias that is to be used for the observation, default is none (unbiased observation).
          Note that only one bias setting is applied to the n-way observable.
     
      - name: light_time_convergence_settings # [py]
        type: :class:`LightTimeConvergenceCriteria`, default = :func:`light_time_convergence_settings`() # [py]
        description: |
          Settings for convergence of the light-time (default settings defined in :func:`light_time_convergence_settings`)

    returns:
      type: :class:`NWayRangeObservationSettings`  # [py]
      description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationModelSettings` derived :class:`NWayRangeObservationSettings` class.

  #######################################################################

  - name: two_way_range_from_one_way_links # [py]
    short_summary: "Factory function for creating settings for a two-way range observable."
    extended_summary: |
      Same as :func:`~tudatpy.numerical_simulation.estimation_setup.observation.n_way_range_from_one_way_links`, with :math:`n=2`. This function is provided
      for convenience.

    parameters:
      - name: one_way_range_settings # [py]
        type: List[ :class:`ObservationModelSettings` ] # [py]
        description: |
          List of observation model settings of size two, with the first entry the one-way range settings for the uplink, and the second entry the one-way range settings for the downlink.
          The ``LinkDefinition`` of this two-way range observable is created from this list, with the ``transmitter`` and ``retransmitter1`` defined by the
          ``transmitter`` and ``receiver`` of the first entry in this list. The ``retransmitter`` and ``receiver`` are defined by the
          ``transmitter`` and ``receiver`` of the second entry of this list.

      - name: bias_settings # [py]
        type: :class:`ObservationBiasSettings`, default = None # [py]
        description: |
          Settings for the observation bias that is to be used for the observation, default is none (unbiased observation).
          Note that only one bias setting is applied to the n-way observable.

    returns:
      type: :class:`NWayRangeObservationSettings`  # [py]
      description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationModelSettings` derived :class:`NWayRangeObservationSettings` class.

  #######################################################################

  - name: angular_position # [py]
    short_summary: "Factory function for creating settings for an angular position observable."
    extended_summary: |
      Factory function for creating observation model settings of angular position type observables (as right ascension :math:`\alpha` and declination :math:`\delta`), 
      for a single link definition. The associated observation model creates an observable :math:`\mathbf{h}_{_{\text{ang.pos.}}}` of type two as follows (in the unbiased case):
      
      .. math::
         \Delta\mathbf{r}=\mathbf{r}_{R}(t_{R})-\mathbf{r}_{T}(t_{T})\\
         \tan\alpha=\frac{\Delta r_{y}}{\Delta r_{x}}\\
         \delta=\frac{\Delta r_{z}}{\sqrt{\Delta r_{x}^{2}+\Delta r_{y}^{2}}}\\
         \mathbf{h}_{_{\text{ang.pos.}}} = [\alpha;\delta]
      
      The relative position vector :math:`\Delta\mathbf{r}` is computed identically as described for the :func:`~tudatpy.numerical_simulation.estimation_setup.observation.one_way_range`
      The angular position observable can be used for optical astrometry, VLBI, etc. Due to the definition of this observable, the xy-plane is defined by the global frame orientation of the 
      environment.

    parameters:
      - name: link_ends # [py]
        type: LinkDefinition # [py]
        description: |
          Set of link ends that define the geometry of the observation. This observable requires the
          `transmitter` and `receiver` :class:`~tudatpy.numerical_simulation.estimation_setup.observation.LinkEndType` entries to be defined.

      - name: light_time_correction_settings # [py]
        type: List[ :class:`LightTimeCorrectionSettings` ], default = list() # [py]
        description: |
          List of corrections for the light-time that are to be used. Default is none, which will result
          in the signal being modelled as moving in a straight line with the speed of light

      - name: bias_settings # [py]
        type: :class:`ObservationBiasSettings`, default = None # [py]
        description: |
          Settings for the observation bias that is to be used for the observation, default is none (unbiased observation)
     
      - name: light_time_convergence_settings # [py]
        type: :class:`LightTimeConvergenceCriteria`, default = :func:`light_time_convergence_settings`() # [py]
        description: |
          Settings for convergence of the light-time (default settings defined in :func:`light_time_convergence_settings`)

    returns:
        type: :class:`ObservationSettings`  # [py]
        description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationModelSettings` class
          defining the settings for the angular position observable.

  #######################################################################

  - name: relative_angular_position # [py]
    short_summary: "Factory function for creating settings for a relative angular position observable."
    extended_summary: |
      Factory function for creating observation model settings of relative angular position type observables (as relative right ascension :math:`\Delta\alpha` and relative declination :math:`\Delta\delta`), 
      for a single link definition. The associated observation model creates an observable that is the difference of two :func:`~tudatpy.numerical_simulation.estimation_setup.observation.angular_position`
      observables :math:`\left(\mathbf{h}_{_{\text{ang.pos.}}}\right)_{2}` and :math:`\mathbf{h}_{_{\text{ang.pos.}}}\right)_{1}`. 
      The resulting observable becomes :math:`\left(\mathbf{h}_{_{\text{ang.pos.}}}\right)_{2}-\left(\mathbf{h}_{_{\text{ang.pos.}}}\right)_{2}`
     
    parameters:
      - name: link_ends # [py]
        type: LinkDefinition # [py]
        description: |
          Set of link ends that define the geometry of the observation. This observable requires the
          `transmitter`, 'transmitter2` and `receiver` :class:`~tudatpy.numerical_simulation.estimation_setup.observation.LinkEndType` entries to be defined.
          The `transmitter` and `transmitter2` entries are used to define separate angular position observables (as observed by the `receiver`), from
          which the observable is then computed

      - name: light_time_correction_settings # [py]
        type: List[ :class:`LightTimeCorrectionSettings` ], default = list() # [py]
        description: |
          List of corrections for the light-time that are to be used. Default is none, which will result
          in the signal being modelled as moving in a straight line with the speed of light

      - name: bias_settings # [py]
        type: :class:`ObservationBiasSettings`, default = None # [py]
        description: |
          Settings for the observation bias that is to be used for the observation, default is none (unbiased observation)
     
      - name: light_time_convergence_settings # [py]
        type: :class:`LightTimeConvergenceCriteria`, default = :func:`light_time_convergence_settings`() # [py]
        description: |
          Settings for convergence of the light-time (default settings defined in :func:`light_time_convergence_settings`)

    returns:
        type: :class:`ObservationSettings`  # [py]
        description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationModelSettings` class
          defining the settings for the angular position observable.
  #######################################################################

  - name: one_way_doppler_instantaneous # [py]
    short_summary: "Factory function for creating settings for a one-way instantaneous Doppler observable."
    extended_summary: |
      Factory function for creating settings for a one-way instantaneous Doppler observable for a single link definition. The associated observation model creates
      a single-valued observable :math:`h_{_{\text{1-Dopp.}}}` as follows (in the unbiased case):
 
      .. math::
         h_{_{\text{1-Dopp.}}}=c\left(\frac{d\tau_{T}}{dt_{T}}\frac{t_{T}}{dt_{R}}\frac{dt_{R}}{d\tau_{R}}-1\right)
         
      where :math:`t` and :math:`\tau` denote coordinate and proper time of the transmitter T and receiver R, respectively.
      The receiver and transmitter position and coordinate time are computed identically as described for the :func:`~tudatpy.numerical_simulation.estimation_setup.observation.one_way_range`.
      The detailed mathematical implementation are described on TODO.

      This observable represents the 'instantaneous (non-integrated)' Doppler observable, as obtained from open-loop observations.
      It should *not* be used for the modelling of the typical closed-loop observations used in deep space tracking (for which the 
      :func:`~tudatpy.numerical_simulation.estimation_setup.observation.one_way_doppler_averaged` should be used)

      The coordinate
      time derivative :math:`\frac{t_{A}}{dt_{B}}` is always computed when generating this observable. Settings for the proper time
      rates :math:`\frac{d\tau}{dt}` can be specified by the user through the ``transmitter_proper_time_rate_settings`` and ``receiver_proper_time_rate_settings``
      inputs. Whene these are left empty, the proper time rates are omitted (set to 1.0).

      The observable may be non-dimensionalized by the speed of light :math:`c`, which results in the observable being equal to thee received and transmitted signal frequencies :math:`f_{R}/f_{T}-1`.
   
    parameters:
      - name: link_ends # [py]
        type: LinkDefinition # [py]
        description: |
          Set of link ends that define the geometry of the observation. This observable requires that the
          `transmitter` and `receiver` :class:`~tudatpy.numerical_simulation.estimation_setup.observation.LinkEndType` entries to be defined.

      - name: light_time_correction_settings # [py]
        type: List[ :class:`LightTimeCorrectionSettings` ], default = list() # [py]
        description: |
          List of corrections for the light-time that are to be used. Default is none, which will result
          in the signal being modelled as moving in a straight line with the speed of light

      - name: bias_settings # [py]
        type: :class:`ObservationBiasSettings`, default = None # [py]
        description: |
          Settings for the observation bias that is to be used for the observation, default is none (unbiased observation)

      - name: transmitter_proper_time_rate_settings # [py]
        type: :class:`DopplerProperTimeRateSettings`, default = None # [py]
        description: |
          Settings for computing the transmitter proper time rate :math:`\frac{d\tau}{dt}`, default is none (:math:`\frac{d\tau}{dt}=1`)

      - name: receiver_proper_time_rate_settings # [py]
        type: :class:`DopplerProperTimeRateSettings`, default = None # [py]
        description: |
          Settings for computing the receiver proper time rate :math:`\frac{d\tau}{dt}`, default is none (:math:`\frac{d\tau}{dt}=1`)
     
      - name: light_time_convergence_settings # [py]
        type: :class:`LightTimeConvergenceCriteria`, default = :func:`light_time_convergence_settings`() # [py]
        description: |
          Settings for convergence of the light-time (default settings defined in :func:`light_time_convergence_settings`)

      - name: normalized_with_speed_of_light # [py]
        type: bool, default = false # [py]
        description: |
          Option to non-dimensionalize the observable with speed of light :math:`c`

    returns:
        type: :class:`OneWayDopplerObservationSettings`  # [py]
        description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationModelSettings` derived :class:`OneWayDopplerObservationSettings` class
          defining the settings for the one-way open doppler observable observable.


  #######################################################################

  - name: two_way_doppler_instantaneous # [py]
    short_summary: "Factory function for creating settings for a two-way instantaneous Doppler observable."
    extended_summary: |

      Factory function for creating settings for a two-way instantaneous Doppler observable for a single link definition. The associated observation model creates
      a single-valued observable :math:`h_{_{\text{2-Dopp.}}}` as follows (in the unbiased case), by combining the up- and downlink one-way 
      instantanenous Doppler observable :math:`h_{_{\text{1-Dopp.}}}` 
      (both normalized by speed of light c, see :func:`~tudatpy.numerical_simulation.estimation_setup.observation.one_way_doppler_instantaneous`) as follows:
    
      .. math::
         h_{_{\text{2-Dopp.}}}=c\left((\left(h_{_{\text{1-Dopp.}}}\right)_{\text{up}}+1)(\left(h_{_{\text{1-Dopp.}}}\right)_{\text{down}}+1)-1\right)

      The resulting observable is non-dimensional (but can be converted to an observed range-rate by multiplying with speed of light :math:`c`)

      This observable represents the 'instantaneous (non-integrated)' Doppler observable, as obtained from open-loop observations.
      It should *not* be used for the modelling of the typical closed-loop observations used in deep space tracking (for which the 
      :func:`~tudatpy.numerical_simulation.estimation_setup.observation.two_way_doppler_averaged` should be used)

      The observable may be non-dimensionalized by the speed of light :math:`c`,
      which results in the observable being equal to the received and transmitted signal frequencies :math:`f_{R}/f_{T}-1`.

    parameters:
      - name: link_ends # [py]
        type: LinkDefinition # [py]
        description: |
          Set of link ends that define the geometry of the observation. This observable requires the
          `transmitter`, `retransmitter` and `receiver` :class:`~tudatpy.numerical_simulation.estimation_setup.observation.LinkEndType` entries to be defined

      - name: light_time_correction_settings # [py]
        type: List[ :class:`LightTimeCorrectionSettings` ], default = list() # [py]
        description: |
          List of corrections for the light-time that are to be used for each constituent one-way range. Default is none, which will result
          in the signal being modelled as moving in a straight line with the speed of light

      - name: bias_settings # [py]
        type: :class:`ObservationBiasSettings`, default = None # [py]
        description: |
          Settings for the observation bias that is to be used for the observation, default is none (unbiased observation).
          Note that only one bias setting is applied to the n-way observable.s

      - name: transmitter_proper_time_rate_settings # [py]
        type: :class:`DopplerProperTimeRateSettings`, default = None # [py]
        description: |
          Settings for computing the transmitter proper time rate :math:`\frac{d\tau}{dt}`, default is none (:math:`\frac{d\tau}{dt}=1`)

      - name: receiver_proper_time_rate_settings # [py]
        type: :class:`DopplerProperTimeRateSettings`, default = None # [py]
        description: |
          Settings for computing the receiver proper time rate :math:`\frac{d\tau}{dt}`, default is none (:math:`\frac{d\tau}{dt}=1`)
     
      - name: light_time_convergence_settings # [py]
        type: :class:`LightTimeConvergenceCriteria`, default = :func:`light_time_convergence_settings`() # [py]
        description: |
          Settings for convergence of the light-time (default settings defined in :func:`light_time_convergence_settings`)

      - name: normalized_with_speed_of_light # [py]
        type: bool, default = false # [py]
        description: |
          Option to non-dimensionalize the observable with speed of light :math:`c`

    returns:
        type: :class:`TwoWayDopplerObservationSettings`  # [py]
        description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationModelSettings` derived :class:`TwoWayDopplerObservationSettings` class
          defining the settings for the two-way open doppler observable.

  #######################################################################

  - name: two_way_doppler_instantaneous_from_one_way_links # [py]
    short_summary: "Factory function for creating settings for a two-way instantaneous Doppler observable."
    extended_summary: |

      Factory function for creating settings for a two-way instantaneous Doppler observable for a single link definition. The
      implementation is the same as :func:`~tudatpy.numerical_simulation.estimation_setup.observation.two_way_doppler_instantaneous`, with the difference
      that the constituent one-way ranges may have different settings.
         
      The observable may be non-dimensionalized by the speed of light :math:`c` (in the constituent one-way Doppler observable settings),
      which results in the observable being equal to the received and transmitted signal frequencies :math:`f_{R}/f_{T}-1`.
   
    parameters:
      - name: uplink_doppler_settings # [py]
        type: :class:`OneWayDopplerObservationSettings` # [py]
        description: |
          Settings for uplink leg of one-way observable, created using :func:`~tudatpy.numerical_simulation.estimation_setup.observation.one_way_open_loop_doppler`

      - name: downlink_doppler_settings # [py]
        type: :class:`OneWayDopplerObservationSettings` # [py]
        description: |
          Settings for downlink leg of one-way observable, created using :func:`~tudatpy.numerical_simulation.estimation_setup.observation.one_way_open_loop_doppler`

      - name: bias_settings # [py]
        type: :class:`ObservationBiasSettings`, default = None # [py]
        description: |
          Settings for the observation bias that is to be used for the full observation, default is none (unbiased observation). Note that,
          even if no bias is applied to the two-way observable, the constituent one-way observables may still be biased.
     
      - name: light_time_convergence_settings # [py]
        type: :class:`LightTimeConvergenceCriteria`, default = :func:`light_time_convergence_settings`() # [py]
        description: |
          Settings for convergence of the light-time (default settings defined in :func:`light_time_convergence_settings`)

    returns:
        type: :class:`TwoWayDopplerObservationSettings`  # [py]
        description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationModelSettings` derived :class:`TwoWayDopplerObservationSettings` class
          defining the settings for the two-way open doppler observable.

  #######################################################################

  - name: one_way_doppler_averaged # [py]
    short_summary: "Factory function for creating settings for a one-way averaged Doppler observable."
    extended_summary: |
      Factory function for creating observation model settings for one-way averaged Doppler observables, for a single link definition. The associated observation model creates
      a single-valued observable :math:`h_{_{\text{1-\bar{Dopp}}}}` as follows (in the unbiased case):
      
      .. math::
         h_{_{\text{1-\bar{Dopp}}}}&=c\int_{t-\Delta t}^{t+\Delta t}\frac{t_{T}}{dt_{R}}d\bar{t}\\
                                   &=\frac{h_{_{\text{1-range}}}(t_{R}=t+\Delta t,t_{T})-h_{_{\text{1-range}}}(t_{R}=t,t_{T})}{\Delta t}

      where, in the latter formulation (which is the one that is implemented), the observable is referenced to the receiver time. This averaged Doppler observable
      is computed as the difference of two one-way range observables (see :func:`~tudatpy.numerical_simulation.estimation_setup.observation.one_way_range`), 
      with the reference time shifted by :math:`\Delta t`. As such, it is sensitive to numerical errors for small :math:`\Delta t`

      The integration time :math:`\Delta t` is defined in the ancilliary settings when simulating the observations (with 60 s as default).

    parameters:
      - name: link_ends # [py]
        type: LinkDefinition # [py]
        description: |
          Set of link ends that define the geometry of the observation. This observable requires that the
          `transmitter` and `receiver` :class:`~tudatpy.numerical_simulation.estimation_setup.observation.LinkEndType` entries to be defined.

      - name: light_time_correction_settings # [py]
        type: List[ :class:`LightTimeCorrectionSettings` ], default = list() # [py]
        description: |
          List of corrections for the light-time that are to be used. Default is none, which will result
          in the signal being modelled as moving in a straight line with the speed of light

      - name: bias_settings # [py]
        type: :class:`ObservationBiasSettings`, default = None # [py]
        description: |
          Settings for the observation bias that is to be used for the observation, default is none (unbiased observation)
     
      - name: light_time_convergence_settings # [py]
        type: :class:`LightTimeConvergenceCriteria`, default = :func:`light_time_convergence_settings`() # [py]
        description: |
          Settings for convergence of the light-time (default settings defined in :func:`light_time_convergence_settings`)

    returns:
        type: :class:`ObservationSettings`  # [py]
        description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationModelSettings` derived `OneWayDifferencedRangeRateObservationSettings` class
          defining the settings for the one-way closed-loop doppler observable.

  #######################################################################

  - name: n_way_doppler_averaged # [py]
    short_summary: "Factory function for creating settings for an n-way averaged Doppler observable."
    extended_summary: |
      Factory function for creating observation model settings for n-way averaged Doppler observables, for a single link definition. The implemenation is
      analogous to the :func:`~tudatpy.numerical_simulation.estimation_setup.observation.one_way_doppler_averaged` observable. But, in the present case
      the observable is computed from the difference of two n-way range observables, with the reference time shifted by :math:`\Delta t`.

      The integration time :math:`\Delta t` is defined in the ancilliary settings when simulating the observations (with 60 s as default).

    parameters:
      - name: link_ends # [py]
        type: LinkDefinition # [py]
        description: |
          Set of link ends that define the geometry of the observation. This observable requires the
          `transmitter` and `receiver` :class:`~tudatpy.numerical_simulation.estimation_setup.observation.LinkEndType` entries to be defined, as well
          as a `retransmitter1`, `retransmitter2`, .... (with the number of retransmitters to be defined by the user). 

      - name: light_time_correction_settings # [py]
        type: List[ :class:`LightTimeCorrectionSettings` ], default = list() # [py]
        description: |
          List of corrections for the light-time that are to be used. Default is none, which will result
          in the signal being modelled as moving in a straight line with the speed of light

      - name: bias_settings # [py]
        type: :class:`ObservationBiasSettings`, default = None # [py]
        description: |
          Settings for the observation bias that is to be used for the observation, default is none (unbiased observation)
     
      - name: light_time_convergence_settings # [py]
        type: :class:`LightTimeConvergenceCriteria`, default = :func:`light_time_convergence_settings`() # [py]
        description: |
          Settings for convergence of the light-time (default settings defined in :func:`light_time_convergence_settings`)

    returns:
        type: :class:`ObservationSettings`  # [py]
        description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationModelSettings` derived `NWayDifferencedRangeRateObservationSettings` class
          defining the settings for the one-way closed-loop doppler observable.

  #######################################################################

  - name: n_way_doppler_averaged_from_one_way_links # [py]
    short_summary: "Factory function for creating settings for an n-way averaged Doppler observable."
    extended_summary: |
      Factory function for creating observation model settings for n-way averaged Doppler observables, for a single link definition. 
      The implementation is the same as :func:`~tudatpy.numerical_simulation.estimation_setup.observation.n_way_doppler_averaged`, with the difference
      that the constituent one-way range observables may have different settings.

    parameters:
      - name: one_way_range_settings # [py]
        type: List[ :class:`ObservationModelSettings` ] # [py]
        description: |
          List of observation model settings for each of the :math:`n` constituent one-way ranges of the n-way averaged range rate observable.
          The ``LinkDefinition`` of this n-way range observable is created from this list, with the ``transmitter`` and ``retransmitter1`` defined by the
          ``transmitter`` and ``receiver`` of the first entry in this list. The ``retransmitter``(n-1) and ``receiver`` are defined by the
          ``transmitter`` and ``receiver`` of the :math:`n`^{th} entry of this list.

      - name: bias_settings # [py]
        type: :class:`ObservationBiasSettings`, default = None # [py]
        description: |
          Settings for the observation bias that is to be used for the observation, default is none (unbiased observation)

    returns:
        type: :class:`ObservationSettings`  # [py]
        description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationModelSettings` derived `NWayDifferencedRangeRateObservationSettings` class
          defining the settings for the one-way closed-loop doppler observable.

 #######################################################################

  - name: two_way_doppler_averaged # [py]
    short_summary: "Factory function for creating settings for a two-way averaged Doppler observable."
    extended_summary: |
      Factory function for creating settings for a two-way averaged Doppler observable. Same as :func:`~tudatpy.numerical_simulation.estimation_setup.observation.n_way_doppler_averaged`,       
      with :math:`n=2`. This function is provided for convenience.

    parameters:
      - name: link_ends # [py]
        type: LinkDefinition # [py]
        description: |
          Set of link ends that define the geometry of the observation. This observable requires the
          `transmitter`, `retransmitter` and `receiver` :class:`~tudatpy.numerical_simulation.estimation_setup.observation.LinkEndType` entries to be defined

      - name: light_time_correction_settings # [py]
        type: List[ :class:`LightTimeCorrectionSettings` ], default = list() # [py]
        description: |
          List of corrections for the light-time that are to be used. Default is none, which will result
          in the signal being modelled as moving in a straight line with the speed of light

      - name: bias_settings # [py]
        type: :class:`ObservationBiasSettings`, default = None # [py]
        description: |
          Settings for the observation bias that is to be used for the observation, default is none (unbiased observation)
     
      - name: light_time_convergence_settings # [py]
        type: :class:`LightTimeConvergenceCriteria`, default = :func:`light_time_convergence_settings`() # [py]
        description: |
          Settings for convergence of the light-time (default settings defined in :func:`light_time_convergence_settings`)

    returns:
        type: :class:`ObservationSettings`  # [py]
        description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationModelSettings` derived `NWayDifferencedRangeRateObservationSettings` class
          defining the settings for the one-way closed-loop doppler observable.

  #######################################################################

  - name: two_way_doppler_averaged_from_one_way_links # [py]
    short_summary: "Factory function for creating settings for a two-way averaged Doppler observable."
    extended_summary: |
      Factory function for creating settings for a two-way averaged Doppler observable. Same as 
      :func:`~tudatpy.numerical_simulation.estimation_setup.observation.n_way_doppler_averaged_from_one_way_links`,       
      with :math:`n=2`. This function is provided for convenience.

    parameters:
      - name: one_way_range_settings # [py]
        type: List[ :class:`ObservationModelSettings` ] # [py]
        description: |
          List of observation model settings of size two, with the first entry the one-way range settings for the uplink, and the second entry the one-way range settings for the downlink.
          The ``LinkDefinition`` of this two-way range observable is created from this list, with the ``transmitter`` and ``retransmitter1`` defined by the
          ``transmitter`` and ``receiver`` of the first entry in this list. The ``retransmitter`` and ``receiver`` are defined by the
          ``transmitter`` and ``receiver`` of the second entry of this list.

      - name: bias_settings # [py]
        type: :class:`ObservationBiasSettings`, default = None # [py]
        description: |
          Settings for the observation bias that is to be used for the observation, default is none (unbiased observation)

    returns:
        type: :class:`ObservationSettings`  # [py]
        description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationModelSettings` derived `NWayDifferencedRangeRateObservationSettings` class
          defining the settings for the one-way closed-loop doppler observable.

  #######################################################################

  - name: cartesian_position # [py]
    short_summary: "Factory function for creating settings for a Cartesian position observable."
    extended_summary: |
      Factory function for creating observation model settings of Cartesian position type observables.
      Note that this observable is typically not realized in reality, but can be very useful for verification or analysis purposes.
      This observable provides the inertial (w.r.t. global frame origin) Cartesian position of the `observed_body` defined by the `link_ends` input.
      The observable has size 3, and contains the :math:`x`, :math:`y` and :math:`z` position

    parameters:
      - name: link_ends # [py]
        type: LinkDefinition # [py]
        description: |
          Set of link ends that define the geometry of the observation. This observable requires that the
          `observed_body`` :class:`~tudatpy.numerical_simulation.estimation_setup.observation.LinkEndType` entries to be defined.

      - name: bias_settings # [py]
        type: :class:`ObservationBiasSettings`, default = None # [py]
        description: |
          Settings for the observation bias that is to be used for the observation, default is none (unbiased observation)	

    returns:
        type: :class:`ObservationSettings`  # [py]
        description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationModelSettings` class
          defining the settings for the cartesian position observable.

  #######################################################################

  - name: cartesian_velocity # [py]
    short_summary: "Factory function for creating settings for a Cartesian velocity observable."
    extended_summary: |
      Factory function for creating observation model settings of Cartesian position type observables.
      Note that this observable is typically not realized in reality, but can be very useful for verification or analysis purposes.
      This observable provides the inertial (w.r.t. global frame origin) Cartesian velocity of the `observed_body` defined by the `link_ends` input.
      The observable has size 3, and contains the :math:`x`, :math:`y` and :math:`z` velocity

    parameters:
      - name: link_ends # [py]
        type: LinkDefinition # [py]
        description: |
          Set of link ends that define the geometry of the observation. This observable requires that the
          `observed_body`` :class:`~tudatpy.numerical_simulation.estimation_setup.observation.LinkEndType` entries to be defined.

      - name: bias_settings # [py]
        type: :class:`ObservationBiasSettings`, default = None # [py]
        description: |
          Settings for the observation bias that is to be used for the observation, default is none (unbiased observation)	

    returns:
        type: :class:`ObservationSettings`  # [py]
        description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationModelSettings` class
          defining the settings for the cartesian velocity observable.

  #######################################################################

  - name: 313_euler_angles # [py]
    short_summary: "Factory function for creating settings for observable containing the body orientation as Euler angles."
    extended_summary: |
      Factory function for creating observation model settings of Euler angle type observables.
      This observable can be used for *e.g.* body attitude observations, but can also be very useful as 'synthetic' observable for verification or analysis purposes.
      This observable provides the rotation from inertial (defined by the global frame orientation) to body-fixed orientation of the 
      body specified by the `observed_body` in the `link_ends` input.  The observable
      has size 3, and contains the  3-1-3 (e.g. z-x-z) Euler angles

    parameters:
      - name: link_ends # [py]
        type: LinkDefinition # [py]
        description: |
          Set of link ends that define the geometry of the observation. This observable requires that the
          `observed_body`` :class:`~tudatpy.numerical_simulation.estimation_setup.observation.LinkEndType` entries to be defined.

      - name: bias_settings # [py]
        type: :class:`ObservationBiasSettings`, default = None # [py]
        description: |
          Settings for the observation bias that is to be used for the observation, default is none (unbiased observation)	

    returns:
        type: :class:`ObservationSettings`  # [py]
        description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationModelSettings` class
          defining the settings for the Euler angle observable.


  ###############         VIABILITY 		 ################################
  # factory functions

  - name: elevation_angle_viability # [py]
    short_summary: "Factory function for defining single elevation angle viability setting."
    extended_summary: |
      Factory function for defining elevation angle viability settings for single link end.
      When simulating observations, this setting ensures that any applicable observations, for which the local elevation angle at link end is less than some limit value, will be omitted.

    parameters:

      - name: link_end_id # [py]
        type: Tuple[str,str] # [py]
        description: |
          Link end (as defined by body/reference point pair, see TODO), for which the elevation angle viability setting is to be created.
          To apply these settings to *all* ground station on a given body (such as "Earth"), use ["Earth", ""].

      - name: elevation_angle # [py]
        type: float
        description: |
          Limit elevation angle, below which no observations are produced when using the :func:`~tudatpy.numerical_simulation.estimation_setup.observation.simulate_observations` function. Note: this
          value must be in radians.
     
    returns:
        type: :class:`ObservationViabilitySettings`  # [py]
        description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationViabilitySettings` class, defining the settings for observation viability

  #######################################################################

  - name: elevation_angle_viability_list # [py]
    short_summary: "Factory function for defining list of elevation angle viability settings."
    extended_summary: |
      Factory function for defining elevation angle viability settings for multiple link ends.
      Each entry in the returned list contains the observation viability settings for one link end.
      When simulating observations, these settings ensure that any applicable observations, for which the local elevation angle at a link end is less than some limit value, will be omitted.

    parameters:

      - name: link_end_ids # [py]
        type: List[ Tuple[str,str] ] # [py]
        description: |
          List of individual link ends (as defined by body/reference point pair, see TODO), for which the elevation angle viability setting is to be created.
          To apply these settings to *all* ground station on a given body (such as "Earth"), use ["Earth", ""].
          For each link end included in this list, it will be checked if a signal received by and/or transmitted (or reflected) by this
          link end violates the minimum elevation angle constraint.

      - name: elevation_angle # [py]
        type: float
        description: |
          Limit elevation angle, below which no observations are produced when using the :func:`~tudatpy.numerical_simulation.estimation_setup.observation.simulate_observations` function. Note: this
          value must be in radians.

    returns:
      type: :class:`ObservationViabilitySettings`  # [py]
      description: List of :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationViabilitySettings` objects, each
        defining the settings for observation viability of one link end.

  #######################################################################

  - name: body_avoidance_viability # [py]
    short_summary: "Factory function for defining body avoidance observation viability settings."
    extended_summary: |
      Factory function for defining body avoidance observation viability settings for single link ends.
      When simulating observations, this settings ensures that any applicable observations, for which the signal path passes 'too close' to a body, will be omitted.
      The definition of 'too close' is computed as the angle between:
      
      * The line-of-sight vector from a link end to a given third body
      * The line-of-sight between two link ends 

      This constraint is typically used to prevent the Sun from being too close to the field-of-view of the telescope(s), as defined by
      a so-called 'SPE' (Sun-Probe-Earth) angle constraint. The present viability setting generalizes this constraint.

    parameters:

      - name: link_end_id # [py]
        type: Tuple[str,str] # [py]
        description: |
          Link end (as defined by body/reference point pair, see TODO), for which the viability settings are to be created.
          To apply these settings to *all* ground station on a given body (such as "Earth"), use ["Earth", ""] is entry in this list.
          For each link end included in this list, it will be checked if a signal received by and/or transmitted (or reflected) by this
          link end passes too close to the specified body.

      - name: body_to_avoid # [py]
        type: str  # [py]
        description: |
          Name of the body which the signal path should not pass 'too close' to.

      - name: avoidance_angle # [py]
        type: float  # [py]
        description: |
          Limit angle (generalization of SPE angle), below which no observations are produced when using the :func:`~tudatpy.numerical_simulation.estimation_setup.observation.simulate_observations` function. Note: this
          value must be in radians.
     
    returns:
        type: :class:`ObservationViabilitySettings`  # [py]
        description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationViabilitySettings`, defining the settings for observation viability.

  #######################################################################

  - name: body_avoidance_viability_list # [py]
    short_summary: "Factory function for defining list of body avoidance viability settings."
    extended_summary: |
      Factory function for defining body avoidance viability settings for multiple link ends.
      Each entry in the returned list contains the observation viability settings for one link end.
      When simulating observations, these settings ensure that any applicable observations, for which the signal path passes 'too close' to a body, will be omitted.
      The definition of 'too close' is computed as the angle between:

      * The line-of-sight vector from a link end to a given third body
      * The line-of-sight between two link ends

      This constraint is typically used to prevent the Sun from being too close to the field-of-view of the telescope(s), as defined by
      a so-called 'SPE' (Sun-Probe-Earth) angle constraint. The present viability setting generalizes this constraint.

    parameters:

      - name: link_end_ids # [py]
        type: List[ Tuple[str,str] ]# [py]
        description: |
          List of individual link ends (as defined by body/reference point pair, see TODO), for which the elevation angle viability setting is to be created.
          To apply these settings to *all* ground station on a given body (such as "Earth"), use ["Earth", ""].

      - name: body_to_avoid # [py]
        type: str  # [py]
        description: |
          Name of the body which the signal path should not pass 'too close' to.

      - name: avoidance_angle # [py]
        type: float  # [py]
        description: |
          Limit angle (generalization of SPE angle), below which no observations are produced when using the :func:`~tudatpy.numerical_simulation.estimation_setup.observation.simulate_observations` function. Note: this
          value must be in radians.

    returns:
      type: :class:`ObservationViabilitySettings`  # [py]
      description: List of :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationViabilitySettings` objects, each
        defining the settings for observation viability of one link end.

  #######################################################################

  - name: body_occultation_viability # [py]
    short_summary: "Factory function for defining body occultation viability settings."
    extended_summary: |
      Factory function for defining body occultation viability settings for single link ends.
      When simulating observations, this setting ensures that any applicable observations, for which the signal path is occulted by a given body, will be omitted.
      The occultation is computed using the shape model of the specified body.

    parameters:

      - name: link_end_id # [py]
        type: Tuple[str,str] # [py]
        description: |
          Link end (as defined by body/reference point pair, see TODO), for which the viability settings are to be created.
          To apply these settings to *all* ground station on a given body (such as "Earth"), use ["Earth", ""] is entry in this list.

      - name: body_to_avoid # [py]
        type: str  # [py]
        description: |
          Name of the body which the signal path should not be occulted by.

    returns:
      type: :class:`ObservationViabilitySettings`  # [py]
      description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationViabilitySettings`, defining the settings for observation viability.

  #######################################################################

  - name: body_occultation_viability_list # [py]
    short_summary: "Factory function for defining body occultation viability settings."
    extended_summary: |
      Factory function for defining body occultation viability settings for multiple link ends.
      Each entry in the returned list contains the observation viability settings for one link end.
      When simulating observations, these settings ensure that any applicable observations, for which the signal path is occulted by a given body, will be omitted.
      The occultation is computed using the shape model of the specified body.

    parameters:

      - name: link_end_ids # [py]
        type: List[ Tuple[str,str] ] # [py]
        description: |
          List of individual link ends (as defined by body/reference point pair, see TODO), for which the viability settings are to be created.
          To apply these settings to *all* ground station on a given body (such as "Earth"), use ["Earth", ""] is entry in this list.
          For each link end included in this list, it will be checked if a signal received by and/or transmitted (or reflected) by this
          link end is occulted by the specified body.

      - name: body_to_avoid # [py]
        type: str  # [py]
        description: |
          Name of the body which the signal path should not be occulted by.

    returns:
        type: :class:`ObservationViabilitySettings`  # [py]
        description: List of :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationViabilitySettings` objects, each
          defining the settings for observation viability of one link end.


  ############## SIMULATION SETTINGS   ###########################(%! here)
  # factory functions
  - name: doppler_ancilliary_settings # [py]

    short_summary: "Factory function for creating ancilliary settings for averaged Doppler observable."
    extended_summary: |
      Factory function for creating ancilliary settings for an averaged Doppler observable. Specifically, this
      function can be used to create settings for the integration time of the observable. Note: in case no retransmission
      delays (or other additional ancilliary settings) are to be defined, this setting may be used for one-, two-, or N-way
      averaged Doppler.

    parameters:
      - name: integration_time # [py]
        type: float, default = 60.0 # [py]
        description: Integration time that is to be used for the averaged Doppler observable


    returns:
      type: :class:`ObservationAncilliarySimulationSettings`  # [py]
      description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationAncilliarySimulationSettings`
        with the required settings.

  #######################################################################

  - name: two_way_range_ancilliary_settings # [py]

    short_summary: "Factory function for creating ancilliary settings for two-way range observable."
    extended_summary: |
      Factory function for creating ancilliary settings for a two-way range observable. Specifically, this
      function can be used to create settings for the retransmission delay of the observable. NOTE:
      this function is provided for convenience, and is equivalent to calling :func:`~tudatpy.numerical_simulation.estimation_setup.observation.n_way_range_ancilliary_settings`
      with a single retransmission delay.

    parameters:
      - name: retransmission_delay # [py]
        type: float, default = 0.0 # [py]
        description: Retransmission delay that is to be applied to the simulation of the two-way observable


    returns:
      type: :class:`ObservationAncilliarySimulationSettings`  # [py]
      description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationAncilliarySimulationSettings`
        with the required settings.

  #######################################################################

  - name: two_way_doppler_ancilliary_settings # [py]

    short_summary: "Factory function for creating ancilliary settings for two-way averaged Doppler observable."
    extended_summary: |
      Factory function for creating ancilliary settings for a two-way range observable. Specifically, this
      function can be used to create settings for the retransmission delay of the observable.  NOTE:
      this function is provided for convenience, and is equivalent to calling :func:`~tudatpy.numerical_simulation.estimation_setup.observation.n_way_doppler_ancilliary_settings`
      with a single retransmission delay.

    parameters:
      - name: integration_time # [py]
        type: float, default = 60.0 # [py]
        description: Integration time that is to be used for the averaged Doppler observable

      - name: retransmission_delay # [py]
        type: float, default = 0.0 # [py]
        description: Retransmission delay that is to be applied to the simulation of the two-way observable


    returns:
      type: :class:`ObservationAncilliarySimulationSettings`  # [py]
      description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationAncilliarySimulationSettings`
        with the required settings.
  #######################################################################

  - name: n_way_range_ancilliary_settings # [py]

    short_summary: "Factory function for creating ancilliary settings for n-way range observable."
    extended_summary: |
      Factory function for creating ancilliary settings for a n-way range observable. Specifically, this
      function can be used to create settings for the retransmission delays of the observable, for each of the retransmitters.

    parameters:
      - name: retransmission_delays # [py]
        type: list[ float ], default = None # [py]
        description: Retransmission delays that are to be applied to the simulation of the n-way observable. 
          If kept empty, this results in 0 retransmission delay at each retransmitter. If defined, this list must be the same
          length as the number of retransmitters, and the :math:`i^{th}` entry contains the retransmission delay of the :math:`i^{th}`
          retrasmitter


    returns:
      type: :class:`ObservationAncilliarySimulationSettings`  # [py]
      description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationAncilliarySimulationSettings`
        with the required settings.

  #######################################################################

  - name: n_way_doppler_ancilliary_settings # [py]

    short_summary: "Factory function for creating ancilliary settings for n-way averaged Doppler observable."
    extended_summary: |
      Factory function for creating ancilliary settings for a n-way averaged Doppler observable. Specifically, this
      function can be used to create settings for the integration time of the observable, and the  retransmission delays for each of the retransmitters.

    parameters:
      - name: integration_time # [py]
        type: float, default = 60.0 # [py]
        description: Integration time that is to be used for the averaged Doppler observable

      - name: retransmission_delays # [py]
        type: list[ float ], default = None # [py]
        description: Retransmission delays that are to be applied to the simulation of the n-way observable. 
          If kept empty, this results in 0 retransmission delay at each retransmitter. If defined, this list must be the same
          length as the number of retransmitters, and the :math:`i^{th}` entry contains the retransmission delay of the :math:`i^{th}`
          retrasmitter


    returns:
      type: :class:`ObservationAncilliarySimulationSettings`  # [py]
      description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationAncilliarySimulationSettings`
        with the required settings.

  #######################################################################

  - name: tabulated_simulation_settings # [py]

    short_summary: "Factory function for creating settings object for observation simulation, using a predefined list of observation times."
    extended_summary: |
      Factory function for creating single simulation settings object, using a predefined list of observation times.
      The list of resulting observations may be reduced compared to the ``simulation_times`` provided here, as
      only observations that meet the viability settings are retained during observation simulation (these may be
      provide directly here through the ``viability_settings`` input, or added later to the resulting settings object). 

    parameters:
      - name: observable_type # [py]
        type: :class:`ObservableType` # [py]
        description: Observable type of which observations are to be simulated.

      - name: link_ends # [py]
        type: LinkDefinition # [py]
        description: Link ends for which observations are to be simulated.

      - name: simulation_times # [py]
        type: List[float] # [py]
        description: List of times at which to perform the observation simulation.

      - name: reference_link_end_type # [py]
        type: :class:`LinkEndType`, default = :class:`LinkEndType`.receiver # [py]
        description: Defines the link end (via the :class:`LinkEndType`) which is used as a reference time for the observation.

      - name: viability_settings # [py]
        type: List[ :class:`ObservationViabilitySettings` ], default = [ ] # [py]
        description: |
          Settings for the creation of the viability criteria calculators, which conduct viability checks on the simulated observations.

      - name: noise_function # [py]
        type: Callable[ [float], numpy.ndarray[numpy.float64[m, 1]] ], default = None # [py]
        description: Function providing the observation noise factors as a function of observation time.

    returns:
      type: :class:`TabulatedObservationSimulationSettings`  # [py]
      description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` derived :class:`~tudatpy.numerical_simulation.estimation_setup.observation.TabulatedObservationSimulationSettings` class.

  #######################################################################

  - name: tabulated_simulation_settings_list # [py] (%! name is not informative, in relation to simple tabulated_simulation_settings)

    short_summary: "Factory function for creating a list of settings object for observation simulation, using a predefined list of observation times."
    extended_summary: |
      Factory function for creating multiple tabulated observation simulation settings objects in a list. This function is 
      equivalent to calling the :func:`~tudatpy.numerical_simulation.estimation_setup.observation.tabulated_simulation_settings` repeatedly, with the different 
      observables and link definition provided here through `link_ends_per_observable`. 
      During a single call to this function, one simulation settings object is created for each combination of observable type and link geometry given by the `link_ends_per_observable` parameter.


    parameters:
      - name: link_ends_per_observable # [py]
        type: Dict[:class:`ObservableType`, List[LinkDefinition]]]  # [py]
        description: Link geometry per observable type of which observations are to be simulated.

      - name: simulation_times # [py]
        type: List[ float ] # [py]
        description: List of times at which to perform the observation simulation.

      - name: reference_link_end_type # [py]
        type: :class:`LinkEndType`, default = LinkEndType.receiver # [py]
        description: |
          Defines the link end (via the :class:`LinkEndType`) which is used as a reference for observation times.
          The single link end specified here will be considered as the reference link end for all simulation settings object created in the function call.

      - name: viability_settings # [py]
        type: List[ :class:`ObservationViabilitySettings` ], default = [ ] # [py]
        description: |
          Settings for the creation of the viability criteria calculators, which conduct viability checks on the simulated observations.
          The single settings list given here will be considered as potential viability settings for all simulation settings object created in the function call.


    returns:
      type: List[ TabulatedObservationSimulationSettings ] # [py]
      description: List of :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` derived :class:`~tudatpy.numerical_simulation.estimation_setup.observation.TabulatedObservationSimulationSettings` objects.

  #######################################################################

  - name: get_default_reference_link_end
    short_summary: "Factory function for automatically retrieving the reference link end associated with a given observable type."

    parameters:
      - name: observable_type # [py]
        type: :class:`ObservableType` # [py]
        description: Observable type for which the associated reference link end is to be retrieved.

    returns:
      type: :class:`LinkEndType`
      description: Defines the link end (via the :class:`LinkEndType`) which is typically used as a reference for observation times in *e.g.* :func:`~tudatpy.numerical_simulation.estimation_setup.observation.tabulated_simulation_settings`.

  #######################################################################

  - name: continuous_arc_simulation_settings # [py]

    short_summary: "Factory function for creating settings object for observation simulation, using observation times according to a requirement for a continuous tracking arc."
    extended_summary: |
      Factory function for creating settings object for observation simulation. Unlike the :func:`~tudatpy.numerical_simulation.estimation_setup.observation.tabulated_simulation_settings`
      function, the resulting settings do not define the observation times explicitly. Instead, this settings object determines the observation times adaptively during the
      simulation of the observation, with the requirement that observations should be simulated over a set of contiguous arcs (if possible). The exact algorithm meets the following conditions:

      * Observations are only simulated within the time span of ``start_time`` and ``end_time``
      * A contiguous tracking arc has simulated observations separated by ``interval_between_observations``
      * Starting from ``start_time``, an observation is simulated each ``interval_between_observations``. Once an observation is unviable, as defined by
        the ``arc_limiting_constraints`` input, it is checked whether the arc up until that point 
        is longer in duration than ``minimum_arc_duration``. If it is, the arc is added to the simulated observations. If not, the arc is discarded. In either case, a new arc is started once a 
        viable is observation is encountered
      * If the current arc reaching a duration greater than ``maximum_arc_duration``, the arc is added to the existing observations, and a new arc is started
      * If defined (e.g. if not NaN), the current observation time is incremented by ``minimum_time_between_arcs`` when an arc has been added to the observations.

      Nominally, this algorithm ensures that any arc of observations has a minimum and maximum duration. In addition, it ensures that (if desired) there is a minimum time interval 
      between two tracking arcs. This behaviour can be modified by adding ``additional_viability_settings``, which are *not* used when computing the tracking arcs, but which are instead only used
      to reduce the set of simulated observations afterwards.

    parameters:
      - name: observable_type # [py]
        type: :class:`ObservableType` # [py]
        description: Observable type of which observations are to be simulated.

      - name: link_ends # [py]
        type: LinkDefinition # [py]
        description: Link ends for which observations are to be simulated.

      - name: start_time # [py]
        type: float # [py]
        description: First time at which an observation is to be simulated (and checked for viability).

      - name: end_time # [py]
        type: float # [py]
        description: Maximum time at which an observation is to be simulated (and checked for viability).

      - name: interval_between_observations # [py]
        type: float # [py]
        description: Cadence (in seconds) of subsequent observations in an arc

      - name: arc_limiting_constraints # [py]
        type: List[ :class:`ObservationViabilitySettings` ], default = [ ] # [py]
        description: |
          List of settings for the creation of the viability criteria calculators, which are used to check if an observation is viable, and define
          whether an arc should be terminated.

      - name: minimum_arc_duration # [py]
        type: float # [py]
        description: Minimum permissible time for a tracking arc

      - name: maximum_arc_duration # [py]
        type: float # [py]
        description: Maximum permissible time for a tracking arc

      - name: minimum_time_between_arc # [py]
        type: float, default = NaN # [py]
        description: Minimum time between two tracking arcs. If NaN, this is effectively set to the ``interval_between_observations``
         
      - name: additional_viability_settings # [py]
        type: List[ :class:`ObservationViabilitySettings` ], default = [ ] # [py]
        description: |
          Settings for the creation of the viability criteria calculators, which conduct viability checks on the simulated observations.
          These settings are *not* used to determine whether an arc is to be terminated, but are instead applied after the arcs have been computed.

      - name: noise_function # [py]
        type: Callable[ [float], numpy.ndarray[numpy.float64[m, 1]] ], default = None # [py]
        description: Function providing the observation noise factors as a function of observation time.

    returns:
      type: :class:`TabulatedObservationSimulationSettings`  # [py]
      description: Instance of the :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` derived :class:`~tudatpy.numerical_simulation.estimation_setup.observation.TabulatedObservationSimulationSettings` class.

  #######################################################################

  - name: continuous_arc_simulation_settings_list # [py]

    short_summary: "Factory function for creating a list of settings object for observation simulation, using observation times according to a requirement for a continuous tracking arc."
    extended_summary: |
      Factory function for creating multiple settings objects for observation simulation in a list. This function is 
      equivalent to calling the :func:`~tudatpy.numerical_simulation.estimation_setup.observation.continuous_arc_simulation_settings` repeatedly, with the different 
      observables and link definition provided here through `link_ends_per_observable`. 
      During a single call to this function, one simulation settings object is created for each combination of observable type and link geometry given by the `link_ends_per_observable` parameter.

    parameters:
      - name: link_ends_per_observable # [py]
        type: Dict[:class:`ObservableType`, List[LinkDefinition]]]  # [py]
        description: Link geometry per observable type of which observations are to be simulated.

      - name: start_time # [py]
        type: float # [py]
        description: First time at which an observation is to be simulated (and checked for viability).

      - name: end_time # [py]
        type: float # [py]
        description: Maximum time at which an observation is to be simulated (and checked for viability).

      - name: interval_between_observations # [py]
        type: float # [py]
        description: Cadence (in seconds) of subsequent observations in an arc

      - name: arc_limiting_constraints # [py]
        type: List[ :class:`ObservationViabilitySettings` ], default = [ ] # [py]
        description: |
          List of settings for the creation of the viability criteria calculators, which are used to check if an observation is viable, and define
          whether an arc should be terminated.

      - name: minimum_arc_duration # [py]
        type: float # [py]
        description: Minimum permissible time for a tracking arc

      - name: maximum_arc_duration # [py]
        type: float # [py]
        description: Maximum permissible time for a tracking arc

      - name: minimum_time_between_arc # [py]
        type: float, default = NaN # [py]
        description: Minimum time between two tracking arcs. If NaN, this is effectively set to the ``interval_between_observations``

      - name: additional_viability_settings # [py]
        type: List[ :class:`ObservationViabilitySettings` ], default = [ ] # [py]
        description: |
          Settings for the creation of the viability criteria calculators, which conduct viability checks on the simulated observations.
          These settings are *not* used to determine whether an arc is to be terminated, but are instead applied after the arcs have been computed.

    returns:
      type: List[ :class:`TabulatedObservationSimulationSettings` ]  # [py]
      description: List of :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` derived :class:`~tudatpy.numerical_simulation.estimation_setup.observation.TabulatedObservationSimulationSettings` objects.


  ############## ADDING TO SIMULATION SETTINGS   ###########################

  - name: add_gaussian_noise_to_all # [py]
    short_summary: "Function for adding gaussian noise function to all existing observation simulation settings."
    extended_summary: |
      Function for including simple time-independent and time-uncorrelated Gaussian noise function to the simulation settings of one or more observable(s).
      The noise settings are added to all :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` object(s) in the `observation_simulation_settings` 
      list.
      
      Note: the :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` objects are modified in-place by this function, 
      and thus the function does not return anything.

    parameters:
      - name: observation_simulation_settings # [py]
        type: List[ :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` ]
        description: Observation simulation settings, given by a list of one or more existing :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` objects.

      - name: noise_amplitude # [py]
        type: float # [py]
        description: Standard deviation defining the un-biased Gaussian distribution for the noise.

    returns:
      type: None  # [py]
      description: |
        The :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` object(s) are changed in-place.

  #######################################################################

  - name: add_gaussian_noise_to_observable # [py]
    short_summary: "Function for adding gaussian noise function to existing observation simulation settings of a given observable type."
    extended_summary: |
      As :func:`~tudatpy.numerical_simulation.estimation_setup.observation.add_gaussian_noise_to_all`, except that the function only adds noise to entries of the 
      `observation_simulation_settings` list that matches the specified `observable_type`.  

    parameters:
      - name: observation_simulation_settings # [py]
        type: List[ :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` ]
        description: Observation simulation settings, given by a list of one or more existing :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` objects.

      - name: noise_amplitude # [py]
        type: float # [py]
        description: Standard deviation defining the un-biased Gaussian distribution for the noise.

      - name: observable_type # [py]
        type: :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservableType` # [py]
        description: |
          Identifies the observable type in the observation simulation settings to which the noise is to be added.

    returns:
      type: None  # [py]
      description: |
        The :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` object(s) are changed in-place.

  #######################################################################

  - name: add_gaussian_noise_to_observable_for_link_ends # [py]
    short_summary: "Function for adding gaussian noise function to existing observation simulation settings of a given observable type and link definition."
    extended_summary: |
      As :func:`~tudatpy.numerical_simulation.estimation_setup.observation.add_gaussian_noise_to_all`, except that the function only adds noise to entries of the 
      `observation_simulation_settings` list that matches the specified `observable_type` and `link_definition`.  

    parameters:
      - name: observation_simulation_settings # [py]
        type: List[ :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` ]
        description: Observation simulation settings, given by a list of one or more existing :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` objects.

      - name: noise_amplitude # [py]
        type: float # [py]
        description: Standard deviation defining the un-biased Gaussian distribution for the noise.

      - name: observable_type # [py]
        type: :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservableType` # [py]
        description: |
          Identifies the observable type in the observation simulation settings to which the noise is to be added.

      - name: link_definition # [py]
        type: :class:`~tudatpy.numerical_simulation.estimation_setup.observation.LinkDefinition` # [py]
        description: |
          Identifies the link definition in the observation simulation settings for which the noise is to be added.

    returns:
      type: None  # [py]
      description: |
        The :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` object(s) are changed in-place.

  #######################################################################

  - name: add_viability_check_to_all # [py]
    short_summary: "Function for including viability checks into existing observation simulation settings."
    extended_summary: |
      Function for adding viability checks to the observation simulation settings, such that only observations meeting certain conditions are retained.
      The noise settings are added to all :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` object(s) in the `observation_simulation_settings` 
      list.      
      Note: the :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` objects are modified in-place by this function, 
      and thus the function does not return anything.

    parameters:
      - name: observation_simulation_settings # [py]
        type: List[ :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` ]
        description: Observation simulation settings, given by a list of one or more existing :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` objects.

      - name: viability_settings # [py]
        type: List[ :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationViabilitySettings` ] # [py]
        description: |
          List of one or more :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationViabilitySettings` objects, defining the viability checks to be included.

    returns:
      type: None  # [py]
      description: |
        The :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` object(s) are changed in-place.

  #######################################################################

  - name: add_viability_check_to_observable # [py]
    short_summary: "Function for including viability checks into existing observation simulation settings."
    extended_summary: |
      As :func:`~tudatpy.numerical_simulation.estimation_setup.observation.add_viability_check_to_all`, except that the function only adds viabilitt settings to entries of the 
      `observation_simulation_settings` list that matches the specified `observable_type`.  

    parameters:
      - name: observation_simulation_settings # [py]
        type: List[ :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` ]
        description: Observation simulation settings, given by a list of one or more existing :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` objects.

      - name: viability_settings # [py]
        type: List[ :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationViabilitySettings` ] # [py]
        description: |
          List of one or more :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationViabilitySettings` objects, defining the viability checks to be included.

      - name: observable_type # [py]
        type: :class:`ObservableType` # [py]
        description: |
          Identifies the observable type in the observation simulation settings for which the viability checks are to be considered.

    returns:
      type: None  # [py]
      description: |
        The :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` object(s) are changed in-place.

  #######################################################################

  - name: add_viability_check_to_observable_for_link_ends # [py]
    short_summary: "Function for including viability checks into existing observation simulation settings."
    extended_summary: |
      As :func:`~tudatpy.numerical_simulation.estimation_setup.observation.add_viability_check_to_all`, except that the function only adds noise to entries of the 
      `observation_simulation_settings` list that matches the specified `observable_type` and `link_definition`. 

    parameters:
      - name: observation_simulation_settings # [py]
        type: List[ :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` ]
        description: Observation simulation settings, given by a list of one or more existing :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` objects.

      - name: viability_settings # [py]
        type: List[ :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationViabilitySettings` ] # [py]
        description: |
          List of one or more :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationViabilitySettings` objects, defining the viability checks to be included.

      - name: observable_type # [py]
        type: :class:`ObservableType` # [py]
        description: |
          Identifies the observable type in the observation simulation settings for which the viability checks are to be considered.

      - name: link_definition # [py]
        type: :class:`~tudatpy.numerical_simulation.estimation_setup.observation.LinkDefinition` # [py]
        description: |
          Identifies the link definition in the observation simulation settings for which the viability checks are to be considered.

    returns:
      type: None  # [py]
      description: |
        The :class

  #######################################################################

  - name: add_dependent_variables_to_all # [py]
    short_summary: "Function for including dependent variables into all existing observation simulation settings."
    extended_summary: |
      Function for including the computation and reporting of dependent variables into the observation simulation settings of all observables.
      Note: The associated functionality is not yet mature enough for the end user. Function is exposed for development purposes only.
    
      Modifications are applied to all given :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` object(s),
      matching each :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` object with the corresponding :class:`ObservationDependentVariableSettings` entry in the `dependent_variable_settings` parameter.
      Note that the :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` objects are modified in-place and thus the function does not return anything.

    parameters:
      - name: observation_simulation_settings # [py]
        type: List[ :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` ]
        description: |
          Observation simulation settings, given by a list of one or more existing :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` objects.

      - name: dependent_variable_settings # [py]
        type: List[ :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationDependentVariableSettings` ] # [py]
        description: |
           List of one or more :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationDependentVariableSettings` objects, defining the dependent variables to be considered.

      - name: bodies # [py]
        type: :class:`~tudatpy.numerical_simulation.environment_setup.SystemOfBodies` # [py]
        description: |
           Object consolidating all bodies and environment models that constitute the physical environment.

    returns:
    type: None  # [py]
    description: |
      The :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` object(s) are changed in-place.

  #######################################################################

  - name: add_dependent_variables_to_observable # [py]
    short_summary: "Function for including dependent variables into selected existing observation simulation settings."
    extended_summary: |
      As :func:`~tudatpy.numerical_simulation.estimation_setup.observation.add_dependent_variables_to_all`, except that the function only adds includes the 
      computation and reporting of dependent variables to entries of the `observation_simulation_settings` list that matches the specified `observable_type`.

    parameters:
      - name: observation_simulation_settings # [py]
        type: List[ :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` ]
        description: |
          Observation simulation settings, given by a list of one or more existing :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` objects.

      - name: dependent_variable_settings # [py]
        type: List[ :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationDependentVariableSettings` ] # [py]
        description: |
          List of one or more :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationDependentVariableSettings` objects, defining the dependent variables to be considered.

      - name: bodies # [py]
        type: :class:`~tudatpy.numerical_simulation.environment_setup.SystemOfBodies` # [py]
        description: |
          Object consolidating all bodies and environment models that constitute the physical environment.

      - name: observable_type # [py]
        type: :class:`ObservableType` # [py]
        description: |
          Identifies the observable type in the observation simulation settings for which the dependent variables are to be included.

    returns:
    type: None  # [py]
    description: |
      The :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` object(s) are changed in-place.
      
  #######################################################################

  - name: add_dependent_variables_to_obs_for_links_end # [py]
    short_summary: "Function for including dependent variables into selected existing observation simulation settings for the chosen link ends."
    extended_summary: |
      As :func:`~tudatpy.numerical_simulation.estimation_setup.observation.add_dependent_variables_to_all`, except that the function only adds includes the 
      computation and reporting of dependent variables to entries of the `observation_simulation_settings` list that matches the specified `observable_type` and `link_definition`.

    parameters:
      - name: observation_simulation_settings # [py]
        type: List[ :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` ]
        description: |
          Observation simulation settings, given by a list of one or more existing :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` objects.

      - name: dependent_variable_settings # [py]
        type: List[ :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationDependentVariableSettings` ] # [py]
        description: |
          List of one or more :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationDependentVariableSettings` objects, defining the dependent variables to be considered.

      - name: bodies # [py]
        type: :class:`~tudatpy.numerical_simulation.environment_setup.SystemOfBodies` # [py]
        description: |
          Object consolidating all bodies and environment models that constitute the physical environment.

      - name: observable_type # [py]
        type: :class:`ObservableType` # [py]
        description: |
          Identifies the observable type in the observation simulation settings for which the dependent variables are to be included.

      - name: link_ends # [py]
        type: LinkDefinition # [py]
        description: |
          Link ends for which the dependent variables are to be included.

    returns:
    type: None  # [py]
    description: |
      The :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` object(s) are changed in-place.

  #######################################################################

  - name: add_noise_function_to_all # [py]
    short_summary: "Function for adding a custom noise function to all existing observation simulation settings."
    extended_summary: |
      Function for including a custom noise function to the simulation settings of all observables.
      The noise settings are added to all :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` object(s) in the `observation_simulation_settings` 
      list.

      Note: the :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` objects are modified in-place by this function, 
      and thus the function does not return anything.

    parameters:
      - name: observation_simulation_settings_list # [py]
        type: List[ :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` ]
        description: |
          Observation simulation settings, given by a list of one or more existing :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` objects.

      - name: noise_function # [py]
        type: Callable[ [float], numpy.ndarray[numpy.float64[m, 1]] ] # [py]
        description: |
          Function providing the observation noise factors as a function of observation time.

    returns:
      type: None  # [py]
      description: |
        The :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` object(s) are changed in-place.

  #######################################################################

  - name: add_noise_function_to_observable # [py]
    short_summary: "Function for adding a custom noise function to selected existing observation simulation settings of a given observable type."
    extended_summary: |
      As :func:`~tudatpy.numerical_simulation.estimation_setup.observation.add_noise_function_to_all`, except that the function only adds noise to entries of the 
      `observation_simulation_settings` list that matches the specified `observable_type`.

    parameters:
      - name: observation_simulation_settings_list # [py]
        type: List[ :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` ]
        description: |
          Observation simulation settings, given by a list of one or more existing :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` objects.

      - name: noise_function # [py]
        type: Callable[ [float], numpy.ndarray[numpy.float64[m, 1]] ] # [py]
        description: |
          Function providing the observation noise factors as a function of observation time.

      - name: observable_type # [py]
        type: :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservableType` # [py]
        description: |
          Identifies the observable type in the observation simulation settings to which the noise is to be added.


    returns:
      type: None  # [py]
      description: |
        The :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` object(s) are changed in-place.

  #######################################################################

  - name: add_noise_function_to_observable_for_link_ends # [py]
    short_summary: "Function for adding a custom noise function to existing observation simulation settings of a given observable type and link definition."
    extended_summary: |
      As :func:`~tudatpy.numerical_simulation.estimation_setup.observation.add_noise_function_to_all`, except that the function only adds noise to entries of the 
      `observation_simulation_settings` list that matches the specified `observable_type` and `link_definition`.  

    parameters:
      - name: observation_simulation_settings # [py]
        type: List[ :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` ]
        description: |
          Observation simulation settings, given by a list of one or more existing :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` objects.

      - name: noise_function # [py]
        type: Callable[ [float], numpy.ndarray[numpy.float64[m, 1]] ] # [py]
        description: |
          Function providing the observation noise factors as a function of observation time.

      - name: observable_type # [py]
        type: :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservableType` # [py]
        description: |
          Identifies the observable type in the observation simulation settings to which the noise is to be added.

      - name: link_definition # [py]
        type: :class:`~tudatpy.numerical_simulation.estimation_setup.observation.LinkDefinition` # [py]
        description: |
          Identifies the link definition in the observation simulation settings for which the noise is to be added.


    returns:
      type: None  # [py]
      description: |
        The :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSimulationSettings` object(s) are changed in-place.


