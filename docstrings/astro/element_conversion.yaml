summary: "Functions for converting between sets of orbital elements."

extended_summary: |
  This module provide a variety of functions and classes to
  convert between different representations of translational and
  rotational states (e.g. Cartesian â†” Keplerian).

  .. note:: Rotations between different reference frames are provided in
            the :ref:`\`\`frame_conversion\`\`` module.

notes: |

  Unless specified otherwise, the Keplerian elements are ordered as:

  +-------+---------------------------------------------------------------------------------------+
  | Index | Keplerian Element                                                                     |
  +-------+---------------------------------------------------------------------------------------+
  | ``0`` | Semi-major axis (except if eccentricity = ``1.0``, then represents semi-latus rectum) |
  +-------+---------------------------------------------------------------------------------------+
  | ``1`` | Eccentricity                                                                          |
  +-------+---------------------------------------------------------------------------------------+
  | ``2`` | Inclination                                                                           |
  +-------+---------------------------------------------------------------------------------------+
  | ``3`` | Argument of periapsis                                                                 |
  +-------+---------------------------------------------------------------------------------------+
  | ``4`` | Longitude of ascending node                                                           |
  +-------+---------------------------------------------------------------------------------------+
  | ``5`` | True anomaly                                                                          |
  +-------+---------------------------------------------------------------------------------------+

  Unless specified otherwise, the spherical elements are ordered as:

  +-------+--------------------------------------------------------------------------------------+
  | Index | Spherical State Element                                                              |
  +-------+--------------------------------------------------------------------------------------+
  | ``0`` | Radial distance                                                                      |
  +-------+--------------------------------------------------------------------------------------+
  | ``1`` | Latitude                                                                             |
  +-------+--------------------------------------------------------------------------------------+
  | ``2`` | Longitude                                                                            |
  +-------+--------------------------------------------------------------------------------------+
  | ``3`` | Speed                                                                                |
  +-------+--------------------------------------------------------------------------------------+
  | ``4`` | Flight-path angle                                                                    |
  +-------+--------------------------------------------------------------------------------------+
  | ``5`` | Heading angle                                                                        |
  +-------+--------------------------------------------------------------------------------------+

  Unless specified otherwise, the Modified equinoctial elements (MEE; see `here <https://arc.aiaa.org/doi/pdf/10.2514/1.32237>`_, element set *k*) are ordered as follows.
  The element :math:`I`, which defines the location of the MEE singularity is not treated as a state element, but is provided/determined separately:

  +-------+--------------------------------------------------------------------------------------+
  | Index | Modified equinoctial Element                                                         |
  +-------+--------------------------------------------------------------------------------------+
  | ``0`` | Semi-parameter                                                                       |
  +-------+--------------------------------------------------------------------------------------+
  | ``1`` | f-element                                                                            |
  +-------+--------------------------------------------------------------------------------------+
  | ``2`` | g-element                                                                            |
  +-------+--------------------------------------------------------------------------------------+
  | ``3`` | h-element                                                                            |
  +-------+--------------------------------------------------------------------------------------+
  | ``4`` | k-element                                                                            |
  +-------+--------------------------------------------------------------------------------------+
  | ``5`` | True longitude                                                                       |
  +-------+--------------------------------------------------------------------------------------+

functions:
  - name: cartesian_to_keplerian # [py]
  - name: convertCartesianToKeplerianElements # [cpp]
    short_summary: "Convert Cartesian to Keplerian elements."
    extended_summary: |
      .. note:: See module level documentation for the standard ordering
                convention of Keplerian elements used.


    parameters:
      - name: cartesian_elements # [py]
        type: numpy.ndarray # [py]
      - name: cartesianElements # [cpp]
        type: Eigen::Vector6d # [cpp]
        description: Cartesian state that is to be converted to Keplerian elements

      - name: gravitational_parameter # [py]
        type: float # [py]
      - name: centralBodyGravitationalParameter # [cpp]
        type: double # [cpp]
        description: Gravitational parameter of central body used for conversion

    returns:
        type: numpy.ndarray # [py]
        description: Keplerian elements, as computed from Cartesian element input. 


  - name: keplerian_to_cartesian # [py]
  - name: convertKeplerianToCartesianElements # [cpp]
    short_summary: "Convert Keplerian elements to Cartesian."
    extended_summary: |
      .. note:: See module level documentation for the standard ordering
                convention of Keplerian elements used.

    parameters:
      - name: keplerian_elements # [py]
        type: numpy.ndarray # [py]
      - name: keplerianElements # [cpp]
        type: Eigen::Vector6d # [cpp]
        description: Keplerian state that is to be converted to Cartesian elements

      - name: gravitational_parameter # [py]
        type: float # [py]
      - name: centralBodyGravitationalParameter # [cpp]
        type: double # [cpp]
        description: Gravitational parameter of central body used for conversion

    returns:
        type: numpy.ndarray # [py]
        description: Cartesian elements, as computed from Keplerian element input. 


  - name: keplerian_to_cartesian_elementwise # [py]
  - name: convertKeplerianToCartesianElements # [cpp]
    short_summary: "Convert Keplerian elements to Cartesian, with elementwise input."
    extended_summary: |
      .. note:: The final Keplerian element is always the true anomaly.

    parameters:
      - name: semi_major_axis # [py]
        type: float # [py]
      - name: semiMajorAxis # [cpp]
        type: double # [cpp]
        description: Semi-major axis (except if eccentricity = 1.0, then represents semi-latus rectum)

      - name: eccentricity # [py]
        type: float # [py]
      - name: eccentricity # [cpp]
        type: double # [cpp]
        description: Eccentricity

      - name: inclination # [py]
        type: float # [py]
      - name: inclination # [cpp]
        type: double # [cpp]
        description: Inclination

      - name: argument_of_periapsis # [py]
        type: float # [py]
      - name: argumentOfPeriapsis # [cpp]
        type: double # [cpp]
        description: Argument of periapsis

      - name: longitude_of_ascending_node # [py]
        type: float # [py]
      - name: longitudeOfAscendingNode # [cpp]
        type: double # [cpp]
        description: Longitude of ascending node

      - name: true_anomaly # [py]
        type: float # [py]
      - name: trueAnomaly # [cpp]
        type: double # [cpp]
        description: True anomaly

      - name: gravitational_parameter # [py]
        type: float # [py]
      - name: centralBodyGravitationalParameter # [cpp]
        type: double # [cpp]
        description: Gravitational parameter of central body used for conversion

    returns:
        type: numpy.ndarray # [py]
        description: Cartesian elements, as computed from Keplerian element input. 

  - name: mean_to_true_anomaly # [py]
    short_summary: "Convert mean to true anomaly."
    extended_summary: |
      Convert the mean anomaly of the orbit to its true anomaly. This conversion first converts mean to eccentric anomaly
      (hyperbolic eccentric anomaly, if eccentricity is larger than 1, elliptical eccentric anomaly if it is smaller than 1), and subsequently to true anomaly.

    parameters:
      - name: eccentricity # [py]
        type: float # [py]
        description: Value of the orbital eccentricity

      - name: mean_anomaly # [py]
        type: float # [py]
        description: Value of the mean anomaly

      - name: use_default_initial_guess # [py]
        type: bool, default = True # [py]
        description: Boolean to determine whether the user-defined initial guess (for mean-to-eccentric anomaly conversion) is used, or an automatically generated one.

      - name: non_default_initial_guess # [py]
        type: float, default = NaN # [py]
        description: User-defined initial guess for mean-to-eccentric anomaly conversion, to be used only if ``use_default_initial_guess`` is set to ``False``.

      - name: root_finder # [py]
        type: RootFinder, default = None # [py]
        description: User-defined root finder, overriding default root-finding algorithm for mean-to-eccentric anomaly conversion (default is used if this input is left empty)

    returns:
        type: float # [py]
        description: Value of the true anomaly


  - name: true_to_mean_anomaly # [py]
    short_summary: "Convert true to mean anomaly."
    extended_summary: |
      Convert the true anomaly of the orbit to its mean anomaly. This conversion first converts true to eccentric anomaly
      (hyperbolic eccentric anomaly, if eccentricity is larger than 1, elliptical eccentric anomaly if it is smaller than 1),
      and subsequently to mean anomaly.

    parameters:
      - name: eccentricity # [py]
        type: float # [py]
        description: Value of the orbital eccentricity

      - name: true_anomaly # [py]
        type: float # [py]
        description: Value of the true anomaly

    returns:
        type: float # [py]
        description: Value of the mean anomaly


  - name: true_to_eccentric_anomaly # [py]
    short_summary: "Convert true to eccentric anomaly."

    parameters:
      - name: eccentricity # [py]
        type: float # [py]
        description: Value of the orbital eccentricity

      - name: true_anomaly # [py]
        type: float # [py]
        description: Value of the true anomaly

    returns:
        type: float # [py]
        description: Hyperbolic eccentric anomaly, if eccentricity is larger than 1, elliptical eccentric anomaly if it is smaller than 1


  - name: eccentric_to_true_anomaly # [py]
    short_summary: "Convert eccentric to true anomaly."

    parameters:
      - name: eccentric_anomaly # [py]
        type: float # [py]
        description: Hyperbolic eccentric anomaly, if eccentricity is larger than 1, elliptical eccentric anomaly if it is smaller than 1

      - name: eccentricity # [py]
        type: float # [py]
        description: Value of the orbital eccentricity

    returns:
        type: float # [py]
        description: Value of the true anomaly

  - name: eccentric_to_mean_anomaly # [py]
    short_summary: "Convert eccentric to mean anomaly."

    parameters:
      - name: eccentric_anomaly # [py]
        type: float # [py]
        description: Hyperbolic eccentric anomaly, if eccentricity is larger than 1, elliptical eccentric anomaly if it is smaller than 1

      - name: eccentricity # [py]
        type: float # [py]
        description: Value of the orbital eccentricity

    returns:
        type: float # [py]
        description: Value of the mean anomaly

  - name: mean_to_eccentric_anomaly # [py]
    short_summary: "Convert mean to eccentric anomaly."

    parameters:
      - name: eccentricity # [py]
        type: float # [py]
        description: Value of the orbital eccentricity

      - name: mean_anomaly # [py]
        type: float # [py]
        description: Value of the mean anomaly

      - name: use_default_initial_guess # [py]
        type: bool, default = True # [py]
        description: Boolean to determine whether the user-defined initial guess is used for conversion, or an automatically generated one.

      - name: non_default_initial_guess # [py]
        type: float, default = NaN # [py]
        description: User-defined initial guess for conversion, to be used only if ``use_default_initial_guess`` is set to ``False``.

      - name: root_finder # [py]
        type: RootFinder, default = None # [py]
        description: User-defined root finder, overriding default root-finding algorithm for conversion (default is used if this input is left empty)

    returns:
        type: float # [py]
        description: Value of the eccentric anomaly


  - name: elapsed_time_to_delta_mean_anomaly # [py]
    short_summary: "Convert elapsed time to the corresponding change in mean anomaly along a Keplerian orbit."

    parameters:
      - name: elapsed_time # [py]
        type: float # [py]
        description: Elapsed time (in seconds)

      - name: gravitational_parameter # [py]
        type: float # [py]
        description: Gravitational parameter of central body

      - name: semi_major_axis # [py]
        type: float # [py]
        description: Semi-major axis of orbit

    returns:
        type: float # [py]
        description: Total change in mean anomaly along the Kepler orbit, accumulated in the provided time.


  - name: delta_mean_anomaly_to_elapsed_time # [py]
    short_summary: "Convert change in mean anomaly along a Keplerian orbit to the corresponding elapsed time."

    parameters:
      - name: mean_anomaly_change # [py]
        type: float # [py]
        description: Total change in mean anomaly along the Kepler orbit

      - name: gravitational_parameter # [py]
        type: float # [py]
        description: Gravitational parameter of central body

      - name: semi_major_axis # [py]
        type: float # [py]
        description: Semi-major axis of orbit

    returns:
        type: float # [py]
        description: Time required for the provided mean anomaly change to be accumulated

  - name: mean_motion_to_semi_major_axis # [py]
    short_summary: "Convert mean motion to corresponding semi-major axis (in a Keplerian orbit)."

    parameters:
      - name: mean_motion # [py]
        type: float # [py]
        description: Orbital mean motion

      - name: gravitational_parameter # [py]
        type: float # [py]
        description: Gravitational parameter of central body

    returns:
        type: float # [py]
        description: Semi-major axis corresponding to mean motion

  - name: semi_major_axis_to_mean_motion # [py]
    short_summary: "Convert semi-major axis to corresponding mean motion (along a Keplerian orbit)."

    parameters:
      - name: semi_major_axis # [py]
        type: float # [py]
        description: Semi-major axis of orbit

      - name: gravitational_parameter # [py]
        type: float # [py]
        description: Gravitational parameter of central body

    returns:
        type: float # [py]
        description: Semi-major axis corresponding to mean motion



  - name: keplerian_to_mee_manual_singularity # [py]
    short_summary: "Convert Keplerian to Modified equinoctial elements."
    extended_summary: |
      Convert Keplerian to Modified equinoctial elements (without intermediate step to Cartesian elements). The singularity-flipping
      element :math:`I` is to be provided manually for this function
      
      .. note:: See module level documentation for the standard ordering convention of Modified Equinoctial elements used.


    parameters:
      - name: keplerian_elements # [py]
        type: numpy.ndarray # [py]
        description: Keplerian elements that are to be converted to Modified equinoctial elements

      - name: singularity_at_zero_inclination # [py]
        type: bool # [py]
        description: Singularity at 0 degrees inclination if ``True``, 180 degrees if ``False``

    returns:
        type: numpy.ndarray # [py]
        description: Modified equinoctial elements, as computed from Keplerian element input.


  - name: keplerian_to_mee # [py]
    short_summary: "Convert Keplerian to Modified equinoctial elements."
    extended_summary: |
      Convert Keplerian to Modified equinoctial elements (without intermediate step to Cartesian elements). The singularity-flipping
      element :math:`I` is computed automatically by this function (using :func:`flip_mee_singularity`)
      
      .. note:: See module level documentation for the standard ordering convention of Modified Equinoctial elements used.


    parameters:
      - name: keplerian_elements # [py]
        type: numpy.ndarray # [py]
        description: Keplerian elements that are to be converted to Modified equinoctial elements

    returns:
        type: numpy.ndarray # [py]
        description: Modified equinoctial elements, as computed from Keplerian element input (with element :math:`I` defined by :func:`flip_mee_singularity`).

  - name: flip_mee_singularity # [py]
    short_summary: "Function to determine 'optimal' location of the singularity-flipping modified equinoctial element."
    extended_summary: |
      Function to determine 'optimal' location of the singularity-flipping modified equinoctial element :math:`I`, if orbit inclination is less than
      90 degrees, it puts the singularity at 180 degrees, if it is larger than 90 degrees, it puts it at 0 degrees.


    parameters:
      - name: keplerian_elements # [py]
        type: numpy.ndarray # [py]
        description: Keplerian elements that are to be converted to Modified equinoctial elements

    returns:
        type: bool # [py]
        description: Singularity at 0 degrees inclination if false, 180 degrees if true


  - name: mee_to_keplerian # [py]
    short_summary: "Convert Modified equinoctial to Keplerian elements."
    extended_summary: |
      Modified equinoctial elements to Keplerian (without intermediate step to Cartesian elements).
      
      .. note:: See module level documentation for the standard ordering convention of Modified Equinoctial elements used.


    parameters:
      - name: modified_equinoctial_elements # [py]
        type: numpy.ndarray # [py]
        description: Modified equinoctial elements that are to be converted to Keplerian elements

      - name: singularity_at_zero_inclination # [py]
        type: bool # [py]
        description: Singularity at 0 degrees inclination if false, 180 degrees if true

    returns:
        type: numpy.ndarray # [py]
        description: Keplerian elements, as computed from Modified equinoctial element input.


  - name: cartesian_to_mee # [py]
    short_summary: "Convert Cartesian to Modified equinoctial elements."
    extended_summary: |
      Convert cartesian to Modified equinoctial elements. The singularity-flipping
      element :math:`I` is computed automatically by this function (using :func:`flip_mee_singularity`)
      
      .. note:: See module level documentation for the standard ordering convention of Modified Equinoctial elements used.


    parameters:
      - name: cartesian_elements # [py]
        type: numpy.ndarray # [py]
        description: Cartesian elements that are to be converted to Modified equinoctial elements

      - name: gravitational_parameter # [py]
        type: float # [py]
        description: Gravitational parameter of central body

    returns:
        type: numpy.ndarray # [py]
        description: Modified equinoctial elements, as computed from Cartesian element input.

  - name: cartesian_to_mee_manual_singularity # [py]
    short_summary: "Convert Cartesian to Modified equinoctial elements."
    extended_summary: |
      Convert cartesian to Modified equinoctial elements. The singularity-flipping
      element :math:`I` is to be provided manually for this function
      
      .. note:: See module level documentation for the standard ordering convention of Modified Equinoctial elements used.


    parameters:
      - name: cartesian_elements # [py]
        type: numpy.ndarray # [py]
        description: Cartesian elements that are to be converted to Modified equinoctial elements

      - name: gravitational_parameter # [py]
        type: float # [py]
        description: Gravitational parameter of central body

      - name: singularity_at_zero_inclination # [py]
        type: bool # [py]
        description: Singularity at 0 degrees inclination if false, 180 degrees if true

    returns:
        type: numpy.ndarray # [py]
        description: Modified equinoctial elements, as computed from Cartesian element input.


  - name: mee_to_cartesian # [py]
    short_summary: "Convert Modified equinoctial to Cartesian elements."
    extended_summary: |
      
      .. note:: See module level documentation for the standard ordering convention of Modified Equinoctial elements used.


    parameters:
      - name: modified_equinoctial_elements # [py]
        type: numpy.ndarray # [py]
        description: Modified equinoctial elements that are to be converted to Cartesian elements

      - name: gravitational_parameter # [py]
        type: float # [py]
        description: Gravitational parameter of central body

      - name: singularity_at_zero_inclination # [py]
        type: bool # [py]
        description: Singularity at 0 degrees inclination if false, 180 degrees if true

    returns:
        type: numpy.ndarray # [py]
        description: Cartesian elements, as computed from Modified equinoctial element input.



  - name: quaternion_entries_to_rotation_matrix # [py]
  - name: convertVectorQuaternionToMatrixFormat # [cpp]
    short_summary: "Converts an array of four quaternion elements to the equivalent rotation matrix."
    extended_summary: |
      Function to convert an array of four quaternion elements to the equivalent rotation matrix. These quaternion elements
      are for instance used when propagating rotational dynamics in Tudat, and this function can be used to convert the
      numerical results to a usable rotation matrix. See `our user guide <https://docs.tudat.space/en/latest/_src_user_guide/state_propagation/environment_setup/frames_in_environment.html?highlight=rotational%20states#rotational-states>`_ for more details.

    parameters:
      - name: quaternion_entries # [py]
        type: numpy.ndarray # [py]
      - name: vector # [cpp]
        type: Eigen::Vector4d # [cpp]
        description: Quaternion elements, as per the convention used in the `Eigen library <https://eigen.tuxfamily.org/dox/classEigen_1_1Quaternion.html>`_

    returns:
        type: numpy.ndarray # [py]
        description: Rotation matrix defining the equivalent rotation.

  - name: rotation_matrix_to_quaternion_entries # [py]
  - name: convertMatrixToVectorQuaternionFormat # [cpp]
    short_summary: "Converts a rotation matrix to the equivalent array of four quaternion elements."
    extended_summary: |
      Inverse function of :func:`quaternion_entries_to_rotation_matrix`.

    parameters:
      - name: rotation_matrix # [py]
        type: numpy.ndarray # [py]
      - name: matrix # [cpp]
        type: Eigen::Matrix3d # [cpp]
        description: Rotation matrix

    returns:
        type: numpy.ndarray # [py]
        description: Equivalent quaternion elements, as per the convention used in the `Eigen library <https://eigen.tuxfamily.org/dox/classEigen_1_1Quaternion.html>`_





  - name: cartesian_to_spherical # [py]
    short_summary: "Convert Cartesian to spherical elements."
    extended_summary: |
      .. note:: See module level documentation for the standard ordering  convention of spherical state elements used.


    parameters:
      - name: cartesian_elements # [py]
        type: numpy.ndarray # [py]
      - name: cartesianElements # [cpp]
        type: Eigen::Vector6d # [cpp]
        description: Cartesian state that is to be converted to spherical elements

    returns:
        type: numpy.ndarray # [py]
        description: Spherical elements, as computed from Cartesian element input.


  - name: spherical_to_cartesian # [py]
    short_summary: "Convert spherical elements to Cartesian."
    extended_summary: |
      .. note:: See module level documentation for the standard ordering convention of spherical state elements used.

    parameters:
      - name: spherical_elements # [py]
        type: numpy.ndarray # [py]
        description: Spherical state that is to be converted to Cartesian elements

    returns:
        type: numpy.ndarray # [py]
        description: Cartesian elements, as computed from spherical element input. 



  - name: spherical_to_cartesian_elementwise # [py]
    short_summary: "Convert Spherical elements to Cartesian, with elementwise input."

    parameters:
      - name: radial_distance # [py]
        type: float # [py]
        description: Distance from origin of central body

      - name: latitude # [py]
        type: float # [py]
        description: Central body-fixed latitude

      - name: longitude # [py]
        type: float # [py]
        description: Central body-fixed longitude

      - name: speed # [py]
        type: float # [py]
        description: Central body-fixed speed (norm of velocity vector). Note that this is *not* the norm of the inertial velocity

      - name: flight_path_angle # [py]
        type: float # [py]
        description: Flight-path angle (of central body-fixed velocity vector)

      - name: heading_angle # [py]
        type: float # [py]
        description: Heading angle (of central body-fixed velocity vector)


    returns:
        type: numpy.ndarray # [py]
        description: Cartesian elements, as computed from spherical element input. 



