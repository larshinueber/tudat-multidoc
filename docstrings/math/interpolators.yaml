extended_summary: |
  Functions for performing numerical interpolation using various algorithms. More details on the usage of these functions is given in the `user guide <https://docs.tudat.space/en/latest/_src_user_guide/state_propagation/environment_setup/https://docs.tudat.space/en/latest/_src_user_guide/mathematics/interpolators.html>`_

classes:

  - name: InterpolatorSettings
    short_summary: "Base class to define settings for an interpolator."

  - name: LagrangeInterpolatorSettings
    short_summary: ":class:`InterpolatorSettings`-derived class to define settings for a Lagrange interpolator."

  - name: OneDimensionalInterpolatorScalar
    short_summary: "Object that performs interpolation for scalar independent, and scalar dependent variables."
    extended_summary: |
      Object that performs interpolation for scalar independent, and scalar dependent variables. This object is
      not created manually, but is set up using the :func:`create_one_dimensional_scalar_interpolator` function.

    methods:
      - name: interpolate # [py]
        short_summary: "This function performs the interpolation at the requested independent variable value."

        parameters:
        - name: independent_variable_value # [py]
          type: float # [py]
          description: |
            Value of independent variable at which the interpolation is to bse performed.

        returns:
          type: float
          description: Interpolated dependent variable value, using implemented algorithm at
            requested independent variable value


  - name: OneDimensionalInterpolatorVector
    short_summary: "Object that performs interpolation for vector independent, and vector dependent variables."
    extended_summary: |
      Object that performs interpolation for vector independent, and vector dependent variables. This object is
      not created manually, but is set up using the :func:`create_one_dimensional_vector_interpolator` function.

    methods:
      - name: interpolate # [py]
        short_summary: "This function performs the interpolation at the requested independent variable value."

        parameters:
        - name: independent_variable_value # [py]
          type: float # [py]
          description: |
            Value of independent variable at which the interpolation is to be performed.

        returns:
          type: np.array
          description: Interpolated dependent variable value, using implemented algorithm at
            requested independent variable value

  - name: OneDimensionalInterpolatorMatrix
    short_summary: Object that performs interpolation for matrix independent, and matrix dependent variables.
    extended_summary: |
      Object that performs interpolation for matrix independent, and matrix dependent variables. This object is
      not created manually, but is set up using the :func:`create_one_dimensional_matrix_interpolator` function.

    methods:
      - name: interpolate # [py]
        short_summary: "This function performs the interpolation at the requested independent variable value."

        parameters:
        - name: independent_variable_value # [py]
          type: float # [py]
          description: |
            Value of independent variable at which the interpolation is to be performed.

        returns:
          type: np.array
          description: Interpolated dependent variable value, using implemented algorithm at
            requested independent variable value
enums:

  - name: BoundaryInterpolationType
    short_summary: "Enumeration of types of behaviour to be used beyond the edges of the interpolation domain."
    extended_summary: |
     Enumeration of types of behaviour to be used beyond the edges of the interpolation domain. For independent variable
     data in the range :math:`[t_{0}..t_{N}]`, this enum is used to define the behaviour of the interpolator at
     :math:`t<t_{0}` and :math:`t>t_{N}

    members:
      - name: throw_exception_at_boundary
        description: The program will terminate with an error message when the interpolator is
          interrogated beyond the range :math:`[t_{0}...t_{N}]`
      - name: use_boundary_value
        description: The value :math:`\mathbf{x}_{0}` is returned for :math:`t<t_{0}`
          (and :math:`\mathbf{x}_{N}` if :math:`t>t_{N}`)
      - name: use_boundary_value_with_warning
        description: Same as ``use_boundary_value``, but a warning is printed to the terminal
      - name: extrapolate_at_boundary
        description: The interpolation scheme is extended beyond the range `t_{0}...t_{N}` without any warning.
          That is, the mathematical equation used to compute the value of :math:`x` in the range :math:`[t_{0}..t_{1}]`
          is used without any checks for :math:`t<t_{0}`  (and equivalently for :math:`t>t_{N}`).
          Warning, using this setting can result in divergent/unrealistic behaviour
      - name: extrapolate_at_boundary_with_warning
        description: Same as ``extrapolate_at_boundary``, but a warning is printed to the terminal
      - name: use_nan_value
        description: The program will return an interpolated value filled with NaN entries.
      - name: use_nan_value_with_warning
        description: Same as ``use_nan_value``, but a warning is printed to the terminal
         
  - name: AvailableLookupScheme
    short_summary: "Enumeration of types of behaviour to be used beyond the edges of the interpolation domain."
    extended_summary: |
      When the interpolation is performed, the interpolator scheme will typically start by finding the nearest neighbor of
      the requested value of the independent variable :math:`t` in the data set :math:`[t_{0}..t_{N}]`.
      The choice of lookup scheme can have a significant influence on computational efficiency for large data sets and/or simple
      interpolation algorithms

    members:
      - name: hunting_algorithm
        description: With this option, the interpolator 'remembers' which value of :math:`t_{i}` was the nearest neighbor
          during the previous call to the interpolate function, and starts looking at/near this entry of the data set
          :math:`[t_{i}]` to find the nearest neighbor.
      - name: binary_search
        description: With this option, the algorithm uses a binary search algorithm to find the nearest neighbor, initially
          starting with the full data range :math:`[t_{0}..t_{N}]`.

  - name: LagrangeInterpolatorBoundaryHandling
    short_summary: "Enumeration of types of behaviour to be used close to the edges of the interpolation domain, for the Lagrange interpolator."
    extended_summary: |
      Enumeration of types of behaviour to be used close to the edges of the interpolation domain, for the Lagrange interpolator.
      As explained for :func:`lagrange_interpolation`, the algorithm for the Lagrange interpolation breaks down at the edges of
      the interpolation domain. This enum provides the available options a user has to deal with this.

    members:
      - name: lagrange_cubic_spline_boundary_interpolation
        description: A cubic-spline interpolator is created from the first and last :math:`\max(m/2-1,4)` data points of the
          full data set, and these cubic spline interpolators are used when an interpolation at :math:`t<t_{(m/2-1)}` or :math:`t<t_{N-(m/2)}` is called

      - name: lagrange_cubic_spline_boundary_interpolation_with_warning
        description: Same as ``lagrange_cubic_spline_boundary_interpolation``, but a warning is printed to the terminal


      - name: lagrange_no_boundary_interpolation
        description: The program will terminate with an exception when the Lagrange interpolator is interrogated beyond its valid range

      - name: lagrange_boundary_nan_interpolation
        description: The program will return an interpolated value filled with NaN entries.

      - name: lagrange_boundary_nan_interpolation_with_warning
        description: Same as ``lagrange_boundary_nan_interpolation``, but a warning is printed to the terminal

functions:

  - name: linear_interpolation # [py]
  #- name: linearInterpolation # [cpp]
    short_summary: "Function to create settings for linear interpolation."
    extended_summary: |
      Function to create settings for linear interpolation, where the interpolator
      defines a linear curve between each two subsequent intervals of the
      independent variable input data.

    parameters:
      - name: lookup_scheme # [py]
        type: AvailableLookupScheme, default=huntingAlgorithm # [py]
        description: Algorithm used to find the nearest neighbor in the independent
          variable input data when the interpolation scheme is called

      - name: boundary_interpolation  # [py]
        type: BoundaryInterpolationType, default=extrapolate_at_boundary_with_warning  # [py]
        description: Interpolator behaviour that is to be used beyond the upper and lower boundaries
          of the independent variable input data

    returns:
        type: InterpolatorSettings # [py]
        description: Linear interpolation settings object


  - name: piecewise_constant_interpolation # [py]
    short_summary: "Function to create settings for piecewise constant interpolation."
    extended_summary: |
      Function to create settings for piecewise constant interpolation. If interpolator
      is to return the value at :math:`t`, and :math:`t_{i}\le t \< t_{i+1}`, the interpolator
      returns :math:`\mathbf{x}_{i}`

    parameters:
      - name: lookup_scheme # [py]
        type: AvailableLookupScheme, default = huntingalgorithm# [py]
        description: Algorithm used to find the nearest neighbor in the independent
          variable input data when the interpolation scheme is called

      - name: boundary_interpolation # [py]
        type: BoundaryInterpolationType = extrapolate_at_boundary_with_warning # [py]
        description: Interpolator behaviour that is to be used beyond the upper and lower boundaries
          of the independent variable input data

    returns:
        type: InterpolatorSettings # [py]
        description: Piecewise constant interpolation settings object

  - name: cubic_spline_interpolation # [py]
    short_summary: "Function to create settings for cubic spline interpolation."
    extended_summary: |
      Function to create settings for cubic spline interpolation, where the interpolator
      defines a cubic curve polynomial curve between each two subsequent intervals of the
      independent variable input data. The curve has continuous value, first derivative and
      second derivate between subsequent intervals. As boundary condition, the spline has
      a zero second derivative imposed at the upper and lower boundaries of the interpolation
      domain.

    parameters:
      - name: lookup_scheme # [py]
        type: AvailableLookupScheme, default = huntingalgorithm# [py]
        description: Algorithm used to find the nearest neighbor in the independent
          variable input data when the interpolation scheme is called

      - name: boundary_interpolation # [py]
        type: BoundaryInterpolationType = extrapolate_at_boundary_with_warning # [py]
        description: Interpolator behaviour that is to be used beyond the upper and lower boundaries
          of the independent variable input data

    returns:
        type: InterpolatorSettings # [py]
        description: Cubic spline settings object

  - name: hermite_spline_interpolation # [py]
  #- name: linearInterpolation # [cpp]
    short_summary: "Function to create settings for cubic Hermite spline interpolation."
    extended_summary: |
      Function to create settings for piecewise cubic Hermite spline interpolation. To use this
      interpolator, a key-value container of values, and a key-value container of first derivatives,
      must be provided to the function creating an interpolator (:func:`create_one_dimensional_scalar_interpolator`,
      :func:`create_one_dimensional_vector_interpolator`,  :func:`create_one_dimensional_matrix_interpolator`). The resulting
      spline uses the value and first derivatives (four piece of information for each interval) at two subsequent nodes to construct
      a cubic polynomial between each two subsequent nodes. The resulting spline has constant values and first derivatives

    parameters:
      - name: lookup_scheme # [py]
        type: AvailableLookupScheme, default = huntingalgorithm# [py]
        description: Algorithm used to find the nearest neighbor in the independent
          variable input data when the interpolation scheme is called

      - name: boundary_interpolation # [py]
        type: BoundaryInterpolationType = extrapolate_at_boundary_with_warning # [py]
        description: Interpolator behaviour that is to be used beyond the upper and lower boundaries
          of the independent variable input data

    returns:
        type: InterpolatorSettings # [py]
        description: Hermite spline interpolation settings object

  - name: lagrange_interpolation # [py]
  #- name: linearInterpolation # [cpp]
    short_summary: "Function to create settings for cubic Lagrange interpolation."
    extended_summary: |
      Function to create settings for piecewise cubic Lagrange interpolation.  This is typically the interpolator of highest accuracy that is available.
      The Lagrange interpolator uses :math:`m` consecutive points (input to this function) from the input independent variables :math:`[t_{0}...t_{N}]`
      to create the polynomial of order :math:`m-1` that interpolates these points. From here on, we assume :math:`m` is even.
      The algorithm that is used (see `here <https://mathworld.wolfram.com/LagrangeInterpolatingPolynomial.html>`_ for mathematical details
      on interpolating Lagrange polynomials) works as follows:

      * The nearest lower neighbor of the data point :math:`t` at which the state :math:`\mathbf{x}` is to be interpolated is determined, and denoted :math:`t_{i}`.
      * An interpolating Lagrange polynomial is constructed from the consecutive data points :math:`[t_{i-(m/2-1)}...t_{i+m}]`
      * This resulting interpolating polynomial is *only* used in the interval :math:`[t_{i}..t_{i+1}]`, to prevent `Runge's phenomenon <https://en.wikipedia.org/wiki/Runge%27s_phenomenon>`_.

      For instance, if :math:`m=8` we use a :math:`7^{th}` order polynomial that interpolates a contiguous set of
      8 data points out of the full data set. Normally, the interpolating polynomial is only used between the
      :math:`4^{th}` and :math:`5^{th}` data point, where it will typically be of good accuracy. Consequently,
      a separate interpolating polynomial (using data over a span of :math:`m` consecutive points) is used for
      each single interval :math:`[t_{i}..t_{i+1}]` (with the exception of the boundaries, see below).

      .. warning:: Issues can occur if the data point :math:`t` at which the interpolation is to be
                   performed is close to :math:`t_{0}` or :math:`t_{N}`. In those case, there is not sufficient
                   data to construct the interpolating polynomial *and* to only use this interpolating polynomial
                   between the middle two data points that were used to it. In these cases, the user has a number of
                   options (all defined by an entry of the :class:`LagrangeInterpolatorBoundaryHandling` variable,
                   used as input to this function). In short, interpolation between the first and last :math:`m/2`
                   data points will lead to degraded results, warnings, or termination.

    parameters:

      - name: number_of_points # [py]
        type: int # [py]
        description: Number of consecutive data points that are used to construct a single interpolating polynomial.

      - name: lookup_scheme # [py]
        type: AvailableLookupScheme, default = huntingalgorithm # [py]
        description: Algorithm used to find the nearest neighbor in the independent
          variable input data when the interpolation scheme is called

      - name: boundary_interpolation # [py]
        type: BoundaryInterpolationType = extrapolate_at_boundary_with_warning # [py]
        description: Interpolator behaviour that is to be used beyond the upper and lower boundaries
          of the independent variable input data

      - name: lagrange_boundary_handling # [py]
        type: LagrangeInterpolatorBoundaryHandling = lagrange_cubic_spline_boundary_interpolation # [py]
        description: Interpolator behaviour that is to be used at the boundaries of the domain, where the
          regular algorithm cannot be executed.

    returns:
      type: LagrangeInterpolatorSettings # [py]
      description: Lagrange interpolation settings object

  - name: create_one_dimensional_scalar_interpolator # [py]
    short_summary: "Function to create an interpolator for scalar dependent variables."
    extended_summary: |
      Function to create an interpolator for scalar dependent variables, with a single independent
      variable. This function takes the interpolator settings, and the data that is to be interpolated,
      as input to create the object that can perform the actual interpolation

    parameters:
      - name: data_to_interpolate
        type: dict[float, float]
        description: Key-value container with pairs of independent variables (key) and
          dependent variables (value) from which the interpolation is to be performed

      - name: interpolator_settings
        type: InterpolatorSettings
        description: Settings that define the type of interpolator that is to be used

      - name: data_first_derivatives
        type: dict[float, float] = dict()
        description: Key-value container with pairs of independent variables (key) and
          first derivative dependent variables w.r.t. independent variable (value) from which
          the interpolation is to be performed. This input is *only* required if the
          requested interpolation algorithm requires first derivatives as input (such as the Hermite spline interpolator

    returns:
        type: OneDimensionalInterpolatorScalar
        description: Interpolator object

  - name: create_one_dimensional_vector_interpolator # [py]
    short_summary: "Function to create an interpolator for vector dependent variables."
    extended_summary: |
      As :func:`create_one_dimensional_scalar_interpolator`, but with vectors as dependent variables

    parameters:
      - name: data_to_interpolate
        type: dict[float, np.array]
        description: Key-value container with pairs of independent variables (key) and
          dependent variables (value) from which the interpolation is to be performed

      - name: interpolator_settings
        type: InterpolatorSettings
        description: Settings that define the type of interpolator that is to be used

      - name: data_first_derivatives
        type: dict[float, np.array] = dict()
        description: Key-value container with pairs of independent variables (key) and
          first derivative dependent variables w.r.t. independent variable (value) from which
          the interpolation is to be performed. This input is *only* required if the
          requested interpolation algorithm requires first derivatives as input (such as the Hermite spline interpolator).

    returns:
        type: OneDimensionalInterpolatorVector
        description: Interpolator object

  - name: create_one_dimensional_matrix_interpolator # [py]
    short_summary: "Function to create an interpolator for matrix dependent variables."
    extended_summary: |
      As :func:`create_one_dimensional_scalar_interpolator`, but with matrices (2-dimensional arrays) as dependent variables

    parameters:
      - name: data_to_interpolate
        type: dict[float, np.array]
        description: Key-value container with pairs of independent variables (key) and
          dependent variables (value) from which the interpolation is to be performed

      - name: interpolator_settings
        type: InterpolatorSettings
        description: Settings that define the type of interpolator that is to be used

      - name: data_first_derivatives
        type: dict[float, np.array] = dict()
        description: Key-value container with pairs of independent variables (key) and
          first derivative dependent variables w.r.t. independent variable (value) from which
          the interpolation is to be performed. This input is *only* required if the
          requested interpolation algorithm requires first derivatives as input (such as the Hermite spline interpolator

    returns:
        type: OneDimensionalInterpolatorMatrix
        description: Interpolator object
