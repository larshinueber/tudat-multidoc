extended_summary: |
  Functions for root-finding of algebraic univariate functions using various algorithms. 
  In this submodule, various methods can be selected to:
  
  .. math::
     \text{find }x\text{, such that: } f(x)=0

  The methods that can be selected here are iterative methods to find approximate solutions to the above problem,
  starting from an initial guess :math:`x_{0}`, for which :math:`f_{0}=f(x_{0})`. The various methods implement different
  iterative algorithms to compute :math:`x_{i}\rightarrow x_{i+1}`. That is, they (attempt to) compute an improved guess of the root
  at iteration :math:`i+1` from the guess at iteration :math:`i`, and continue iterating until convergence has been reached.
  
  Depending on the method that is use, the root-finder may need several initial guesses, or have a formulation for one or
  more derivatives of the function :math:`f(x)`. If the required information is not available when performing the root-finding,
  and exception will be thrown.
  
  There are several convergence criteria that can be defined for this
  
  * When an absolute tolerance :math:`\epsilon_{a}` is met, such that :math:`|x_{i}-x_{i-1}|<\epsilon_{a}`
  * When a relative tolerance :math:`\epsilon_{r}` is met, such that :math:`|(x_{i}-x_{i-1})/x_{i}|<\epsilon_{r}`
  * When the root function gets within :math:`\epsilon_{f}` of the true root :math:`|f(x_{i}|<\epsilon_{f}`)
  * When the number if iterations exceeds some threshold :math:`N`, such that :math:`i=N`
  
  The root finder algorithm continues until as single one of the required convergence criteria is met. 
  
  When meeting the convergence criterion on number of iterations :math:`N`, a user can choose to deal with this in one of several manners (see below).
  
classes:

  - name: RootFinderSettings
    short_summary: "Class to define settings for a root finder."
    
enums:

  - name: MaximumIterationHandling
    short_summary: "Enumeration of types of behaviour to be used when the convergence criterion on maximum number of iterations is reached."

    members:
      - name: accept_result
        description: The program will accept the root at the final iteration, without any additional output
        
      - name: accept_result_with_warning
        description: The program will accept the root at the final iteration, but will print a warning to the terminal that the root finder may not have converged
        
      - name: throw_exception
        description: The program will not accept the root at the final iteration, and will throw an exception

functions:

  - name: bisection # [py]
    short_summary: "Function to create settings for a bisection root-finder."
    extended_summary: |
      Function to create settings for a bisection root finder. This root finder approximates the root by initializing with
      two initial guesses :math:`x_{\downarrow,0}` and :math:`x_{\uparrow,0}`, for which it is required that
      :math:`f(x_{\downarrow,0}) < 0` and :math:`f(x_{\uparrow,0}) > 0`. At each iteration :math:`i`, the current guess of
      the root :math:`x_{i}` is:
      
      .. math::
         x_{i}=\begin{cases}
         x_{\downarrow,i}, & |f(x_{\downarrow,i})|<|f(x_{\uparrow,i})|\\
      	  x_{\uparrow,i}, & |f(x_{\downarrow,i})|\ge|f(x_{\uparrow,i})|
      	       \end{cases}
      
      The midpoint :math:`x_{m,i}` of :math:`x_{\downarrow,i}` and :math:`x_{\uparrow,i}` is then computed from :math:`x_{m,i}=(x_{\downarrow,i}-x_{\uparrow,i})/2`.
      Depending on the sign of :math:`f(x_{m,i})`, it then replaces either :math:`x_{\downarrow,i}` or :math:`x_{\uparrow,i}` (depending on whether
      its sign matches :math:`f(x_{\downarrow,i})` for iteration :math:`i+1` and :math:`f(x_{\uparrow,i})`), while the other point from iteration :math:`i` is retained. 
      
      Although slow, the algorithm is ensured to converge to a root, if the two initial guesses indeed have opposite signs (if not, an exception is thrown).
      
    parameters:
      - name: relative_variable_tolerance # [py]
        type: float, default = nan # [py]
        description: Relative tolerance :math:`\epsilon_{r}` (setting not used if nan)

      - name: absolute_variable_tolerance # [py]
        type: float, default = nan # [py]
        description: Relative absolute :math:`\epsilon_{a}` (setting not used if nan)

      - name: root_function_tolerance # [py]
        type: float, default = nan # [py]
        description: Root function tolerance :math:`\epsilon_{f}` (setting not used if nan)
        
      - name: maximum_iteration # [py]
        type: int, default = 1000 # [py]
        description: Maximum number of iterations :math:`N`
        
      - name: maximum_iteration_handling # [py]
        type: MaximumIterationHandling, default = throw_exception # [py]
        description: Algorithm behaviour if maximum number of iterations :math:`N` is reache
        
        
    returns:
        type: RootFinderSettings # [py]
        description: Bisection root-finding settings object


  - name: newton_raphson # [py]
    short_summary: "Function to create settings for a Newton-Raphson root-finder."
    extended_summary: |
      Function to create settings for a bisection root finder. This root finder approximates the root by initializing with
      a single initial guesses :math:`x_{0}` and requires an analytical formulation for :math:`f(x)` and :math:`f'(x)=\frac{d}{dx}f(x)`.
      The algorithm uses the following equation to iterate:
            
      .. math::
         x_{i+1}=x_{i}-\frac{f(x_{i})}{f'(x_{i})}
    parameters:
      - name: relative_variable_tolerance # [py]
        type: float, default = nan # [py]
        description: Relative tolerance :math:`\epsilon_{r}` (setting not used if nan)

      - name: absolute_variable_tolerance # [py]
        type: float, default = nan # [py]
        description: Relative absolute :math:`\epsilon_{a}` (setting not used if nan)

      - name: root_function_tolerance # [py]
        type: float, default = nan # [py]
        description: Root function tolerance :math:`\epsilon_{f}` (setting not used if nan)
        
      - name: maximum_iteration # [py]
        type: int, default = 1000 # [py]
        description: Maximum number of iterations :math:`N`
        
      - name: maximum_iteration_handling # [py]
        type: MaximumIterationHandling, default = throw_exception # [py]
        description: Algorithm behaviour if maximum number of iterations :math:`N` is reache
        
        
    returns:
        type: RootFinderSettings # [py]
        description: Newton-Raphson root-finding settings object
        
        
  - name: secant # [py]
    short_summary: "Function to create settings for a secant method root-finder."
    extended_summary: |
      Function to create settings for a root finder using the secant method. This root finder approximates the root by initializing with
      two initial guesses :math:`x_{0}` and :math:`x_{1}`. The algorithm uses the following equation to iterate:
            
      .. math::
         x_{i+1}=x_{i}-f(x_{i})\frac{x_{i}-x_{i-1}}{f(x_{i})-f(x_{i-1})}
         
      
    parameters:
      - name: relative_variable_tolerance # [py]
        type: float, default = nan # [py]
        description: Relative tolerance :math:`\epsilon_{r}` (setting not used if nan)

      - name: absolute_variable_tolerance # [py]
        type: float, default = nan # [py]
        description: Relative absolute :math:`\epsilon_{a}` (setting not used if nan)

      - name: root_function_tolerance # [py]
        type: float, default = nan # [py]
        description: Root function tolerance :math:`\epsilon_{f}` (setting not used if nan)
        
      - name: maximum_iteration # [py]
        type: int, default = 1000 # [py]
        description: Maximum number of iterations :math:`N`
        
      - name: maximum_iteration_handling # [py]
        type: MaximumIterationHandling, default = throw_exception # [py]
        description: Algorithm behaviour if maximum number of iterations :math:`N` is reache
        
        
    returns:
        type: RootFinderSettings # [py]
        description: Secant root-finding settings object
        
  - name: halley # [py]
    short_summary: "Function to create settings for a Halley root-finder."
    extended_summary: |
      Function to create settings for a Halley root finder. This root finder approximates the root by initializing with
      a single initial guesses :math:`x_{0}` and requires an analytical formulation for :math:`f(x)`, :math:`f'(x)=\frac{d}{dx}f(x)` and :math:`f''(x)=\frac{d^{2}}{dx^{2}}f(x)`.
      The algorithm uses the following equation to iterate:
            
      .. math::
         x_{i+1}=x_{i}-\frac{2f(x_{i})f'(x_{i})}{2(f'(x_{i}))^{2}-f(x_{i})f''(x_{i})}
         
         
    parameters:
      - name: relative_variable_tolerance # [py]
        type: float, default = nan # [py]
        description: Relative tolerance :math:`\epsilon_{r}` (setting not used if nan)

      - name: absolute_variable_tolerance # [py]
        type: float, default = nan # [py]
        description: Relative absolute :math:`\epsilon_{a}` (setting not used if nan)

      - name: root_function_tolerance # [py]
        type: float, default = nan # [py]
        description: Root function tolerance :math:`\epsilon_{f}` (setting not used if nan)
        
      - name: maximum_iteration # [py]
        type: int, default = 1000 # [py]
        description: Maximum number of iterations :math:`N`
        
      - name: maximum_iteration_handling # [py]
        type: MaximumIterationHandling, default = throw_exception # [py]
        description: Algorithm behaviour if maximum number of iterations :math:`N` is reache
        
        
    returns:
        type: RootFinderSettings # [py]
        description: Halley root-finding settings object
